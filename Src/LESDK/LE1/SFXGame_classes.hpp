/*
#############################################################################################
# Mass Effect 1 (Legendary Edition) (2.0.0.48602) SDK
# Generated with TheFeckless UE3 SDK Generator v1.5_Beta-Rev.60-MELE
# ========================================================================================= #
# File: SFXGame_classes.hpp
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL, SirCxyrtyx
# Thanks: HOOAH07, lowHertz
#############################################################################################
*/


#pragma once


#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif
#define LESDK_IN_GENERATED


/*
# ========================================================================================= #
# Constants
# ========================================================================================= #
*/

#define CONST_RETICLE_MIN_AR                                     0.05f
#define CONST_GP_NEVER_TIMEOUT                                   9999999999.0f
#define CONST_ZONE_VALID_DELAY_TIME                              0.25f
#define CONST_BIO_SQUAD_MARK_TOLERANCE                           30.0
#define CONST_BIO_SQUAD_MARK_TOLERANCE_SQ                        900.0
#define CONST_BIO_SQUAD_HOLDVELOCITY                             50.0
#define CONST_BIO_SQUAD_HOLDVELOCITY_SQ                          2500.0
#define CONST_DEFAULT_MOVE_TOLERANCE                             35.0
#define CONST_AT_SNIPER_START                                    0.89
#define CONST_AT_SNIPER_END                                      0.80
#define CONST_AT_SNIPER_TIMEOUT                                  10.0
#define CONST_AT_ACCURATE_START                                  0.75
#define CONST_AT_ACCURATE_END                                    0.65
#define CONST_AT_ACCURATE_TIMEOUT                                5.0
#define CONST_AT_INACCURATE_START                                0.65
#define CONST_AT_INACCURATE_END                                  0.35
#define CONST_AT_INACCURATE_TIMEOUT                              5.0
#define CONST_AT_SUPPRESSING_START                               0.45
#define CONST_AT_SUPPRESSING_END                                 0.15
#define CONST_AT_SUPPRESSING_TIMEOUT                             5.0
#define CONST_AT_POWER_START                                     0.05
#define CONST_AT_POWER_END                                       0.04
#define CONST_AT_POWER_TIMEOUT                                   10.0
#define CONST_AT_MELEE_START                                     0.05
#define CONST_AT_MELEE_END                                       0.01
#define CONST_AT_MELEE_TIMEOUT                                   5.0
#define CONST_STABILITY_OFFSET                                   0.10
#define CONST_MELEE_RANGE                                        1000
#define CONST_DEFEND_THRESHOLD                                   0.90
#define CONST_UpDateDistanceSqr                                  2500.0
#define CONST_THREAT_BASE_RANGE_SQ                               1000000
#define CONST_BIO_SQUAD_CHATTER_RANDOM                           1
#define CONST_BIO_SQUAD_CHATTER_EXCLUDE_LEADER                   2
#define CONST_NEW_ACTION_GROUP                                   -1
#define CONST_EXISTING_ACTION_GROUP                              -2
#define CONST_FOLLOW_MOVEMENT_TIME_OUT                           20.0
#define CONST_FOLLOW_MOVEMENT_Tolerance                          5.0
#define CONST_FOLLOW_MOVEMENT_PathFind_Tolerance                 20.0
#define CONST_FOLLOW_MOVEMENT_PathFind_IntermediateMoveTolerance 20.0
#define CONST_ELEVATION_TEST_HEIGHT                              300
#define CONST_COVERINVALIDRANK                                   -1
#define CONST_BIO_PAWN_ANIM_WALK_START_SPEED                     0.05f
#define CONST_BIO_PAWN_BEHAVIOR_BIOTIC_SLOW_MOTION_SPEED         0.5f
#define CONST_BIO_PAWN_BEHAVIOR_BIOTIC_SLOW_MOTION_DURATION      -1.0f
#define CONST_BIO_PAWN_BEHAVIOR_BIOTIC_SLOW_MOTION_PRIORITY      0
#define CONST_BIO_PAWN_BEHAVIOR_BIOTIC_SLOW_MOTION_END_DURATION  0
#define CONST_BIO_PAWN_ANIM_RUN_RIGHT_FOOT_END                   0.75f
#define CONST_BIO_PAWN_ANIM_RUN_RIGHT_FOOT_START                 0.25f
#define CONST_MAX_COVER_BIAS_POINT_PROJECTION                    4000.f
#define CONST_FRONT_COVER_ARC                                    0.5
#define CONST_BIO_ACTION_ANIM_NODE_COUNT                         11
#define CONST_SHOTS_PER_LOOP_CYCLE                               12.0f
#define CONST_Bio_SkillState                                     'SkillState'
#define CONST_Bio_Physics                                        'Physics'
#define CONST_Bio_Opened                                         'Opened'
#define CONST_Bio_Closed                                         'Closed'
#define CONST_DEFAULT_CAMERA_FOV                                 52.9f
#define CONST_DEFAULT_NEAR_CLIP_PLANE                            10.0f
#define CONST_VERY_SMALL_TIME                                    0.00001f
#define CONST_DEBUG_CAMERAS                                      FALSE
#define CONST_MAX_DEFAULT_INTIMACY                               750
#define CONST_MIN_DEFAULT_INTIMACY                               250
#define CONST_NUM_TEAMS                                          2
#define CONST_GAME_PROPERTY_GROUP_NONE                           -1
#define CONST_GRENADE_CLOSE_PROXIMITY_DISTANCE_SQUARED           2500.0f
#define CONST_MAX_SIZE_PERCENT                                   0.75
#define CONST_HUD_SEGMENTS                                       64.0f
#define CONST_nDAMAGEINDICATORARCSLICES                          8
#define CONST_SFX_HOTKEY_SLOT_COUNT                              12
#define CONST_PP_ENABLE_FILM_GRAIN                               0x0002
#define CONST_PP_ENABLE_MOTION_BLUR                              0x0001
#define CONST_HOTKEY_SLOT_COUNT                                  12
#define CONST_EncodedSaveDescriptorMultiplier                    1000000
#define CONST_SelectParty                                        2
#define CONST_MaxSaveSize                                        1048576
#define CONST_MaleMorphHead                                      "BIOG_MORPH_FACE.Player_Base_Male"
#define CONST_FemaleMorphHead                                    "BIOG_MORPH_FACE.Player_Base_Female"
#define CONST_NUM_LINKS                                          10
#define CONST_COVERANYSLOTFLAG                                   -1
#define CONST_Resource_Head                                      1
#define CONST_Resource_Arms                                      2
#define CONST_Resource_legs                                      4
#define CONST_BACK_BUTTON_INDEX                                  13
#define CONST_MaxIcons                                           8
#define CONST_CloseAchievement                                   1
#define CONST_Initialize                                         2
#define CONST_NextItem                                           3
#define CONST_PrevItem                                           4
#define CONST_UpdateItemList                                     5
#define CONST_DumpDebug                                          6
#define CONST_AreaMap_Initialize                                 1
#define CONST_AreaMap_SetDestination                             2
#define CONST_AreaMap_OpenJournal                                3
#define CONST_AreaMap_ReturnToNormandy                           4
#define CONST_AreaMap_UpdateZoom                                 7
#define CONST_FadeFinished                                       1
#define CONST_PickSegment                                        1
#define CONST_CloseMenu                                          2
#define CONST_BWInitialized                                      3
#define CONST_GotoMainMenu                                       4
#define CONST_ConfirmMainMenu                                    5
#define CONST_PExitGame                                          6
#define CONST_ConfirmExit                                        7
#define CONST_PhotoMode                                          8
#define CONST_srExitConfirm                                      176289
#define CONST_srMainMenuConfirm                                  176290
#define CONST_srConfirm                                          153362
#define CONST_srCancel                                           153363
#define CONST_CHARACTER_HANDLER_EVENT_INITIALIZE                 1
#define CONST_CHARACTER_HANDLER_EVENT_NEXT_CHARACTER             2
#define CONST_CHARACTER_HANDLER_EVENT_AUTO_LEVEL_UP              3
#define CONST_CHARACTER_HANDLER_EVENT_PURCHASE_TALENT_RANK       4
#define CONST_CHARACTER_HANDLER_EVENT_CANCEL                     6
#define CONST_CHARACTER_HANDLER_EVENT_COMMIT                     7
#define CONST_CHARACTER_HANDLER_EVENT_PREV_CHARACTER             8
#define CONST_CHARACTER_HANDLER_EVENT_END_SUSPEND                11
#define CONST_CHARACTER_HANDLER_EVENT_TALENT_NOT_AVAILABLE       13
#define CONST_MODE_Illegal                                       4
#define CONST_SkipNode                                           1
#define CONST_SelectEntry                                        2
#define CONST_ShowReplyWheel                                     3
#define CONST_QueueEntry                                         4
#define CONST_MODE_Intimidate                                    3
#define CONST_MODE_Charm                                         2
#define CONST_MODE_Investigate                                   1
#define CONST_MODE_None                                          0
#define CONST_InitializeCredits                                  1
#define CONST_GetNextCredit                                      2
#define CONST_CreditScrollComplete                               3
#define CONST_CreditsCancel                                      4
#define CONST_Close                                              1
#define CONST_Select                                             3
#define CONST_back                                               4
#define CONST_Scan                                               5
#define CONST_ClosePlanet                                        6
#define CONST_InitializeGameOver                                 1
#define CONST_LoadLastSave                                       3
#define CONST_QuitToMainMenu                                     4
#define CONST_ShowLoadScreen                                     5
#define CONST_HealPower                                          20
#define CONST_m_cShieldBarsMinimum                               0
#define CONST_m_cShieldBarsMaximum                               6
#define CONST_nGrenadePowerToken                                 -1
#define CONST_nHealPowerToken                                    -2
#define CONST_nWeaponAltPowerToken                               -3
#define CONST_nArmorEmitterPowerToken                            -4
#define CONST_LogMsg                                             19
#define CONST_InitializeCommandWheel                             18
#define CONST_AssignPowerToHotKey                                14
#define CONST_ChangeToPowers                                     13
#define CONST_ChangeToWeapons                                    12
#define CONST_WeaponWheelSelect                                  11
#define CONST_InitializeWeaponWheel                              10
#define CONST_PowerWheelSelect                                   3
#define CONST_InitializePowerWheel                               2
#define CONST_InitializeHUD                                      1
#define CONST_IT_Populate                                        1
#define CONST_IT_Finished                                        2
#define CONST_MaxWeightBeforeGarbageCollect                      30
#define CONST_InitializeInventory                                1
#define CONST_NextFilter                                         2
#define CONST_PrevFilter                                         3
#define CONST_NextCharacter                                      4
#define CONST_PrevCharacter                                      5
#define CONST_EquipItem                                          6
#define CONST_SalvageItem                                        7
#define CONST_UpdateItemList01                                   8
#define CONST_UpdatePreviewItems                                 9
#define CONST_UpdateFilterIcons                                  10
#define CONST_ToggleHelmet                                       11
#define CONST_PreviewItemOn                                      12
#define CONST_PreviewItemOff                                     13
#define CONST_EquipItemDoubleCheck                               14
#define CONST_EndSuspend                                         19
#define CONST_ReturnToBrowserMenu                                1
#define CONST_CloseGUIs                                          2
#define CONST_CloseLoot                                          1
#define CONST_BreakLootItem                                      9
#define CONST_StartNewGame                                       1
#define CONST_ShowHonors                                         2
#define CONST_ShowCredits                                        3
#define CONST_InitializeMainMenu                                 4
#define CONST_ResumeGame                                         5
#define CONST_ShowLoadGui                                        6
#define CONST_ShowLiveContent                                    8
#define CONST_ShowOptions                                        9
#define CONST_ShowManual                                         10
#define CONST_ReturnToLauncher                                   11
#define CONST_srExitConfirmString                                180819
#define CONST_srConfirmString                                    153362
#define CONST_srCancelString                                     153363
#define CONST_NextGeneratedHead                                  1
#define CONST_SliderValueChanged                                 2
#define CONST_StartGameWithIconic                                3
#define CONST_InitializeNC                                       4
#define CONST_StartGameWithCustom                                5
#define CONST_ExitNewCharacter                                   6
#define CONST_ShowNameKeyboard                                   7
#define CONST_ConfirmCharCreate                                  8
#define CONST_ClassChange                                        9
#define CONST_SelectPreviousChar                                 10
#define CONST_Hide3DModel                                        11
#define CONST_StartCustom                                        12
#define CONST_Show3DModel                                        13
#define CONST_ZoomInOnFace                                       14
#define CONST_ZoomOutFromFace                                    15
#define CONST_ResetCategory                                      16
#define CONST_Set3DModelState                                    17
#define CONST_UpdateBonusTalents                                 18
#define CONST_CONST_SetCustomName                                19
#define CONST_PreloadData                                        20
#define CONST_ShowCodeKeyboard                                   21
#define CONST_SetCode                                            22
#define CONST_AStoLogEvent                                       23
#define CONST_CopyCode                                           24
#define CONST_PasteCode                                          25
#define CONST_UpdateGuiMode                                      26
#define CONST_MAX_CLASS_CHOICES                                  6
#define CONST_InitializeParty                                    1
#define CONST_AreaMap_HideMousePointer                           5
#define CONST_AreaMap_ShowMousePointer                           6
#define CONST_CHARACTER_HANDLER_EVENT_SET_CHARACTER              9
#define CONST_CHARACTER_HANDLER_EVENT_REMOVE_TALENT              10
#define CONST_CHARACTER_HANDLER_EVENT_CONFIRM_COMMIT             12
#define CONST_srCommitApply                                      153362
#define CONST_srCommitDontApply                                  153363
#define CONST_INVENTORY_HANDLER_EVENT_SET_CHARACTER              15
#define CONST_INVENTORY_HANDLER_EVENT_SET_SLOT                   16
#define CONST_INVENTORY_HANDLER_EVENT_SET_MOD_SLOT               17
#define CONST_INVENTORY_HANDLER_EVENT_INITIALIZE_MODS            18
#define CONST_HardWareMouseToggle                                1
#define CONST_InvertMouseToggle                                  2
#define CONST_MouseSenseSet                                      3
#define CONST_MinAnalogSense                                     50
#define CONST_MaxAnalogSense                                     1000
#define CONST_PCSExitMenu                                        4
#define CONST_PCSSetDefaults                                     5
#define CONST_PCSApplyChanges                                    6
#define CONST_SetBinding                                         7
#define CONST_UpdateKeyBindingText                               8
#define CONST_SettingsTabChanged                                 9
#define CONST_AudioVolMusic                                      10
#define CONST_AudioVolFX                                         11
#define CONST_AudioVolVoice                                      12
#define CONST_CaptionToggle                                      13
#define CONST_BrightnessChange                                   14
#define CONST_SetVsyncOpt                                        15
#define CONST_ParticleEffectsToggle                              16
#define CONST_SetWindowOpt                                       17
#define CONST_DynamMeshLodChange                                 18
#define CONST_TextureDetailChange                                19
#define CONST_ShadowDetailChange                                 20
#define CONST_ShaderBlurChange                                   21
#define CONST_AntiAChange                                        22
#define CONST_FilterModeChange                                   23
#define CONST_UpdateResolutionText                               24
#define CONST_SelectNewScreenRes                                 25
#define CONST_ShowBindingHelpText                                26
#define CONST_ToggleRumble                                       27
#define CONST_SetAnalogSensitivity                               28
#define CONST_PCSettingsCombatDiff                               34
#define CONST_PCSettingsAutoLevelUp                              35
#define CONST_PCSettingsTargetAssist                             36
#define CONST_PCSettingsSquadPowerUse                            37
#define CONST_PCSettingsSetTutFlags                              38
#define CONST_PCSettingsResetTutorials                           39
#define CONST_PCSettingsAutoEnemySighted                         40
#define CONST_PCSettingsAutoBleed                                41
#define CONST_PCSettingsAutoMemberDown                           42
#define CONST_PCSettingsConfirmNoSave                            43
#define CONST_PCSettingsSetAutoSave                              44
#define CONST_PCSettingsUnsaved                                  45
#define CONST_ShaderFilmChange                                   46
#define CONST_AudioHardwareToggle                                47
#define CONST_AudioTestVoice                                     48
#define CONST_AudioTestFX                                        49
#define CONST_AudioTestMusic                                     50
#define CONST_ExitGameToMainMenu                                 52
#define CONST_SetMakoSteering                                    53
#define CONST_SetControlSenseHC                                  54
#define CONST_SetControlSenseVC                                  55
#define CONST_SetControlSenseHE                                  56
#define CONST_SetControlSenseVE                                  57
#define CONST_SetAntiAliasing                                    58
#define CONST_PCSettingsStickConfig                              59
#define CONST_PCSettingsShootConfig                              60
#define CONST_SetDynamicResolution                               61
#define CONST_HDREnableChange                                    62
#define CONST_HDRBrightnessChange                                63
#define CONST_HDRContrastChange                                  64
#define CONST_AmbientOcclusionChange                             65
#define CONST_PCSettingsLegacyLevelUp                            66
#define CONST_UpdateSelectedMonitor                              67
#define CONST_RefreshHDR                                         68
#define CONST_PCUncappedFramerate                                69
#define CONST_PCOptions_MaxNumKeysPerAlias                       2
#define CONST_FadeoutComplete                                    1
#define CONST_FadeinComplete                                     2
#define CONST_AnyKeyPressed                                      3
#define CONST_Init                                               4
#define CONST_CrossHair_Smoothing_BufferSize                     3
#define CONST_InitializeSelectCharacter                          1
#define CONST_DeleteCharacter                                    2
#define CONST_ResumeGame01                                       3
#define CONST_back01                                             6
#define CONST_NewCharacter                                       7
#define CONST_DeleteCharacterConfirm                             8
#define CONST_CloseConfirm                                       9
#define CONST_SHOP_HANDLER_EVENT_CLOSE_SHOP                      1
#define CONST_SHOP_HANDLER_EVENT_INITIALIZE                      2
#define CONST_SHOP_HANDLER_EVENT_NEXT_SLOT                       3
#define CONST_SHOP_HANDLER_EVENT_PREV_SLOT                       4
#define CONST_SHOP_HANDLER_EVENT_SELECT_ITEM                     5
#define CONST_SHOP_HANDLER_EVENT_BUY_ITEM                        6
#define CONST_SHOP_HANDLER_EVENT_SELL_ITEM                       7
#define CONST_SHOP_HANDLER_EVENT_UPDATE_SLOT_ICONS               8
#define CONST_SHOP_HANDLER_EVENT_SWITCH_TO_SELL                  9
#define CONST_SHOP_HANDLER_EVENT_SWITCH_TO_BUY                   10
#define CONST_NUMBER_OF_MODIFIER_ICONS_ON_ITEM                   8
#define CONST_NUMBER_OF_COMPARE_SLOTS                            3
#define CONST_PLAYER_IS_BUYING                                   true
#define CONST_PLAYER_IS_SELLING                                  false
#define CONST_MINIMUM_PURCHASE_PRICE                             99
#define CONST_PURCHASE_ERROR_MSGBOX_DURATION                     0.8
#define CONST_SPECIALIZATION_HANDLER_EVENT_CHOOSE_SPECIALIZATION 1
#define CONST_SPECIALIZATION_HANDLER_EVENT_INITIALIZE            2
#define CONST_TutorialComplete                                   1
#define CONST_InitializeXMods                                    1
#define CONST_NextXModSlot                                       4
#define CONST_PrevXModSlot                                       5
#define CONST_ChangeCharacter                                    6
#define CONST_SwapInXMod                                         7
#define CONST_Fuse                                               8
#define CONST_UpdateXModList                                     9
#define CONST_UpdatePreviewXMods                                 10
#define CONST_UninstallXMod                                      14
#define CONST_SalvageXMod                                        15
#define CONST_XMOD_HANDLER_EVENT_SET_XMOD                        16
#define CONST_XMOD_HANDLER_EVENT_UNINSTALL_XMOD_FOR_CURRENT_SLOT 17
#define CONST_JunkXMod                                           18
#define CONST_SortXModList                                       19
#define CONST_NormalZThreshold                                   0.3f
#define CONST_OPTION_CAMERA_ORBIT                                1
#define CONST_OPTION_CAMERA_FREE                                 0
#define CONST_OPTION_ON                                          1
#define CONST_OPTION_OFF                                         0

/*
# ========================================================================================= #
# Enums
# ========================================================================================= #
*/

// Enum SFXGame.BioBaseAppearance.EBioBaseAppearanceReportMethod
/*enum EBioBaseAppearanceReportMethod
{
	BIO_BASE_APPEARANCE_REPORT_METHOD_NONE             = 0,
	BIO_BASE_APPEARANCE_REPORT_METHOD_LOG              = 1,
	BIO_BASE_APPEARANCE_REPORT_METHOD_DIALOG           = 2,
	BIO_BASE_APPEARANCE_REPORT_METHOD_MAX              = 3
};*/

// Enum SFXGame.BioDeathVFXCore.EBioDeathVFXGameStateEvent
/*enum EBioDeathVFXGameStateEvent
{
	BIO_DEATH_VFX_GAME_STATE_EVENT_DEATH               = 0,
	BIO_DEATH_VFX_GAME_STATE_EVENT_DEATH_ANIMATION_COMPLETED = 1,
	BIO_DEATH_VFX_GAME_STATE_EVENT_MAX                 = 2
};*/

// Enum SFXGame.BioDeathVFXControlBasic.EBioDeathVFXControlVFXType
/*enum EBioDeathVFXControlVFXType
{
	BIO_DEATH_VFX_CONDITION_VFX_TYPE_BOTH              = 0,
	BIO_DEATH_VFX_CONDITION_VFX_TYPE_DAMAGE_PREFERRED  = 1,
	BIO_DEATH_VFX_CONDITION_VFX_TYPE_APPEARANCE_PREFERRED = 2,
	BIO_DEATH_VFX_CONDITION_VFX_TYPE_DAMAGE_ONLY       = 3,
	BIO_DEATH_VFX_CONDITION_VFX_TYPE_APPEARANCE_ONLY   = 4,
	BIO_DEATH_VFX_CONDITION_VFX_TYPE_MAX               = 5
};*/

// Enum SFXGame.BioItemEnumerations.EBioEquipmentType
/*enum EBioEquipmentType
{
	EQUIPMENT_TYPE_INVALID                             = 0,
	EQUIPMENT_TYPE_ARMOR                               = 1,
	EQUIPMENT_TYPE_OMNITOOL                            = 2,
	EQUIPMENT_TYPE_WEAPON                              = 3,
	EQUIPMENT_TYPE_BIOAMP                              = 4,
	EQUIPMENT_TYPE_GRENADE                             = 5,
	EQUIPMENT_TYPE_MAX                                 = 6
};*/

// Enum SFXGame.BioItemEnumerations.EBioArmorType
/*enum EBioArmorType
{
	ARMOR_TYPE_NONE                                    = 0,
	ARMOR_TYPE_CLOTHING                                = 1,
	ARMOR_TYPE_LIGHT                                   = 2,
	ARMOR_TYPE_MEDIUM                                  = 3,
	ARMOR_TYPE_HEAVY                                   = 4,
	ARMOR_TYPE_MAX                                     = 5
};*/

// Enum SFXGame.BioItemEnumerations.EBioHeadGearType
/*enum EBioHeadGearType
{
	BIO_HEAD_GEAR_TYPE_HELMET                          = 0,
	BIO_HEAD_GEAR_TYPE_VISOR                           = 1,
	BIO_HEAD_GEAR_TYPE_COUNT                           = 2,
	BIO_HEAD_GEAR_TYPE_MAX                             = 3
};*/

// Enum SFXGame.BioItemEnumerations.EBioItemWeaponType
/*enum EBioItemWeaponType
{
	ITEM_WEAPTYPE_MELEE                                = 0,
	ITEM_WEAPTYPE_RANGED                               = 1,
	ITEM_WEAPTYPE_MAX                                  = 2
};*/

// Enum SFXGame.BioItemEnumerations.EBioItemWeaponRangedType
/*enum EBioItemWeaponRangedType
{
	ITEM_WEAPON_RANGED_PISTOL                          = 0,
	ITEM_WEAPON_RANGED_SHOTGUN                         = 1,
	ITEM_WEAPON_RANGED_ASSAULT_RIFLE                   = 2,
	ITEM_WEAPON_RANGED_SNIPER                          = 3,
	ITEM_WEAPON_RANGED_MAX                             = 4
};*/

// Enum SFXGame.BioItemEnumerations.EBioItemWeaponMeleeType
/*enum EBioItemWeaponMeleeType
{
	ITEM_WEAPON_MELEE_KNIFE                            = 0,
	ITEM_WEAPON_MELEE_SWORD                            = 1,
	ITEM_WEAPON_MELEE_AXE                              = 2,
	ITEM_WEAPON_MELEE_POLEARM                          = 3,
	ITEM_WEAPON_MELEE_SPEAR                            = 4,
	ITEM_WEAPON_MELEE_BLUNT                            = 5,
	ITEM_WEAPON_MELEE_COUNT                            = 6,
	ITEM_WEAPON_MELEE_MAX                              = 7
};*/

// Enum SFXGame.Bio_Appr_Character.eModelVar
/*enum eModelVar
{
	BioMV_Variation1                                   = 0,
	BioMV_Variation2                                   = 1,
	BioMV_Variation3                                   = 2,
	BioMV_Variation4                                   = 3,
	BioMV_Variation5                                   = 4,
	BioMV_Variation6                                   = 5,
	BioMV_Variation7                                   = 6,
	BioMV_Variation8                                   = 7,
	BioMV_Variation9                                   = 8,
	BioMV_MAX                                          = 9
};*/

// Enum SFXGame.Bio_Appr_Character.eMaterialVar
/*enum eMaterialVar
{
	BioTV_Sophistication1                              = 0,
	BioTV_Sophistication2                              = 1,
	BioTV_Sophistication3                              = 2,
	BioTV_Sophistication4                              = 3,
	BioTV_Sophistication5                              = 4,
	BioTV_Sophistication6                              = 5,
	BioTV_Sophistication7                              = 6,
	BioTV_Sophistication8                              = 7,
	BioTV_Sophistication9                              = 8,
	BioTV_MAX                                          = 9
};*/

// Enum SFXGame.Bio_Appr_Character.eHeadVar
/*enum eHeadVar
{
	BioHV_Head1                                        = 0,
	BioHV_Head2                                        = 1,
	BioHV_Head3                                        = 2,
	BioHV_Head4                                        = 3,
	BioHV_Head5                                        = 4,
	BioHV_Head6                                        = 5,
	BioHV_Head7                                        = 6,
	BioHV_Head8                                        = 7,
	BioHV_Head9                                        = 8,
	BioHV_MAX                                          = 9
};*/

// Enum SFXGame.Bio_Appr_Character.eHairVar
/*enum eHairVar
{
	BioHTV_Hat1                                        = 0,
	BioHTV_Hat2                                        = 1,
	BioHTV_Hat3                                        = 2,
	BioHTV_Hat4                                        = 3,
	BioHTV_Hat5                                        = 4,
	BioHTV_Hat6                                        = 5,
	BioHTV_Hat7                                        = 6,
	BioHTV_Hat8                                        = 7,
	BioHTV_Hat9                                        = 8,
	BioHTV_MAX                                         = 9
};*/

// Enum SFXGame.Bio_Appr_Character.EBioPawnHeadGearComponent
/*enum EBioPawnHeadGearComponent
{
	BIO_PAWN_HEAD_GEAR_COMPONENT_VISOR                 = 0,
	BIO_PAWN_HEAD_GEAR_COMPONENT_FACE_PLATE            = 1,
	BIO_PAWN_HEAD_GEAR_COMPONENT_HELMET                = 2,
	BIO_PAWN_HEAD_GEAR_COMPONENT_MAX                   = 3
};*/

// Enum SFXGame.Bio_Appr_Character.eModelType
/*enum eModelType
{
	BioMT_BodyAndHead                                  = 0,
	BioMT_Simple                                       = 1,
	BioMT_MAX                                          = 2
};*/

// Enum SFXGame.BioAttributes.EBioAttrModType
/*enum EBioAttrModType
{
	BIO_ATTR_MOD_SUM                                   = 0,
	BIO_ATTR_MOD_FRACTIONAL                            = 1,
	BIO_ATTR_MOD_LAYER                                 = 2,
	BIO_ATTR_MOD_BASE_OVERRIDE                         = 3,
	BIO_ATTR_MOD_MAX                                   = 4
};*/

// Enum SFXGame.BioAttributesItem.EBioAttributesItemRaceType
/*enum EBioAttributesItemRaceType
{
	BIO_ATTRIBUTES_ITEM_RACE_TYPE_ANY                  = 0,
	BIO_ATTRIBUTES_ITEM_RACE_TYPE_HUMAN                = 1,
	BIO_ATTRIBUTES_ITEM_RACE_TYPE_TURIAN               = 2,
	BIO_ATTRIBUTES_ITEM_RACE_TYPE_QUARIAN              = 3,
	BIO_ATTRIBUTES_ITEM_RACE_TYPE_KROGAN               = 4,
	BIO_ATTRIBUTES_ITEM_RACE_TYPE_VEHICLE              = 5,
	BIO_ATTRIBUTES_ITEM_RACE_TYPE_MAX                  = 6
};*/

// Enum SFXGame.Bio_Appr_Character.EBio_Appr_CharacterTalentRaceType
/*enum EBio_Appr_CharacterTalentRaceType
{
	BIO_APPR_CHARACTER_TALENT_RACE_TYPE_HUMANOID       = 0,
	BIO_APPR_CHARACTER_TALENT_RACE_TYPE_ANIMAL         = 1,
	BIO_APPR_CHARACTER_TALENT_RACE_TYPE_MACHINE        = 2,
	BIO_APPR_CHARACTER_TALENT_RACE_TYPE_MAX            = 3
};*/

// Enum SFXGame.BioDefine.EBioFactionTypes
/*enum EBioFactionTypes
{
	BIO_Faction_Player                                 = 0,
	BIO_Faction_Commoner                               = 1,
	BIO_Faction_Ambient                                = 2,
	BIO_Faction_Defender1                              = 3,
	BIO_Faction_Defender2                              = 4,
	BIO_Faction_Hostile1                               = 5,
	BIO_Faction_Hostile2                               = 6,
	BIO_Faction_Hacked                                 = 7,
	BIO_Faction_MAX                                    = 8
};*/

// Enum SFXGame.BioDefine.EBioPawnClassification
/*enum EBioPawnClassification
{
	BPC_General                                        = 0,
	BPC_ActionStation                                  = 1,
	BPC_Ambient                                        = 2,
	BPC_UIWorld                                        = 3,
	BPC_Combat                                         = 4,
	BPC_Player                                         = 5,
	BPC_Party                                          = 6,
	BPC_MAX                                            = 7
};*/

// Enum SFXGame.BioDefine.EBioFactionRelationship
/*enum EBioFactionRelationship
{
	BIO_Relation_Friendly                              = 0,
	BIO_Relation_Neutral                               = 1,
	BIO_Relation_Hostile                               = 2,
	BIO_Relation_MAX                                   = 3
};*/

// Enum SFXGame.BioDefine.EBioCoverStates
/*enum EBioCoverStates
{
	BIO_COVERSTATE_NONE                                = 0,
	BIO_COVERSTATE_INCOVER                             = 1,
	BIO_COVERSTATE_LEAN_LEFT                           = 2,
	BIO_COVERSTATE_LEAN_RIGHT                          = 3,
	BIO_COVERSTATE_POPUP                               = 4,
	BIO_COVERSTATE_MAX                                 = 5
};*/

// Enum SFXGame.BioDefine.EBioVFXPriority
/*enum EBioVFXPriority
{
	BIO_VFX_PRIORITY_MIN                               = 0,
	BIO_VFX_PRIORITY_LOW                               = 1,
	BIO_VFX_PRIORITY_MEDIUM                            = 2,
	BIO_VFX_PRIORITY_HIGH                              = 3,
	BIO_VFX_PRIORITY_ALWAYS                            = 4,
	BIO_VFX_PRIORITY_MAX                               = 5
};*/

// Enum SFXGame.BioDefine.EHopPhysicsStates
/*enum EHopPhysicsStates
{
	HPS_INVALID                                        = 0,
	HPS_Idle                                           = 1,
	HPS_Launch                                         = 2,
	HPS_Flying                                         = 3,
	HPS_Landing                                        = 4,
	HPS_Landed                                         = 5,
	HPS_MAX                                            = 6
};*/

// Enum SFXGame.BioDefine.EHopSurface
/*enum EHopSurface
{
	HopSurface_None                                    = 0,
	HopSurface_Floor                                   = 1,
	HopSurface_Ceiling                                 = 2,
	HopSurface_Wall                                    = 3,
	HopSurface_MAX                                     = 4
};*/

// Enum SFXGame.BioDefine.GuiEquipSlots
/*enum GuiEquipSlots
{
	EQUIP_SLOT_None                                    = 0,
	EQUIP_SLOT_Pistol                                  = 1,
	EQUIP_SLOT_Shotgun                                 = 2,
	EQUIP_SLOT_Assault                                 = 3,
	EQUIP_SLOT_Sniper                                  = 4,
	EQUIP_SLOT_BioAmp                                  = 5,
	EQUIP_SLOT_Armor                                   = 6,
	EQUIP_SLOT_OmniTool                                = 7,
	EQUIP_SLOT_Buyback                                 = 8,
	EQUIP_SLOT_Premium                                 = 9,
	EQUIP_SLOT_XMods                                   = 10,
	EQUIP_SLOT_COMBO_All                               = 11,
	EQUIP_SLOT_COMBO_BioAmp_OmniTool                   = 12,
	EQUIP_SLOT_COMBO_Weapons                           = 13,
	EQUIP_SLOT_Resources                               = 14,
	EQUIP_SLOT_Grenades                                = 15,
	EQUIP_SLOT_MAX                                     = 16
};*/

// Enum SFXGame.BioDefine.EDisableType
/*enum EDisableType
{
	DT_AI                                              = 0,
	DT_Power                                           = 1,
	DT_Offensive                                       = 2,
	DT_MAX                                             = 3
};*/

// Enum SFXGame.BioDefine.EActionComplete_None
/*enum EActionComplete_None
{
	ACN_Cancelled                                      = 0,
	ACN_Success                                        = 1,
	ACN_Disabled                                       = 2,
	ACN_MAX                                            = 3
};*/

// Enum SFXGame.BioDefine.EActionComplete_Movement
/*enum EActionComplete_Movement
{
	ACM_Cancelled                                      = 0,
	ACM_Success                                        = 1,
	ACM_Failed                                         = 2,
	ACM_Dead                                           = 3,
	ACM_LostCover                                      = 4,
	ACM_Disabled                                       = 5,
	ACM_CantSeeTarget                                  = 6,
	ACM_MAX                                            = 7
};*/

// Enum SFXGame.BioDefine.EActionComplete_Combat
/*enum EActionComplete_Combat
{
	ACC_Cancelled                                      = 0,
	ACC_Success                                        = 1,
	ACC_Failed                                         = 2,
	ACC_Dead                                           = 3,
	ACC_TargetKilled                                   = 4,
	ACC_TimeOut                                        = 5,
	ACC_LowTargeting                                   = 6,
	ACC_LostSight                                      = 7,
	ACC_Disabled                                       = 8,
	ACC_PowerCooldown                                  = 9,
	ACC_WeaponOverheat                                 = 10,
	ACC_WeaponCoolDown                                 = 11,
	ACC_MAX                                            = 12
};*/

// Enum SFXGame.BioVisualEffect.EBioVFXState
/*enum EBioVFXState
{
	BVFX_SPAWN                                         = 0,
	BVFX_LIFE                                          = 1,
	BVFX_DEATH                                         = 2,
	BVFX_ENUM_SIZE                                     = 3,
	BVFX_MAX                                           = 4
};*/

// Enum SFXGame.BioBaseAppearancePlaceable.EBioStateEnumProxy
/*enum EBioStateEnumProxy
{
	StateEnum_None                                     = 0,
	StateEnum_MAX                                      = 1
};*/

// Enum SFXGame.BioActive.EInitalizeEventType
/*enum EInitalizeEventType
{
	EIET_None                                          = 0,
	EIET_Attacked                                      = 1,
	EIET_Cast                                          = 2,
	EIET_MAX                                           = 3
};*/

// Enum SFXGame.BioSuperMode.EBioSophistication2DAColumnName
/*enum EBioSophistication2DAColumnName
{
	BIO_SOPHISTICATION_2DA_COLUMN_NAME_TBASE           = 0,
	BIO_SOPHISTICATION_2DA_COLUMN_NAME_CBASE           = 1,
	BIO_SOPHISTICATION_2DA_COLUMN_NAME_TMAX            = 2,
	BIO_SOPHISTICATION_2DA_COLUMN_NAME_CMAX            = 3,
	BIO_SOPHISTICATION_2DA_COLUMN_NAME_TAR             = 4,
	BIO_SOPHISTICATION_2DA_COLUMN_NAME_CAR             = 5,
	BIO_SOPHISTICATION_2DA_COLUMN_NAME_MOVEMENT_AR     = 6,
	BIO_SOPHISTICATION_2DA_COLUMN_NAME_COUNT           = 7,
	BIO_SOPHISTICATION_2DA_COLUMN_NAME_MAX             = 8
};*/

// Enum SFXGame.BioSuperMode.EBioSuperModes
/*enum EBioSuperModes
{
	BIO_SUPERMODE_BASE                                 = 0,
	BIO_SUPERMODE_INVALID                              = 1,
	BIO_SUPERMODE_MAX                                  = 2
};*/

// Enum SFXGame.BioSuperMode.EBioRangeInfoStatus
/*enum EBioRangeInfoStatus
{
	BIO_RANGE_INFO_STATUS_INVALID                      = 0,
	BIO_RANGE_INFO_STATUS_INTERPOLATE                  = 1,
	BIO_RANGE_INFO_STATUS_VALID                        = 2,
	BIO_RANGE_INFO_STATUS_MAX                          = 3
};*/

// Enum SFXGame.BioSuperMode.EBioReticule
/*enum EBioReticule
{
	RETICULE_COMBAT                                    = 0,
	RETICULE_BIOTIC                                    = 1,
	RETICULE_TECH                                      = 2,
	RETICULE_COUNT                                     = 3,
	RETICULE_MAX                                       = 4
};*/

// Enum SFXGame.BioActiveGrenade.EBioGrenadeActiveState
/*enum EBioGrenadeActiveState
{
	BIO_GRENADE_ACTIVE_STATE_THROW                     = 0,
	BIO_GRENADE_ACTIVE_STATE_DETONATE                  = 1,
	BIO_GRENADE_ACTIVE_STATE_MAX                       = 2
};*/

// Enum SFXGame.BioPawn.EBioCoverAnimState
/*enum EBioCoverAnimState
{
	eBioAnimCover_NoState                              = 0,
	eBioAnimCover_Entering                             = 1,
	eBioAnimCover_InCover                              = 2,
	eBioAnimCover_Exiting                              = 3,
	eBioAnimCover_MAX                                  = 4
};*/

// Enum SFXGame.BioPawn.EBioGrenadeThrowAnimationState
/*enum EBioGrenadeThrowAnimationState
{
	BIO_GRENADE_THROW_ANIMATION_STATE_STARTED          = 0,
	BIO_GRENADE_THROW_ANIMATION_STATE_GRAB             = 1,
	BIO_GRENADE_THROW_ANIMATION_STATE_THROW            = 2,
	BIO_GRENADE_THROW_ANIMATION_STATE_FINISHED         = 3,
	BIO_GRENADE_THROW_ANIMATION_STATE_MAX              = 4
};*/

// Enum SFXGame.BioPawn.EBioRagdollRecoverState
/*enum EBioRagdollRecoverState
{
	eBioAnimRBRecover_Sleep                            = 0,
	eBioAnimRBRecover_Idle                             = 1,
	eBioAnimRBRecover_Starting                         = 2,
	eBioAnimRBRecover_BlendFromPhys                    = 3,
	eBioAnimRBRecover_RunningAnim                      = 4,
	eBioAnimRBRecover_Finished                         = 5,
	eBioAnimRBRecover_MAX                              = 6
};*/

// Enum SFXGame.BioPawn.EBioGesturePriority
/*enum EBioGesturePriority
{
	eBioGesturePriority_None                           = 0,
	eBioGesturePriority_Kismet                         = 1,
	eBioGesturePriority_Conversations                  = 2,
	eBioGesturePriority_ActionStations                 = 3,
	eBioGesturePriority_Always                         = 4,
	eBioGesturePriority_MAX                            = 5
};*/

// Enum SFXGame.BioPawn.ELookAtTransitionType
/*enum ELookAtTransitionType
{
	LookAt_Default                                     = 0,
	LookAt_Snap                                        = 1,
	LookAt_MAX                                         = 2
};*/

// Enum SFXGame.BioPawn.EAimNodes
/*enum EAimNodes
{
	AimNode_Cover                                      = 0,
	AimNode_Head                                       = 1,
	AimNode_LeftShoulder                               = 2,
	AimNode_RightShoulder                              = 3,
	AimNode_Chest                                      = 4,
	AimNode_Groin                                      = 5,
	AimNode_LeftKnee                                   = 6,
	AimNode_RightKnee                                  = 7,
	AimNode_MAX                                        = 8
};*/

// Enum SFXGame.BioPawn.EBioSoundSetType
/*enum EBioSoundSetType
{
	BIO_SOUNDSET_None                                  = 0,
	BIO_SOUNDSET_AttackGrunt                           = 1,
	BIO_SOUNDSET_TargetDown                            = 2,
	BIO_SOUNDSET_PainGrunt                             = 3,
	BIO_SOUNDSET_LowHealth                             = 4,
	BIO_SOUNDSET_ShieldsDown                           = 5,
	BIO_SOUNDSET_DeathCry                              = 6,
	BIO_SOUNDSET_UNUSED_SpecialAttackPistol            = 7,
	BIO_SOUNDSET_UNUSED_SpecialAttackAssaultRifle      = 8,
	BIO_SOUNDSET_UNUSED_SpecialAttackShotgun           = 9,
	BIO_SOUNDSET_UNUSED_SpecialAttackSniperRifle       = 10,
	BIO_SOUNDSET_UNUSED_SpecialAbilityImmunity         = 11,
	BIO_SOUNDSET_UNUSED_SpecialAbilityAssassination    = 12,
	BIO_SOUNDSET_UNUSED_SpecialAbilityShieldBoost      = 13,
	BIO_SOUNDSET_UNUSED_SpecialAbilityAdrenalineRush   = 14,
	BIO_SOUNDSET_UNUSED_SpecialAbilityTakeDown         = 15,
	BIO_SOUNDSET_SpecialAbilityRacial1                 = 16,
	BIO_SOUNDSET_SpecialAbilityRacial2                 = 17,
	BIO_SOUNDSET_UNUSED_SpecialAbilityRacial3          = 18,
	BIO_SOUNDSET_UNUSED_BioticThrow                    = 19,
	BIO_SOUNDSET_UNUSED_BioticLift                     = 20,
	BIO_SOUNDSET_UNUSED_BioticWarp                     = 21,
	BIO_SOUNDSET_UNUSED_BioticWeaken                   = 22,
	BIO_SOUNDSET_UNUSED_BioticBarrier                  = 23,
	BIO_SOUNDSET_UNUSED_BioticStasis                   = 24,
	BIO_SOUNDSET_UNUSED_TechEMP                        = 25,
	BIO_SOUNDSET_UNUSED_TechSabotage                   = 26,
	BIO_SOUNDSET_UNUSED_TechDampeningField             = 27,
	BIO_SOUNDSET_UNUSED_TechAIHacking                  = 28,
	BIO_SOUNDSET_UNUSED_TechHeal                       = 29,
	BIO_SOUNDSET_UNUSED_TechNeuralShock                = 30,
	BIO_SOUNDSET_UNUSED_SpecialAbilityTaunt            = 31,
	BIO_SOUNDSET_ThrowGrenade                          = 32,
	BIO_SOUNDSET_UNUSED_PerceptionHearEnemy            = 33,
	BIO_SOUNDSET_UNUSED_PerceptionSeeEnemy             = 34,
	BIO_SOUNDSET_PerceptionAttackedByEnemy             = 35,
	BIO_SOUNDSET_DebuffToxic                           = 36,
	BIO_SOUNDSET_UNUSED_DebuffBodyDisabled             = 37,
	BIO_SOUNDSET_UNUSED_DebuffWeaponDisabled           = 38,
	BIO_SOUNDSET_UNUSED_DebuffSuppressed               = 39,
	BIO_SOUNDSET_LostCover                             = 40,
	BIO_SOUNDSET_IncomingGrenade                       = 41,
	BIO_SOUNDSET_UNUSED_AcceptedAttack                 = 42,
	BIO_SOUNDSET_UNUSED_AcceptedLockTarget             = 43,
	BIO_SOUNDSET_UNUSED_AcceptedMove                   = 44,
	BIO_SOUNDSET_UNUSED_CompletedAttack                = 45,
	BIO_SOUNDSET_UNUSED_CompletedMove                  = 46,
	BIO_SOUNDSET_UNUSED_CompletedTakingCover           = 47,
	BIO_SOUNDSET_GiveCommandFollow                     = 48,
	BIO_SOUNDSET_UNUSED_GiveCommandAttack              = 49,
	BIO_SOUNDSET_UNUSED_GiveCommandMove                = 50,
	BIO_SOUNDSET_UNUSED_TechUseElectronics             = 51,
	BIO_SOUNDSET_UNUSED_TechUseDecryption              = 52,
	BIO_SOUNDSET_UNUSED_selected                       = 53,
	BIO_SOUNDSET_UNUSED_ambient                        = 54,
	BIO_SOUNDSET_UNUSED_AbilityNotReady                = 55,
	BIO_SOUNDSET_Alert                                 = 56,
	BIO_SOUNDSET_BuffActivated                         = 57,
	BIO_SOUNDSET_HealingSquad                          = 58,
	BIO_SOUNDSET_HoldingPosition                       = 59,
	BIO_SOUNDSET_Investigate                           = 60,
	BIO_SOUNDSET_LOSestablished                        = 61,
	BIO_SOUNDSET_LOSunavailable                        = 62,
	BIO_SOUNDSET_MoveToFailure                         = 63,
	BIO_SOUNDSET_MoveToSuccess                         = 64,
	BIO_SOUNDSET_UNUSED_ResourcesScarce                = 65,
	BIO_SOUNDSET_UNUSED_ResourcesToLow                 = 66,
	BIO_SOUNDSET_UNUSED_SkillInitiation                = 67,
	BIO_SOUNDSET_UNUSED_SkillUseFailure                = 68,
	BIO_SOUNDSET_UNUSED_SkillUseSuccess                = 69,
	BIO_SOUNDSET_StartMoveToConfirmation               = 70,
	BIO_SOUNDSET_TacticalDeathRecovery                 = 71,
	BIO_SOUNDSET_TechBeaconDeployed                    = 72,
	BIO_SOUNDSET_Jump                                  = 73,
	BIO_SOUNDSET_Land                                  = 74,
	BIO_SOUNDSET_VehicleDamaged                        = 75,
	BIO_SOUNDSET_VehicleShieldsDown                    = 76,
	BIO_SOUNDSET_Allclear                              = 77,
	BIO_SOUNDSET_PlayerRecovery                        = 78,
	BIO_SOUNDSET_ChargeAtPlayer                        = 79,
	BIO_SOUNDSET_MAX                                   = 80
};*/

// Enum SFXGame.BioPawn.EWalkingSpeedMode
/*enum EWalkingSpeedMode
{
	eWalkingSpeedMode_ExploreRun                       = 0,
	eWalkingSpeedMode_ExploreWalk                      = 1,
	eWalkingSpeedMode_ExploreStorming                  = 2,
	eWalkingSpeedMode_ExploreCrouched                  = 3,
	eWalkingSpeedMode_CombatRun                        = 4,
	eWalkingSpeedMode_CombatWalk                       = 5,
	eWalkingSpeedMode_CombatStorming                   = 6,
	eWalkingSpeedMode_CombatCrouched                   = 7,
	eWalkingSpeedMode_CombatZoomed                     = 8,
	eWalkingSpeedMode_CoverMove                        = 9,
	eWalkingSpeedMode_CoverCrouched                    = 10,
	eWalkingSpeedMode_MAX                              = 11
};*/

// Enum SFXGame.BioActorBehavior.EBioActorBehaviorWeaponLOSCache
/*enum EBioActorBehaviorWeaponLOSCache
{
	BIO_WLC_CENTER                                     = 0,
	BIO_WLC_CENTER_CROUCHED                            = 1,
	BIO_WLC_LEAN_LEFT                                  = 2,
	BIO_WLC_LEAN_LEFT_CROUCHED                         = 3,
	BIO_WLC_LEAN_RIGHT                                 = 4,
	BIO_WLC_LEAN_RIGHT_CROUCHED                        = 5,
	BIO_WLC_STEP_LEFT                                  = 6,
	BIO_WLC_STEP_LEFT_CROUCHED                         = 7,
	BIO_WLC_STEP_RIGHT                                 = 8,
	BIO_WLC_STEP_RIGHT_CROUCHED                        = 9,
	BIO_WLC_MAX                                        = 10
};*/

// Enum SFXGame.BioActorBehavior.EBioActionFrameworkErrorCodes
/*enum EBioActionFrameworkErrorCodes
{
	BIO_AFE_NOERROR                                    = 0,
	BIO_AFE_NOLINEOFSIGHT                              = 1,
	BIO_AFE_OUTOFAMMO                                  = 2,
	BIO_AFE_WEAPONOVERHEAT                             = 3,
	BIO_AFE_MAX                                        = 4
};*/

// Enum SFXGame.BioGamePropertyEventSet.EBioGamePropertyEvent
/*enum EBioGamePropertyEvent
{
	GAMEPROP_EVENT_EQUIPMENT_CHANGE                    = 0,
	GAMEPROP_EVENT_XMOD_CHANGE                         = 1,
	GAMEPROP_EVENT_WEAPON_IMPACT                       = 2,
	GAMEPROP_EVENT_VEHICLE_EQUIPMENT_CHANGE            = 3,
	GAMEPROP_EVENT_DEATH                               = 4,
	GAMEPROP_EVENT_WEAPON_FIRED                        = 5,
	GAMEPROP_EVENT_WEAPON_POWER_USED                   = 6,
	GAMEPROP_EVENT_MAX                                 = 7
};*/

// Enum SFXGame.BioAttributesDamage.EBioAttributesDamageFalloff
/*enum EBioAttributesDamageFalloff
{
	BIO_ATTRIBUTES_DAMAGE_FALLOFF_LINEAR               = 0,
	BIO_ATTRIBUTES_DAMAGE_FALLOFF_NONE                 = 1,
	BIO_ATTRIBUTES_DAMAGE_FALLOFF_EXPONENTIAL          = 2,
	BIO_ATTRIBUTES_DAMAGE_FALLOFF_MAX                  = 3
};*/

// Enum SFXGame.BioInventory.EInventoryResourceTypes
/*enum EInventoryResourceTypes
{
	INV_RESOURCE_CREDITS                               = 0,
	INV_RESOURCE_MEDIGEL                               = 1,
	INV_RESOURCE_SALVAGE                               = 2,
	INV_RESOURCE_GRENADES                              = 3,
	INV_RESOURCE_MINOR_CREDITS                         = 4,
	INV_RESOURCE_SMALL_CREDITS                         = 5,
	INV_RESOURCE_MEDIUM_CREDITS                        = 6,
	INV_RESOURCE_LARGE_CREDITS                         = 7,
	INV_RESOURCE_MAJOR_CREDITS                         = 8,
	INV_RESOURCE_MAX                                   = 9
};*/

// Enum SFXGame.BioGamePropertyTimer.EBioGPTimeAction
/*enum EBioGPTimeAction
{
	GP_TA_REMOVE                                       = 0,
	GP_TA_CONTINUE                                     = 1,
	GP_TA_BREAK                                        = 2,
	GP_TA_MAX                                          = 3
};*/

// Enum SFXGame.BioGamePropertyTimer.EBioGPTimingType
/*enum EBioGPTimingType
{
	GP_TIMING_STATIC                                   = 0,
	GP_TIMING_TIMEOUT                                  = 1,
	GP_TIMING_TICK                                     = 2,
	GP_TIMING_COOLDOWN                                 = 3,
	GP_TIMING_MAX                                      = 4
};*/

// Enum SFXGame.BioActorBehavior.EBioStartLeanOriginator
/*enum EBioStartLeanOriginator
{
	BIO_SLO_Attack                                     = 0,
	BIO_SLO_Zoom                                       = 1,
	BIO_SLO_MAX                                        = 2
};*/

// Enum SFXGame.BioEpicPawnBehavior.EActionStateVariable
/*enum EActionStateVariable
{
	BIO_ACTION_STATE_EXPLORE                           = 0,
	BIO_ACTION_STATE_COMBAT                            = 1,
	BIO_ACTION_STATE_MAX                               = 2
};*/

// Enum SFXGame.BioEpicPawnBehavior.EBioCombatStance
/*enum EBioCombatStance
{
	COMBAT_STANCE_NONE                                 = 0,
	COMBAT_STANCE_AGGRESSIVE                           = 1,
	COMBAT_STANCE_DEFENSIVE                            = 2,
	COMBAT_STANCE_COUNT                                = 3,
	COMBAT_STANCE_MAX                                  = 4
};*/

// Enum SFXGame.BioEpicPawnBehavior.EBioAnimNodeCombatModeFadeOut
/*enum EBioAnimNodeCombatModeFadeOut
{
	BIO_ANIM_NODE_COMBAT_MODE_FADEOUT_NONE             = 0,
	BIO_ANIM_NODE_COMBAT_MODE_FADEOUT_ANIMATING_ENTER  = 1,
	BIO_ANIM_NODE_COMBAT_MODE_FADEOUT_ENTER            = 2,
	BIO_ANIM_NODE_COMBAT_MODE_FADEOUT_ANIMATING_EXIT   = 3,
	BIO_ANIM_NODE_COMBAT_MODE_FADEOUT_EXIT             = 4,
	BIO_ANIM_NODE_COMBAT_MODE_FADEOUT_MAX              = 5
};*/

// Enum SFXGame.BioEpicPawnBehavior.EBioEpicPawnBehaviorWeaponFireMode
/*enum EBioEpicPawnBehaviorWeaponFireMode
{
	BIO_EPIC_PAWN_BEHAVIOR_WEAPON_FIRE_MODE_NORMAL     = 0,
	BIO_EPIC_PAWN_BEHAVIOR_WEAPON_FIRE_MODE_ALWAYS_HIT = 1,
	BIO_EPIC_PAWN_BEHAVIOR_WEAPON_FIRE_MODE_ALWAYS_MISS = 2,
	BIO_EPIC_PAWN_BEHAVIOR_WEAPON_FIRE_MODE_MAX        = 3
};*/

// Enum SFXGame.BioSquadAPI.EPathNodeAction
/*enum EPathNodeAction
{
	PNA_Blank                                          = 0,
	PNA_Run                                            = 1,
	PNA_Mounted                                        = 2,
	PNA_Fell                                           = 3,
	PNA_Ladder                                         = 4,
	PNA_Elevator                                       = 5,
	PNA_Door                                           = 6,
	PNA_Teleport                                       = 7,
	PNA_MAX                                            = 8
};*/

// Enum SFXGame.BioBaseSquad.eATTACK_TYPE
/*enum eATTACK_TYPE
{
	AI_ATTACK_TYPE_NONE                                = 0,
	AI_ATTACK_TYPE_SNIPER                              = 1,
	AI_ATTACK_TYPE_ACCURATE                            = 2,
	AI_ATTACK_TYPE_INACCURATE                          = 3,
	AI_ATTACK_TYPE_SUPPRESSING                         = 4,
	AI_ATTACK_TYPE_POWER                               = 5,
	AI_ATTACK_TYPE_MELEE                               = 6,
	AI_ATTACK_TYPE_MAX                                 = 7
};*/

// Enum SFXGame.BioBaseSquad.ESquadRotation
/*enum ESquadRotation
{
	SquadRotation_Next                                 = 0,
	SquadRotation_Prev                                 = 1,
	SquadRotation_MAX                                  = 2
};*/

// Enum SFXGame.BioBaseSquad.ESwitchToWeapon
/*enum ESwitchToWeapon
{
	STW_Pistol                                         = 0,
	STW_ShotGun                                        = 1,
	STW_AssaultRifle                                   = 2,
	STW_SniperRifle                                    = 3,
	STW_None                                           = 4,
	STW_MAX                                            = 5
};*/

// Enum SFXGame.BioBaseSquad.eSTAT_Following
/*enum eSTAT_Following
{
	STAT_Following_Off                                 = 0,
	STAT_Following_Collect                             = 1,
	STAT_Following_Report                              = 2,
	STAT_Following_MAX                                 = 3
};*/

// Enum SFXGame.BioBaseSquad.EBioTacticalAction
/*enum EBioTacticalAction
{
	BIO_TACACT_NONE                                    = 0,
	BIO_TACACT_SHOOT                                   = 1,
	BIO_TACACT_GRENADE                                 = 2,
	BIO_TACACT_POWER                                   = 3,
	BIO_TACACT_EQUIP                                   = 4,
	BIO_TACACT_MAX                                     = 5
};*/

// Enum SFXGame.BioBaseSquad.EBioTechniqueWeapon
/*enum EBioTechniqueWeapon
{
	BioWepTech_Pistol                                  = 0,
	BioWepTech_Blaster                                 = 1,
	BioWepTech_Assault                                 = 2,
	BioWepTech_Sniper                                  = 3,
	BioWepTech_Grenade                                 = 4,
	BioWepTech_Melee                                   = 5,
	BioWepTech_MAX                                     = 6
};*/

// Enum SFXGame.BioBaseSquad.EFollowFormation
/*enum EFollowFormation
{
	BIO_FOLLOWFORMATION_INVALID                        = 0,
	BIO_FOLLOWFORMATION_FOLLOW                         = 1,
	BIO_FOLLOWFORMATION_HOLD                           = 2,
	BIO_FOLLOWFORMATION_MAX                            = 3
};*/

// Enum SFXGame.BioBaseSquad.EOrientationType
/*enum EOrientationType
{
	OrientType_UseLeaders                              = 0,
	OrientType_UseFormations                           = 1,
	OrientType_MAX                                     = 2
};*/

// Enum SFXGame.BioBaseSquad.ePawnValidType
/*enum ePawnValidType
{
	PVT_Invalid                                        = 0,
	PVT_ValidPawn                                      = 1,
	PVT_ValidCar                                       = 2,
	PVT_MAX                                            = 3
};*/

// Enum SFXGame.BioBaseSquad.EBioHoldPositionMode
/*enum EBioHoldPositionMode
{
	BIO_HOLD_Following                                 = 0,
	BIO_HOLD_Holding                                   = 1,
	BIO_HOLD_MAX                                       = 2
};*/

// Enum SFXGame.BioBaseSquad.EBioCapMode
/*enum EBioCapMode
{
	BIO_CAPMODE_WEAPON                                 = 0,
	BIO_CAPMODE_BIOTICS                                = 1,
	BIO_CAPMODE_TECH                                   = 2,
	BIO_CAPMODE_COMBAT                                 = 3,
	BIO_CAPMODE_GRENADES                               = 4,
	BIO_CAPMODE_ERROR                                  = 5,
	BIO_CAPMODE_MAX                                    = 6
};*/

// Enum SFXGame.BioBaseSquad.EBioCapabilityTypes
/*enum EBioCapabilityTypes
{
	BioCaps_AllTypes                                   = 0,
	BioCaps_SingleTargetAttack                         = 1,
	BioCaps_AreaAttack                                 = 2,
	BioCaps_Disable                                    = 3,
	BioCaps_Debuff                                     = 4,
	BioCaps_Defense                                    = 5,
	BioCaps_Heal                                       = 6,
	BioCaps_Buff                                       = 7,
	BioCaps_Suicide                                    = 8,
	BioCaps_Death                                      = 9,
	BioCaps_ERROR                                      = 10,
	BioCaps_MAX                                        = 11
};*/

// Enum SFXGame.BioBaseSquad.ESquadIcons
/*enum ESquadIcons
{
	BIO_SQUADICON_INVALID                              = 0,
	BIO_SQUADICON_HOLD                                 = 1,
	BIO_SQUADICON_MOVETO                               = 2,
	BIO_SQUADICON_FOLLOW                               = 3,
	BIO_SQUADICON_DEAD                                 = 4,
	BIO_SQUADICON_INCOVER                              = 5,
	BIO_SQUADICON_MAX                                  = 6
};*/

// Enum SFXGame.BioAiController.eWeaponSystemAction
/*enum eWeaponSystemAction
{
	WSA_Off                                            = 0,
	WSA_WeaponFire                                     = 1,
	WSA_ThrowGrenade                                   = 2,
	WSA_SelectWeapon                                   = 3,
	WSA_MAX                                            = 4
};*/

// Enum SFXGame.BioAiController.eActionType
/*enum eActionType
{
	AT_Action                                          = 0,
	AT_State                                           = 1,
	AT_Behavior                                        = 2,
	AT_MAX                                             = 3
};*/

// Enum SFXGame.BioAiController.eLastSawTarget
/*enum eLastSawTarget
{
	LST_Eyes                                           = 0,
	LST_Weapon                                         = 1,
	LST_WeaponCrouch                                   = 2,
	LST_LeanLeft                                       = 3,
	LST_LeanRight                                      = 4,
	LST_StepLeft                                       = 5,
	LST_StepRight                                      = 6,
	LST_MAX                                            = 7
};*/

// Enum SFXGame.BioAiController.eWalkWaypointsTypes
/*enum eWalkWaypointsTypes
{
	WWT_Linear                                         = 0,
	WWT_Looping                                        = 1,
	WWT_OutAndBack                                     = 2,
	WWT_OutAndBackLooping                              = 3,
	WWT_Random                                         = 4,
	WWT_MAX                                            = 5
};*/

// Enum SFXGame.BioPawnBehavior.EBioAnimStartState
/*enum EBioAnimStartState
{
	eBioAnimStart_NoState                              = 0,
	eBioAnimStart_StartingMove                         = 1,
	eBioAnimStart_FinishStartMove                      = 2,
	eBioAnimStart_DoneStartMove                        = 3,
	eBioAnimStart_RotationUnlocked                     = 4,
	eBioAnimStart_PlayingMove                          = 5,
	eBioAnimStart_MAX                                  = 6
};*/

// Enum SFXGame.BioPawnBehavior.EBioAnimCombatState
/*enum EBioAnimCombatState
{
	eBioAnimCombat_NoState                             = 0,
	eBioAnimCombat_FireAuto                            = 1,
	eBioAnimCombat_FireAutoStop                        = 2,
	eBioAnimCombat_FireManual                          = 3,
	eBioAnimCombat_ThrowGrenade                        = 4,
	eBioAnimCombat_DoneFireManual                      = 5,
	eBioAnimCombat_MAX                                 = 6
};*/

// Enum SFXGame.BioPawnBehavior.EBioAnimSkidTurnState
/*enum EBioAnimSkidTurnState
{
	eBioAnimSkid_NoState                               = 0,
	eBioAnimSkid_StartingLeft                          = 1,
	eBioAnimSkid_StartingRight                         = 2,
	eBioAnimSkid_TurningLeft                           = 3,
	eBioAnimSkid_TurningRight                          = 4,
	eBioAnimSkid_FinishingLeft                         = 5,
	eBioAnimSkid_FinishingRight                        = 6,
	eBioAnimSkid_MAX                                   = 7
};*/

// Enum SFXGame.BioPawnBehavior.EBioAnimStopState
/*enum EBioAnimStopState
{
	eBioAnimStop_NoState                               = 0,
	eBioAnimStop_StopLeftMove                          = 1,
	eBioAnimStop_StopRightMove                         = 2,
	eBioAnimStop_FinishLeftMove                        = 3,
	eBioAnimStop_FinishRightMove                       = 4,
	eBioAnimStop_InterruptLeftMove                     = 5,
	eBioAnimStop_InterruptRightMove                    = 6,
	eBioAnimStop_DoneFinishLeftMove                    = 7,
	eBioAnimStop_DoneFinishRightMove                   = 8,
	eBioAnimStop_DoneIntLeftMove                       = 9,
	eBioAnimStop_DoneIntRightMove                      = 10,
	eBioAnimStop_MAX                                   = 11
};*/

// Enum SFXGame.BioPawnBehavior.EBioAnimTurnDirState
/*enum EBioAnimTurnDirState
{
	eBioAnimTurn_NoTurn                                = 0,
	eBioAnimTurn_ReqStartLeft                          = 1,
	eBioAnimTurn_ReqStartRight                         = 2,
	eBioAnimTurn_AckStartLeft                          = 3,
	eBioAnimTurn_AckStartRight                         = 4,
	eBioAnimTurn_ProcessLeft                           = 5,
	eBioAnimTurn_ProcessRight                          = 6,
	eBioAnimTurn_MAX                                   = 7
};*/

// Enum SFXGame.BioPawnBehavior.EBioAnimGetUpState
/*enum EBioAnimGetUpState
{
	eBioAnimGetUp_Idle                                 = 0,
	eBioAnimGetUp_Start                                = 1,
	eBioAnimGetUp_Processing                           = 2,
	eBioAnimGetUp_MAX                                  = 3
};*/

// Enum SFXGame.BioPawnBehavior.EPawnLootGUIMechanism
/*enum EPawnLootGUIMechanism
{
	eBioLootGUINever                                   = 0,
	eBioLootGUIPerPawn                                 = 1,
	eBioLootGUISquadThreshold                          = 2,
	EPawnLootGUIMechanism_MAX                          = 3
};*/

// Enum SFXGame.BioAttributesPawn.EBioAttributePawnGender
/*enum EBioAttributePawnGender
{
	BIO_ATTRIBUTE_PAWN_GENDER_MALE                     = 0,
	BIO_ATTRIBUTE_PAWN_GENDER_FEMALE                   = 1,
	BIO_ATTRIBUTE_PAWN_GENDER_NONE                     = 2,
	BIO_ATTRIBUTE_PAWN_GENDER_MAX                      = 3
};*/

// Enum SFXGame.BioAttributesPawn.EBioAttributePawnRace
/*enum EBioAttributePawnRace
{
	BIO_ATTRIBUTE_PAWN_RACE_HUMAN                      = 0,
	BIO_ATTRIBUTE_PAWN_RACE_ASARI                      = 1,
	BIO_ATTRIBUTE_PAWN_RACE_TURIAN                     = 2,
	BIO_ATTRIBUTE_PAWN_RACE_SALARIAN                   = 3,
	BIO_ATTRIBUTE_PAWN_RACE_QUARIAN                    = 4,
	BIO_ATTRIBUTE_PAWN_RACE_OTHER                      = 5,
	BIO_ATTRIBUTE_PAWN_RACE_KROGAN                     = 6,
	BIO_ATTRIBUTE_PAWN_RACE_GETH                       = 7,
	BIO_ATTRIBUTE_PAWN_RACE_OTHER_ARTIFICIAL           = 8,
	BIO_ATTRIBUTE_PAWN_RACE_MAX                        = 9
};*/

// Enum SFXGame.BioAttributesPawnParty.EBioPartyMemberAbility
/*enum EBioPartyMemberAbility
{
	ABILITY_STAMINA                                    = 0,
	ABILITY_FOCUS                                      = 1,
	ABILITY_COORDINATION                               = 2,
	ABILITY_PRECISION                                  = 3,
	ABILITY_MAX                                        = 4
};*/

// Enum SFXGame.BioAttributesPawnParty.EBioPartyMemberClassSpecialization
/*enum EBioPartyMemberClassSpecialization
{
	BIO_PARTY_MEMBER_CLASS_SPECIALIZATION_NONE_DEPRECATED = 0,
	BIO_PARTY_MEMBER_CLASS_SPECIALIZATION_MARINE_DEPRECATED = 1,
	BIO_PARTY_MEMBER_CLASS_SPECIALIZATION_RANGER_DEPRECATED = 2,
	BIO_PARTY_MEMBER_CLASS_SPECIALIZATION_INFILTRATOR_DEPRECATED = 3,
	BIO_PARTY_MEMBER_CLASS_SPECIALIZATION_MEDIC_DEPRECATED = 4,
	BIO_PARTY_MEMBER_CLASS_SPECIALIZATION_REAVER_DEPRECATED = 5,
	BIO_PARTY_MEMBER_CLASS_SPECIALIZATION_BASTION_DEPRECATED = 6,
	BIO_PARTY_MEMBER_CLASS_SPECIALIZATION_MAX_DEPRECATED = 7,
	BIO_PARTY_MEMBER_CLASS_SPECIALIZATION_MAX          = 8
};*/

// Enum SFXGame.BioAttributesPawnParty.EBioPartyMemberClassBase
/*enum EBioPartyMemberClassBase
{
	BIO_PARTY_MEMBER_CLASS_BASE_SOLDIER                = 0,
	BIO_PARTY_MEMBER_CLASS_BASE_ENGINEER               = 1,
	BIO_PARTY_MEMBER_CLASS_BASE_ADEPT                  = 2,
	BIO_PARTY_MEMBER_CLASS_BASE_INFILTRATOR            = 3,
	BIO_PARTY_MEMBER_CLASS_BASE_SAVANT                 = 4,
	BIO_PARTY_MEMBER_CLASS_BASE_REAVER                 = 5,
	BIO_PARTY_MEMBER_CLASS_BASE_ASARI_SCIENTIST        = 6,
	BIO_PARTY_MEMBER_CLASS_BASE_KROGAN_OLD_ONE         = 7,
	BIO_PARTY_MEMBER_CLASS_BASE_TURIAN_SPECTRE         = 8,
	BIO_PARTY_MEMBER_CLASS_BASE_QUARIAN_TINKER         = 9,
	BIO_PARTY_MEMBER_CLASS_BASE_SUPERSOLDIER           = 10,
	BIO_PARTY_MEMBER_CLASS_BASE_WOMAN_VETERAN          = 11,
	BIO_PARTY_MEMBER_CLASS_BASE_MAN_THINKER            = 12,
	BIO_PARTY_MEMBER_CLASS_BASE_MAX                    = 13
};*/

// Enum SFXGame.BioAttributesPawnPlayer.EBioPlayerCharacterBackgroundOrigin
/*enum EBioPlayerCharacterBackgroundOrigin
{
	BIO_PLAYER_CHARACTER_BACKGROUND_ORIGIN_NONE        = 0,
	BIO_PLAYER_CHARACTER_BACKGROUND_ORIGIN_SPACER      = 1,
	BIO_PLAYER_CHARACTER_BACKGROUND_ORIGIN_COLONY      = 2,
	BIO_PLAYER_CHARACTER_BACKGROUND_ORIGIN_EARTHBORN   = 3,
	BIO_PLAYER_CHARACTER_BACKGROUND_ORIGIN_MAX         = 4
};*/

// Enum SFXGame.BioAttributesPawnPlayer.EBioPlayerCharacterSpectreRank
/*enum EBioPlayerCharacterSpectreRank
{
	BIO_PLAYER_CHARACTER_SPECTRE_RANK_NONE             = 0,
	BIO_PLAYER_CHARACTER_SPECTRE_RANK_OPERATIVE        = 1,
	BIO_PLAYER_CHARACTER_SPECTRE_RANK_MAX              = 2
};*/

// Enum SFXGame.BioAttributesPawnPlayer.EBioPlayerCharacterBackgroundNotoriety
/*enum EBioPlayerCharacterBackgroundNotoriety
{
	BIO_PLAYER_CHARACTER_BACKGROUND_NOTORIETY_NONE     = 0,
	BIO_PLAYER_CHARACTER_BACKGROUND_NOTORIETY_SURVIVOR = 1,
	BIO_PLAYER_CHARACTER_BACKGROUND_NOTORIETY_WARHERO  = 2,
	BIO_PLAYER_CHARACTER_BACKGROUND_NOTORIETY_RUTHLESS = 3,
	BIO_PLAYER_CHARACTER_BACKGROUND_NOTORIETY_MAX      = 4
};*/

// Enum SFXGame.BioPawnType.EBioPawnSound
/*enum EBioPawnSound
{
	PAWN_SOUND_ENTER_BIOTIC_MODE                       = 0,
	PAWN_SOUND_USE_BIOTIC                              = 1,
	PAWN_SOUND_EXIT_BIOTIC_MODE                        = 2,
	PAWN_SOUND_COUNT                                   = 3,
	PAWN_SOUND_MAX                                     = 4
};*/

// Enum SFXGame.BioPawnType.EBioPawnParticleSystem
/*enum EBioPawnParticleSystem
{
	PAWN_PARTICLE_SYSTEM_BIOTIC_CHARGE                 = 0,
	PAWN_PARTICLE_SYSTEM_BIOTIC_RELEASE                = 1,
	PAWN_PARTICLE_SYSTEM_TELEKINESIS_BLAST             = 2,
	PAWN_PARTICLE_SYSTEM_TELEKINESIS_THROW             = 3,
	PAWN_PARTICLE_SYSTEM_BIOTIC_TARGETING              = 4,
	PAWN_PARTICLE_SYSTEM_COUNT                         = 5,
	PAWN_PARTICLE_SYSTEM_MAX                           = 6
};*/

// Enum SFXGame.BioPawnBehavior.EBioPlaySoundMode
/*enum EBioPlaySoundMode
{
	PLAY_SOUND_MODE_LOCAL                              = 0,
	PLAY_SOUND_MODE_GLOBAL                             = 1,
	PLAY_SOUND_MODE_MAX                                = 2
};*/

// Enum SFXGame.BioVFXTemplate.EBioVFXCost
/*enum EBioVFXCost
{
	EBioVFXCost                                        = 0,
	EBioVFXCost01                                      = 1,
	EBioVFXCost02                                      = 2,
	EBioVFXCost03                                      = 3,
	EBioVFXCost04                                      = 4,
	EBioVFXCost_MAX                                    = 5
};*/

// Enum SFXGame.BioEquipment.EBioEquipmentSlot
/*enum EBioEquipmentSlot
{
	EQUIPMENT_SLOT_HEAD_GEAR_DEPRECATED                = 0,
	EQUIPMENT_SLOT_ARMOR                               = 1,
	EQUIPMENT_SLOT_GRENADE                             = 2,
	EQUIPMENT_SLOT_OMNITOOL                            = 3,
	EQUIPMENT_SLOT_BIOAMP                              = 4,
	EQUIPMENT_SLOT_MAX                                 = 5
};*/

// Enum SFXGame.BioActiveGrenade.EBioGrenadeActiveAnimationPlaybackState
/*enum EBioGrenadeActiveAnimationPlaybackState
{
	BIO_GRENADE_ACTIVE_ANIMATION_PLAYBACK_IDLE         = 0,
	BIO_GRENADE_ACTIVE_ANIMATION_PLAYBACK_PENDING      = 1,
	BIO_GRENADE_ACTIVE_ANIMATION_PLAYBACK_STARTING     = 2,
	BIO_GRENADE_ACTIVE_ANIMATION_PLAYBACK_STARTED      = 3,
	BIO_GRENADE_ACTIVE_ANIMATION_PLAYBACK_MAX          = 4
};*/

// Enum SFXGame.BioActivePower.EBioPowerState
/*enum EBioPowerState
{
	BIO_POWER_NOT_STARTED                              = 0,
	BIO_POWER_CASTING                                  = 1,
	BIO_POWER_RELEASE                                  = 2,
	BIO_POWER_USING                                    = 3,
	BIO_POWER_FINISHED                                 = 4,
	BIO_POWER_MAX                                      = 5
};*/

// Enum SFXGame.BioPower.EPowerIcons
/*enum EPowerIcons
{
	BIO_POWERICON_INVALID                              = 0,
	BIO_POWERICON_EMPTYSLOT                            = 1,
	BIO_POWERICON_SHOTGUN                              = 2,
	BIO_POWERICON_ASSAULTRIFLE                         = 3,
	BIO_POWERICON_PISTOL                               = 4,
	BIO_POWERICON_SNIPERRIFLE                          = 5,
	BIO_POWERICON_AIHACKING                            = 6,
	BIO_POWERICON_DAMPINGFIELD                         = 7,
	BIO_POWERICON_EMPBURST                             = 8,
	BIO_POWERICON_HEAL                                 = 9,
	BIO_POWERICON_NEURALSHOCK                          = 10,
	BIO_POWERICON_SABOTAGE                             = 11,
	BIO_POWERICON_SHIELDBOOST                          = 12,
	BIO_POWERICON_TAUNT                                = 13,
	BIO_POWERICON_ADRENALINEBURST                      = 14,
	BIO_POWERICON_GRENADE                              = 15,
	BIO_POWERICON_CARNAGE                              = 16,
	BIO_POWERICON_CRITICAL                             = 17,
	BIO_POWERICON_IMMUNITY                             = 18,
	BIO_POWERICON_MARKSMAN                             = 19,
	BIO_POWERICON_SUPPRESSION                          = 20,
	BIO_POWERICON_INSPIRATION                          = 21,
	BIO_POWERICON_BARRIER                              = 22,
	BIO_POWERICON_LIFT                                 = 23,
	BIO_POWERICON_STASIS                               = 24,
	BIO_POWERICON_THROW                                = 25,
	BIO_POWERICON_WARP                                 = 26,
	BIO_POWERICON_SINGULARITY                          = 27,
	BIO_POWERICON_LOCKED                               = 28,
	BIO_POWERICON_UNLOCKED                             = 29,
	BIO_POWERICON_MINIGUN                              = 30,
	BIO_POWERICON_CANNON                               = 31,
	BIO_POWERICON_THRUSTERS                            = 32,
	BIO_POWERICON_UNASSIGNED33                         = 33,
	BIO_POWERICON_GRENADEDETONATOR                     = 34,
	BIO_POWERICON_MAX                                  = 35
};*/

// Enum SFXGame.BioPower.EBioPowerResource
/*enum EBioPowerResource
{
	BIO_POWER_RESOURCE_VFX_PLAYER_CRUST                = 0,
	BIO_POWER_RESOURCE_VFX_PLAYER_MATERIAL             = 1,
	BIO_POWER_RESOURCE_VFX_TARGET_CRUST                = 2,
	BIO_POWER_RESOURCE_VFX_TARGET_MATERIAL             = 3,
	BIO_POWER_RESOURCE_VFX_FRAMEBUFFER                 = 4,
	BIO_POWER_RESOURCE_VFX_TRAVELLING                  = 5,
	BIO_POWER_RESOURCE_VFX_IMPACT                      = 6,
	BIO_POWER_RESOURCE_VFX_WORLD_IMPACT                = 7,
	BIO_POWER_RESOURCE_VFX_USING                       = 8,
	BIO_POWER_RESOURCE_VFX_RELEASE                     = 9,
	BIO_POWER_RESOURCE_VFX_DEATH_DEPRECATED            = 10,
	BIO_POWER_RESOURCE_CASTING                         = 11,
	BIO_POWER_RESOURCE_RELEASE                         = 12,
	BIO_POWER_RESOURCE_USING                           = 13,
	BIO_POWER_RESOURCE_VFX_CASTING_BEAM                = 14,
	BIO_POWER_RESOURCE_MAX                             = 15
};*/

// Enum SFXGame.BioPower.EBioPowerType
/*enum EBioPowerType
{
	BIO_POWER_TYPE_UNKNOWN                             = 0,
	BIO_POWER_TYPE_CYLINDER                            = 1,
	BIO_POWER_TYPE_TARGET                              = 2,
	BIO_POWER_TYPE_PARTY                               = 3,
	BIO_POWER_TYPE_IMPACT_VOLUME                       = 4,
	BIO_POWER_TYPE_ACTIVATION                          = 5,
	BIO_POWER_TYPE_MELEE                               = 6,
	BIO_POWER_TYPE_MAX                                 = 7
};*/

// Enum SFXGame.BioPower.EBioPowerImpactShape
/*enum EBioPowerImpactShape
{
	BIO_POWER_IMPACT_NONE                              = 0,
	BIO_POWER_IMPACT_CONE                              = 1,
	BIO_POWER_IMPACT_VERTICAL_CYLINDER                 = 2,
	BIO_POWER_IMPACT_MAX                               = 3
};*/

// Enum SFXGame.BioPower.EBioPowerLocation
/*enum EBioPowerLocation
{
	BIO_POWER_LOCATION_UNKNOWN                         = 0,
	BIO_POWER_LOCATION_CASTER                          = 1,
	BIO_POWER_LOCATION_TARGET                          = 2,
	BIO_POWER_LOCATION_MAX                             = 3
};*/

// Enum SFXGame.BioPower.EBioPowerDualType
/*enum EBioPowerDualType
{
	BIO_POWER_DUAL_TYPE_INVALID                        = 0,
	BIO_POWER_DUAL_TYPE_DELIVERY                       = 1,
	BIO_POWER_DUAL_TYPE_ACTIVATION                     = 2,
	BIO_POWER_DUAL_TYPE_MAX                            = 3
};*/

// Enum SFXGame.BioPower.EBioPowerAimType
/*enum EBioPowerAimType
{
	BIO_POWER_AIM_CAMERA_TRACE                         = 0,
	BIO_POWER_AIM_SELECTED_TARGET                      = 1,
	BIO_POWER_AIM_SELECTED_TARGET_AT_CASTING           = 2,
	BIO_POWER_AIM_MAX                                  = 3
};*/

// Enum SFXGame.BioPower.EBioPowerHUDType
/*enum EBioPowerHUDType
{
	BIO_POWER_HUD_TYPE_STANDARD                        = 0,
	BIO_POWER_HUD_TYPE_WEAPON                          = 1,
	BIO_POWER_HUD_TYPE_HEALING_PRIMARY                 = 2,
	BIO_POWER_HUD_TYPE_HEALING_SECONDARY               = 3,
	BIO_POWER_HUD_TYPE_ARMOR_EMITTER                   = 4,
	BIO_POWER_HUD_TYPE_NOT_MAPPABLE                    = 5,
	BIO_POWER_HUD_TYPE_MAX                             = 6
};*/

// Enum SFXGame.BioActiveSelectWeapon.EBioActiveSelectWeaponState
/*enum EBioActiveSelectWeaponState
{
	BIO_ACTIVE_SELECT_WEAPON_STATE_NONE                = 0,
	BIO_ACTIVE_SELECT_WEAPON_STATE_WAIT                = 1,
	BIO_ACTIVE_SELECT_WEAPON_STATE_DRAW                = 2,
	BIO_ACTIVE_SELECT_WEAPON_STATE_HOLSTER             = 3,
	BIO_ACTIVE_SELECT_WEAPON_STATE_SWITCH              = 4,
	BIO_ACTIVE_SELECT_WEAPON_STATE_FADE_OUT            = 5,
	BIO_ACTIVE_SELECT_WEAPON_STATE_FINISHING           = 6,
	BIO_ACTIVE_SELECT_WEAPON_STATE_FINISHED            = 7,
	BIO_ACTIVE_SELECT_WEAPON_STATE_MAX                 = 8
};*/

// Enum SFXGame.BioPawnChallengeScaledType.EBioPawnChallengeRank
/*enum EBioPawnChallengeRank
{
	BIOPAWNCHALLENGERANK_MINION                        = 0,
	BIOPAWNCHALLENGERANK_ELITE                         = 1,
	BIOPAWNCHALLENGERANK_SUB_BOSS                      = 2,
	BIOPAWNCHALLENGERANK_BOSS                          = 3,
	BIOPAWNCHALLENGERANK_MAX                           = 4
};*/

// Enum SFXGame.BioAnimNodeBlendBase.EBioAnimBlendDirection
/*enum EBioAnimBlendDirection
{
	eBioAnimBlend_NOBLEND                              = 0,
	eBioAnimBlend_BLENDUP                              = 1,
	eBioAnimBlend_BLENDDOWN                            = 2,
	eBioAnimBlend_BLENDDIRECT                          = 3,
	eBioAnimBlend_MAX                                  = 4
};*/

// Enum SFXGame.BioAnimNodeBlendAdditive.EBioAnimAdditive
/*enum EBioAnimAdditive
{
	eBioAnimAdd_Primary                                = 0,
	eBioAnimAdd_Additive                               = 1,
	eBioAnimAdd_BasePose                               = 2,
	eBioAnimAdd_MAX                                    = 3
};*/

// Enum SFXGame.BioAnimNodeBlendAdditivePower.EBioPowerAdditiveAnimNode
/*enum EBioPowerAdditiveAnimNode
{
	POWER_ADDITIVE_PRIMARY                             = 0,
	POWER_ADDITIVE_ADD_POWER                           = 1,
	POWER_ADDITIVE_BASE_POSE                           = 2,
	POWER_ADDITIVE_MAX                                 = 3
};*/

// Enum SFXGame.BioAnimNodeBlendByAction.EBioActionAnimNode
/*enum EBioActionAnimNode
{
	ACTION_ANIM_NODE_POSTURE                           = 0,
	ACTION_ANIM_NODE_MOUNT                             = 1,
	ACTION_ANIM_NODE_HESITATE                          = 2,
	ACTION_ANIM_NODE_FALL                              = 3,
	ACTION_ANIM_NODE_BIOTIC                            = 4,
	ACTION_ANIM_NODE_DEATH                             = 5,
	ACTION_ANIM_NODE_DIE                               = 6,
	ACTION_ANIM_NODE_TECH                              = 7,
	ACTION_ANIM_NODE_MATINEE                           = 8,
	ACTION_ANIM_NODE_GETUP                             = 9,
	ACTION_ANIM_NODE_GESTURES                          = 10,
	ACTION_ANIM_NODE_MAX                               = 11
};*/

// Enum SFXGame.BioAnimNodeBlendByAim.eAimSliderAxis
/*enum eAimSliderAxis
{
	SLIDER_AXIS_PITCH                                  = 0,
	SLIDER_AXIS_YAW                                    = 1,
	SLIDER_AXIS_MAX                                    = 2
};*/

// Enum SFXGame.BioAnimNodeBlendByBiotic.EBioBioticAnimNode
/*enum EBioBioticAnimNode
{
	BIOTIC_ANIM_NODE_IDLE                              = 0,
	BIOTIC_ANIM_NODE_CASTING                           = 1,
	BIOTIC_ANIM_NODE_LAUNCH                            = 2,
	BIOTIC_ANIM_NODE_COUNT                             = 3,
	BIOTIC_ANIM_NODE_MAX                               = 4
};*/

// Enum SFXGame.BioAnimNodeBlendByDamage.EBioAnimDamage
/*enum EBioAnimDamage
{
	eBioAnimDamage_Front                               = 0,
	eBioAnimDamage_Rear                                = 1,
	eBioAnimDamage_Left                                = 2,
	eBioAnimDamage_Right                               = 3,
	eBioAnimDamage_MAX                                 = 4
};*/

// Enum SFXGame.BioAnimNodeBlendByDeath.EBioAnimDeath
/*enum EBioAnimDeath
{
	eBioAnimDeath_Head                                 = 0,
	eBioAnimDeath_Stomach                              = 1,
	eBioAnimDeath_ArmLeft                              = 2,
	eBioAnimDeath_ArmRight                             = 3,
	eBioAnimDeath_LegLeft                              = 4,
	eBioAnimDeath_LegRight                             = 5,
	eBioAnimDeath_MAX                                  = 6
};*/

// Enum SFXGame.BioAnimNodeBlendByFireSequence.EBioAnimNodeBlendByFireSequenceChild
/*enum EBioAnimNodeBlendByFireSequenceChild
{
	BIO_ANIM_NODE_BLEND_BY_FIRE_SEQUENCE_CHILD_IDLE    = 0,
	BIO_ANIM_NODE_BLEND_BY_FIRE_SEQUENCE_CHILD_START   = 1,
	BIO_ANIM_NODE_BLEND_BY_FIRE_SEQUENCE_CHILD_LOOP    = 2,
	BIO_ANIM_NODE_BLEND_BY_FIRE_SEQUENCE_CHILD         = 3,
	BIO_ANIM_NODE_BLEND_BY_FIRE_SEQUENCE_CHILD_END     = 4,
	BIO_ANIM_NODE_BLEND_BY_FIRE_SEQUENCE_MAX           = 5
};*/

// Enum SFXGame.BioAnimNodeBlendByIncline.EBioAnimIncline
/*enum EBioAnimIncline
{
	eBioAnimIncline_Up                                 = 0,
	eBioAnimIncline_Level                              = 1,
	eBioAnimIncline_Down                               = 2,
	eBioAnimIncline_MAX                                = 3
};*/

// Enum SFXGame.BioAnimNodeBlendByMount.EBioAnimMountHeight
/*enum EBioAnimMountHeight
{
	eBioAnimMountHeight_HighUpper                      = 0,
	eBioAnimMountHeight_HighLower                      = 1,
	eBioAnimMountHeight_LowUpper                       = 2,
	eBioAnimMountHeight_LowLower                       = 3,
	eBioAnimMountHeight_MAX                            = 4
};*/

// Enum SFXGame.BioAnimNodeBlendByPower.EBioPowerAnimNode
/*enum EBioPowerAnimNode
{
	POWER_ANIM_NODE_IDLE                               = 0,
	POWER_ANIM_NODE_CASTING                            = 1,
	POWER_ANIM_NODE_RELEASE                            = 2,
	POWER_ANIM_NODE_USING                              = 3,
	POWER_ANIM_NODE_COUNT                              = 4,
	POWER_ANIM_NODE_MAX                                = 5
};*/

// Enum SFXGame.BioAnimNodeBlendByWeaponAction.EBioWeaponActionAnimNode
/*enum EBioWeaponActionAnimNode
{
	WEAPON_ACTION_ANIM_NODE_EXPANDED                   = 0,
	WEAPON_ACTION_ANIM_NODE_EXPANDING                  = 1,
	WEAPON_ACTION_ANIM_NODE_COLLAPSING                 = 2,
	WEAPON_ACTION_ANIM_NODE_COLLAPSED                  = 3,
	WEAPON_ACTION_ANIM_NODE_MAX                        = 4
};*/

// Enum SFXGame.BioAnimNodeBlendCombatAction.EBioAnimNodeBlendCombatAction
/*enum EBioAnimNodeBlendCombatAction
{
	BIO_ANIM_NODE_BLEND_COMBAT_ACTION_FIRE_WEAPON      = 0,
	BIO_ANIM_NODE_BLEND_COMBAT_ACTION_DEPRECATED       = 1,
	BIO_ANIM_NODE_BLEND_COMBAT_ACTION_DEPRECATED01     = 2,
	BIO_ANIM_NODE_BLEND_COMBAT_ACTION_DEPRECATED02     = 3,
	BIO_ANIM_NODE_BLEND_COMBAT_ACTION_THROW_GRENADE    = 4,
	BIO_ANIM_NODE_BLEND_COMBAT_ACTION_MAX              = 5
};*/

// Enum SFXGame.BioAnimNodeBlendCombatAction.EBioAnimNodeBlendCombatActionThrowGrenade
/*enum EBioAnimNodeBlendCombatActionThrowGrenade
{
	BIO_ANIM_NODE_BLEND_COMBAT_ACTION_THROW_GRENADE_FRISBEE = 0,
	BIO_ANIM_NODE_BLEND_COMBAT_ACTION_THROW_GRENADE_BALLISTIC = 1,
	BIO_ANIM_NODE_BLEND_COMBAT_ACTION_THROW_GRENADE_MAX = 2
};*/

// Enum SFXGame.BioAnimNodeBlendDirectional.EBioAnimNodeBlendDirectional
/*enum EBioAnimNodeBlendDirectional
{
	eBioAnimNodeBlendDirectional_Forward               = 0,
	eBioAnimNodeBlendDirectional_Backward              = 1,
	eBioAnimNodeBlendDirectional_FwdLeft               = 2,
	eBioAnimNodeBlendDirectional_FwdRight              = 3,
	eBioAnimNodeBlendDirectional_BckLeft               = 4,
	eBioAnimNodeBlendDirectional_BckRight              = 5,
	eBioAnimNodeBlendDirectional_MAX                   = 6
};*/

// Enum SFXGame.BioAnimNodeBlendDirStart.EBioAnimStartDirection
/*enum EBioAnimStartDirection
{
	eBioAnimDirStart_ForwardRight                      = 0,
	eBioAnimDirStart_ForwardLeft                       = 1,
	eBioAnimDirStart_Right                             = 2,
	eBioAnimDirStart_Left                              = 3,
	eBioAnimDirStart_BackwardRight                     = 4,
	eBioAnimDirStart_BackwardLeft                      = 5,
	eBioAnimDirStart_MAX                               = 6
};*/

// Enum SFXGame.BioAnimNodeBlendFall.EBioAnimFalling
/*enum EBioAnimFalling
{
	eBioAnimFall_JumpOff                               = 0,
	eBioAnimFall_Falling                               = 1,
	eBioAnimFall_Landing                               = 2,
	eBioAnimFall_MAX                                   = 3
};*/

// Enum SFXGame.BioAnimNodeBlendMoveStop.EBioAnimMoveStop
/*enum EBioAnimMoveStop
{
	eBioAnimMoveStop_StopRight                         = 0,
	eBioAnimMoveStop_StopLeft                          = 1,
	eBioAnimMoveStop_MAX                               = 2
};*/

// Enum SFXGame.BioAnimNodeBlendPerBone.EBoneBlendType
/*enum EBoneBlendType
{
	BLENDTYPE_ALWAYS                                   = 0,
	BLENDTYPE_ALWAYS_BONE_SWITCH                       = 1,
	BLENDTYPE_CROSSFADE_BONE_SWITCH                    = 2,
	BLENDTYPE_SWITCH                                   = 3,
	BLENDTYPE_TOGGLE                                   = 4,
	BLENDTYPE_WEIGHT                                   = 5,
	BLENDTYPE_MAX                                      = 6
};*/

// Enum SFXGame.BioAnimNodeBlendPerBone.EBoneBlendTestType
/*enum EBoneBlendTestType
{
	BLENDTESTTYPE_NONE                                 = 0,
	BLENDTESTTYPE_ANIM                                 = 1,
	BLENDTESTTYPE_BONE                                 = 2,
	BLENDTESTTYPE_MAX                                  = 3
};*/

// Enum SFXGame.BioAnimNodeBlendScalarHoppingBehavior.EBioAnimNodeBlendScalarHoppingBehavior
/*enum EBioAnimNodeBlendScalarHoppingBehavior
{
	BScHop_None                                        = 0,
	BScHop_NotUsed                                     = 1,
	BScHop_LandAngle                                   = 2,
	BScHop_MAX                                         = 3
};*/

// Enum SFXGame.BioAnimNodeBlendScalarMovementBehavior.EBioAnimNodeBlendScalarMovementBehavior
/*enum EBioAnimNodeBlendScalarMovementBehavior
{
	BScMv_None                                         = 0,
	BScMv_TurnAngle                                    = 1,
	BScMv_SpeedVelocity                                = 2,
	BScMv_SpeedTacticalVelocity                        = 3,
	BScMv_AxisDirection                                = 4,
	BScMv_MAX                                          = 5
};*/

// Enum SFXGame.BioAnimNodeBlendScalarMovementBehavior.EBioAnimNodeBlendScalarMoveSpeedStates
/*enum EBioAnimNodeBlendScalarMoveSpeedStates
{
	BScMvSS_Idle                                       = 0,
	BScMvSS_Walk                                       = 1,
	BScMvSS_Run                                        = 2,
	BScMvSS_Sprint                                     = 3,
	BScMvSS_MAX                                        = 4
};*/

// Enum SFXGame.BioAnimNodeBlendScalarMovementBehavior.EBioAnimNodeBlendScalarMoveAxis
/*enum EBioAnimNodeBlendScalarMoveAxis
{
	BScMvAxis_All                                      = 0,
	BScMvAxis_2D                                       = 1,
	BScMvAxis_X                                        = 2,
	BScMvAxis_Y                                        = 3,
	BScMvAxis_Z                                        = 4,
	BScMvAxis_MAX                                      = 5
};*/

// Enum SFXGame.BioAnimNodeBlendScalarMovementBehavior.EBioAnimNodeBlendScalarMoveAxisDir
/*enum EBioAnimNodeBlendScalarMoveAxisDir
{
	BScMvAxisDir_X                                     = 0,
	BScMvAxisDir_Y                                     = 1,
	BScMvAxisDir_Z                                     = 2,
	BScMvAxisDir_MAX                                   = 3
};*/

// Enum SFXGame.BioAnimNodeBlendScalarMovementBehavior.EBioAnimNodeBlendScalarMoveAxisDirMode
/*enum EBioAnimNodeBlendScalarMoveAxisDirMode
{
	BScMvAxisDirMode_WorldRotation                     = 0,
	BScMvAxisDirMode_WorldVelDir                       = 1,
	BScMvAxisDirMode_WorldAccelDir                     = 2,
	BScMvAxisDirMode_LocalVelDir                       = 3,
	BScMvAxisDirMode_LocalAccelDir                     = 4,
	BScMvAxisDirMode_MAX                               = 5
};*/

// Enum SFXGame.BioAnimNodeBlendSkidTurn.EBioAnimSkidTurn
/*enum EBioAnimSkidTurn
{
	eBioAnimSkidTurn_StartRight                        = 0,
	eBioAnimSkidTurn_StartLeft                         = 1,
	eBioAnimSkidTurn_TurnRightNear                     = 2,
	eBioAnimSkidTurn_TurnRightFar                      = 3,
	eBioAnimSkidTurn_TurnLeftNear                      = 4,
	eBioAnimSkidTurn_TurnLeftFar                       = 5,
	eBioAnimSkidTurn_MAX                               = 6
};*/

// Enum SFXGame.BioAnimNodeBlendSpeed.EBioAnim_SpeedType
/*enum EBioAnim_SpeedType
{
	eBioAnim_SpeedStandard                             = 0,
	eBioAnim_SpeedStarting                             = 1,
	eBioAnim_SpeedSnapshot                             = 2,
	eBioAnim_MAX                                       = 3
};*/

// Enum SFXGame.BioAnimNodeBlendSpeed2.EBioAnimNodeBlendSpeed2
/*enum EBioAnimNodeBlendSpeed2
{
	BioAnimNodeBlendSpeed2_Idle                        = 0,
	BioAnimNodeBlendSpeed2_Walk                        = 1,
	BioAnimNodeBlendSpeed2_Run                         = 2,
	BioAnimNodeBlendSpeed2_MAX                         = 3
};*/

// Enum SFXGame.BioAnimNodeBlendState.EBioBlendStatePlayMode
/*enum EBioBlendStatePlayMode
{
	eBioBlendStatePlayMode_None                        = 0,
	eBioBlendStatePlayMode_OneShot                     = 1,
	eBioBlendStatePlayMode_Looping                     = 2,
	eBioBlendStatePlayMode_Query                       = 3,
	eBioBlendStatePlayMode_MAX                         = 4
};*/

// Enum SFXGame.BioAnimNodeBlendState.EBioBlendStatePlayAction
/*enum EBioBlendStatePlayAction
{
	eBioBlendStatePlayAction_NoAction                  = 0,
	eBioBlendStatePlayAction_Play                      = 1,
	eBioBlendStatePlayAction_Stop                      = 2,
	eBioBlendStatePlayAction_Reset                     = 3,
	eBioBlendStatePlayAction_PlayFromStart             = 4,
	eBioBlendStatePlayAction_PlayFromTime              = 5,
	eBioBlendStatePlayAction_MAX                       = 6
};*/

// Enum SFXGame.BioAnimNodeBlendStateActionBehavior.EBioAnimNodeBlendStateActionBehavior
/*enum EBioAnimNodeBlendStateActionBehavior
{
	BSAct_None                                         = 0,
	BSAct_PawnState                                    = 1,
	BSAct_PawnGesturesState                            = 2,
	BSAct_ActiveState                                  = 3,
	BSAct_Posture                                      = 4,
	BSAct_ArtPlaceable                                 = 5,
	BSAct_IdleState                                    = 6,
	BSAct_MAX                                          = 7
};*/

// Enum SFXGame.BioAnimNodeBlendStateActionBehavior.EBioPawnAnimActionStates
/*enum EBioPawnAnimActionStates
{
	PAAS_Posture                                       = 0,
	PAAS_Dying                                         = 1,
	PAAS_Death                                         = 2,
	PAAS_Matinee                                       = 3,
	PAAS_Recover                                       = 4,
	PAAS_Gestures                                      = 5,
	PAAS_MAX                                           = 6
};*/

// Enum SFXGame.BioAnimNodeBlendStateActionBehavior.EBioPawnAnimActiveStates
/*enum EBioPawnAnimActiveStates
{
	PAActiveS_Active                                   = 0,
	PAActiveS_ActiveToInactive                         = 1,
	PAActiveS_InactiveToActive                         = 2,
	PAActiveS_Inactive                                 = 3,
	PAActiveS_MAX                                      = 4
};*/

// Enum SFXGame.BioAnimNodeBlendStateActionBehavior.EBioArtPlaceableActionStates
/*enum EBioArtPlaceableActionStates
{
	APAS_Default                                       = 0,
	APAS_Matinee                                       = 1,
	APAS_MAX                                           = 2
};*/

// Enum SFXGame.BioAnimNodeBlendStateCombatBehavior.EBioAnimNodeBlendStateCombatBehavior
/*enum EBioAnimNodeBlendStateCombatBehavior
{
	BSCbt_None                                         = 0,
	BSCbt_CoverSwitch                                  = 1,
	BSCbt_CoverDirection                               = 2,
	BSCbt_CoverState                                   = 3,
	BSCbt_CoverBlocked                                 = 4,
	BSCbt_CombatSwitch                                 = 5,
	BSCbt_CoverPredictDirection                        = 6,
	BSCbt_CoverBlockType                               = 7,
	BSCbt_MAX                                          = 8
};*/

// Enum SFXGame.BioAnimNodeBlendStateHoppingBehavior.EBioAnimNodeBlendStateHoppingBehavior
/*enum EBioAnimNodeBlendStateHoppingBehavior
{
	BSHop_None                                         = 0,
	BSHop_PawnSurface                                  = 1,
	BSHop_HopSequence                                  = 2,
	BSHop_HopPhys                                      = 3,
	BSHop_MAX                                          = 4
};*/

// Enum SFXGame.BioAnimNodeBlendStateMovementBehavior.EBioAnimNodeBlendStateMovementBehavior
/*enum EBioAnimNodeBlendStateMovementBehavior
{
	BSMove_None                                        = 0,
	BSMove_SpeedVelocity                               = 1,
	BSMove_SpeedTacticalVelocity                       = 2,
	BSMove_ScaleRate                                   = 3,
	BSMove_ScaleRateByWalkSpeed                        = 4,
	BSMove_ScaleRateByRunSpeed                         = 5,
	BSMove_ScaleRateBySprintSpeed                      = 6,
	BSMove_ScaleRateByTacticalWalkSpeed                = 7,
	BSMove_ScaleRateByTacticalRunSpeed                 = 8,
	BSMove_LookAtTurning                               = 9,
	BSMove_TurningDirection                            = 10,
	BSMove_AxisDirection                               = 11,
	BSMove_FlyingState                                 = 12,
	BSMove_StopSwitch                                  = 13,
	BSMove_StopOnFoot                                  = 14,
	BSMove_StartSwitch                                 = 15,
	BSMove_ScaleRateByWalkRunRatio                     = 16,
	BSMove_SkidTurnSwitch                              = 17,
	BSMove_MAX                                         = 18
};*/

// Enum SFXGame.BioAnimNodeBlendStateMovementBehavior.EBioMovementSpeedStates
/*enum EBioMovementSpeedStates
{
	MSS_Idle                                           = 0,
	MSS_Walk                                           = 1,
	MSS_Run                                            = 2,
	MSS_Sprint                                         = 3,
	MSS_MAX                                            = 4
};*/

// Enum SFXGame.BioAnimNodeBlendStateMovementBehavior.EBioAnimNodeBlendStateMoveAxisDir
/*enum EBioAnimNodeBlendStateMoveAxisDir
{
	BSMoveAxisDir_X                                    = 0,
	BSMoveAxisDir_Y                                    = 1,
	BSMoveAxisDir_Z                                    = 2,
	BSMoveAxisDir_MAX                                  = 3
};*/

// Enum SFXGame.BioAnimNodeBlendStateMovementBehavior.EBioAnimNodeBlendStateMoveAxisDirMode
/*enum EBioAnimNodeBlendStateMoveAxisDirMode
{
	BSMoveAxisDirMode_WorldRotation                    = 0,
	BSMoveAxisDirMode_WorldVelDir                      = 1,
	BSMoveAxisDirMode_WorldAccelDir                    = 2,
	BSMoveAxisDirMode_LocalVelDir                      = 3,
	BSMoveAxisDirMode_LocalAccelDir                    = 4,
	BSMoveAxisDirMode_MAX                              = 5
};*/

// Enum SFXGame.BioAnimNodeCombatMode.EBioAnimNodeCombatModeChild
/*enum EBioAnimNodeCombatModeChild
{
	BIO_ANIM_NODE_COMBAT_MODE_CHILD_NONCOMBAT          = 0,
	BIO_ANIM_NODE_COMBAT_MODE_CHILD_COMBAT             = 1,
	BIO_ANIM_NODE_COMBAT_MODE_CHILD_ENTERCOMBAT        = 2,
	BIO_ANIM_NODE_COMBAT_MODE_CHILD_EXITCOMBAT         = 3,
	BIO_ANIM_NODE_COMBAT_MODE_CHILD_MAX                = 4
};*/

// Enum SFXGame.BioAnimNodeCombatMode.EBioAnimNodeCombatModeState
/*enum EBioAnimNodeCombatModeState
{
	BIO_ANIM_NODE_COMBAT_MODE_STATE_NONCOMBAT          = 0,
	BIO_ANIM_NODE_COMBAT_MODE_STATE_COMBAT             = 1,
	BIO_ANIM_NODE_COMBAT_MODE_STATE_ANIMATING_TO_COMBAT = 2,
	BIO_ANIM_NODE_COMBAT_MODE_STATE_ANIMATING_TO_NONCOMBAT = 3,
	BIO_ANIM_NODE_COMBAT_MODE_STATE_BLENDING_TO_COMBAT = 4,
	BIO_ANIM_NODE_COMBAT_MODE_STATE_BLENDING_TO_NONCOMBAT = 5,
	BIO_ANIM_NODE_COMBAT_MODE_STATE_MAX                = 6
};*/

// Enum SFXGame.BioAnimNodeCover2Actions.EBioAnimNodeCover2Actions
/*enum EBioAnimNodeCover2Actions
{
	eBioAnimNodeCover2Actions_Default                  = 0,
	eBioAnimNodeCover2Actions_Lean                     = 1,
	eBioAnimNodeCover2Actions_PopUp                    = 2,
	eBioAnimNodeCover2Actions_PeekSide                 = 3,
	eBioAnimNodeCover2Actions_PeekUp                   = 4,
	eBioAnimNodeCover2Actions_PartialLean              = 5,
	eBioAnimNodeCover2Actions_PartialPopUp             = 6,
	eBioAnimNodeCover2Actions_Aimback                  = 7,
	eBioAnimNodeCover2Actions_MAX                      = 8
};*/

// Enum SFXGame.BioAnimNodeCover2Transition.EBioAnimNodeCover2Transition
/*enum EBioAnimNodeCover2Transition
{
	eBioAnimNodeCover2Transition_Intro                 = 0,
	eBioAnimNodeCover2Transition_Body                  = 1,
	eBioAnimNodeCover2Transition_Outro                 = 2,
	eBioAnimNodeCover2Transition_MAX                   = 3
};*/

// Enum SFXGame.BioAppearanceItemWeapon.EBioAppearanceItemWeaponVFXDamageEnum
/*enum EBioAppearanceItemWeaponVFXDamageEnum
{
	BIO_APPEARANCE_ITEM_WEAPON_VFX_DAMAGE_ENUM_PLACEHOLDER = 0,
	BIO_APPEARANCE_ITEM_WEAPON_VFX_DAMAGE_ENUM_MAX     = 1
};*/

// Enum SFXGame.BioFSMComponent.eBioPendingStateChange
/*enum eBioPendingStateChange
{
	BIO_PST_Done                                       = 0,
	BIO_PST_Pending                                    = 1,
	BIO_PST_Started                                    = 2,
	BIO_PST_MAX                                        = 3
};*/

// Enum SFXGame.BioArtPlaceableType.eBioAPLUseCase
/*enum eBioAPLUseCase
{
	APL_USE_TOGGLE                                     = 0,
	APL_USE_STATE0                                     = 1,
	APL_USE_STATE1                                     = 2,
	APL_USE_ELECTRONICS                                = 3,
	APL_USE_DECRYPT                                    = 4,
	APL_USE_PROXIMITY                                  = 5,
	APL_USE_PROXIMITY_ENTER                            = 6,
	APL_USE_PROXIMITY_EXIT                             = 7,
	APL_USE_MAX                                        = 8
};*/

// Enum SFXGame.BioArtPlaceableType.eArtPlaceableRole
/*enum eArtPlaceableRole
{
	APR_NONE                                           = 0,
	APR_MAX                                            = 1
};*/

// Enum SFXGame.BioArtPlaceableType.eMateralVariation
/*enum eMateralVariation
{
	APMV                                               = 0,
	APMV01                                             = 1,
	APMV02                                             = 2,
	APMV03                                             = 3,
	APMV04                                             = 4,
	APMV05                                             = 5,
	APMV06                                             = 6,
	APMV07                                             = 7,
	APMV08                                             = 8,
	APMV_MAX                                           = 9
};*/

// Enum SFXGame.BioArtPlaceableType.eArtPlaceableStates
/*enum eArtPlaceableStates
{
	APL_FSM_STATE_NONE                                 = 0,
	APL_FSM_STATE_MAX                                  = 1
};*/

// Enum SFXGame.BioSkillGame.EBioSkillGame
/*enum EBioSkillGame
{
	SKILL_GAME_DECRYPTION                              = 0,
	SKILL_GAME_ELECTRONICS                             = 1,
	SKILL_GAME_CUSTOM                                  = 2,
	SKILL_GAME_MAX                                     = 3
};*/

// Enum SFXGame.BioGamerProfile.EAchievementID
/*enum EAchievementID
{
	ACHIEVEMENT_00_HONORMEDAL                          = 0,
	ACHIEVEMENT_01_FEROS                               = 1,
	ACHIEVEMENT_02_EDENPRIME                           = 2,
	ACHIEVEMENT_03_VIRMIRE                             = 3,
	ACHIEVEMENT_04_NOVERIA                             = 4,
	ACHIEVEMENT_05_LIFT                                = 5,
	ACHIEVEMENT_06_THROW                               = 6,
	ACHIEVEMENT_07_WARP                                = 7,
	ACHIEVEMENT_08_SINGULARITY                         = 8,
	ACHIEVEMENT_09_BARRIER                             = 9,
	ACHIEVEMENT_10_STASIS                              = 10,
	ACHIEVEMENT_11_DAMPING                             = 11,
	ACHIEVEMENT_12_HACK                                = 12,
	ACHIEVEMENT_13_ELECTRONICS                         = 13,
	ACHIEVEMENT_14_SABOTAGE                            = 14,
	ACHIEVEMENT_15_FIRSTAID                            = 15,
	ACHIEVEMENT_16_NEURALSHOCK                         = 16,
	ACHIEVEMENT_17_ILOS                                = 17,
	ACHIEVEMENT_18_CODEX                               = 18,
	ACHIEVEMENT_19_COMPLETIONIST                       = 19,
	ACHIEVEMENT_20_EXPLORATIONI                        = 20,
	ACHIEVEMENT_21_EXPLORATIONII                       = 21,
	ACHIEVEMENT_22_EXPLORATIONIII                      = 22,
	ACHIEVEMENT_23_SOLDIERALLY                         = 23,
	ACHIEVEMENT_24_SENTINELALLY                        = 24,
	ACHIEVEMENT_25_KROGANALLY                          = 25,
	ACHIEVEMENT_26_TURIANALLY                          = 26,
	ACHIEVEMENT_27_QUARIANALLY                         = 27,
	ACHIEVEMENT_28_ASARIALLY                           = 28,
	ACHIEVEMENT_29_PRINCIPLED                          = 29,
	ACHIEVEMENT_30_SPECTRE                             = 30,
	ACHIEVEMENT_31_CHARISMATIC                         = 31,
	ACHIEVEMENT_32_SEARCHANDRESCUE                     = 32,
	ACHIEVEMENT_33_BRINGDOWNTHESKY                     = 33,
	ACHIEVEMENT_34_TRILOGY_INSANITYI                   = 34,
	ACHIEVEMENT_35_TRILOGY_INSANITYII                  = 35,
	ACHIEVEMENT_36_TRILOGY_INSANITYIII                 = 36,
	ACHIEVEMENT_37_TRILOGY_PARAMOURI                   = 37,
	ACHIEVEMENT_38_TRILOGY_PARAMOURII                  = 38,
	ACHIEVEMENT_39_TRILOGY_PARAMOURIII                 = 39,
	ACHIEVEMENT_40_TRILOGY_LONGSERVICE                 = 40,
	ACHIEVEMENT_41_TRILOGY_RECRUIT                     = 41,
	ACHIEVEMENT_42_TRILOGY_SOLDIER                     = 42,
	ACHIEVEMENT_43_TRILOGY_VETERAN                     = 43,
	ACHIEVEMENT_44_TRILOGY_BRUISER                     = 44,
	ACHIEVEMENT_MAX                                    = 45
};*/

// Enum SFXGame.BioGamerProfile.EOptionDisplaySetting
/*enum EOptionDisplaySetting
{
	DISPLAY_SETTING_EPICDEFAULT                        = 0,
	DISPLAY_SETTING_DEFAULT                            = 1,
	DISPLAY_SETTING_SOFT                               = 2,
	DISPLAY_SETTING_LUCENT                             = 3,
	DISPLAY_SETTING_VIBRANT                            = 4,
	DISPLAY_SETTING_MAX                                = 5
};*/

// Enum SFXGame.BioGamerProfile.EOptionCombatDifficulty
/*enum EOptionCombatDifficulty
{
	COMBAT_DIFFICULTY_CASUAL                           = 0,
	COMBAT_DIFFICULTY_NORMAL                           = 1,
	COMBAT_DIFFICULTY_VETERAN                          = 2,
	COMBAT_DIFFICULTY_HARDCORE                         = 3,
	COMBAT_DIFFICULTY_INSANITY                         = 4,
	COMBAT_DIFFICULTY_MAX                              = 5
};*/

// Enum SFXGame.BioGamerProfile.EOptionBoolean
/*enum EOptionBoolean
{
	OPTION_BOOLEAN_FALSE                               = 0,
	OPTION_BOOLEAN_TRUE                                = 1,
	OPTION_BOOLEAN_MAX                                 = 2
};*/

// Enum SFXGame.BioGamerProfile.EOptionTargetAssist
/*enum EOptionTargetAssist
{
	TARGET_ASSIST_HIGH                                 = 0,
	TARGET_ASSIST_NORMAL                               = 1,
	TARGET_ASSIST_LOW                                  = 2,
	TARGET_ASSIST_MAX                                  = 3
};*/

// Enum SFXGame.BioGamerProfile.EOptionAutoLevelUp
/*enum EOptionAutoLevelUp
{
	AUTO_LEVEL_UP_NONE                                 = 0,
	AUTO_LEVEL_UP_SQUAD_MEMBERS                        = 1,
	AUTO_LEVEL_UP_ALL                                  = 2,
	AUTO_LEVEL_UP_MAX                                  = 3
};*/

// Enum SFXGame.BioGamerProfile.EOptionSquadPowerUse
/*enum EOptionSquadPowerUse
{
	POWER_USE_NONE                                     = 0,
	POWER_USE_NORMAL                                   = 1,
	POWER_USE_AGRESSIVE                                = 2,
	POWER_USE_MAX                                      = 3
};*/

// Enum SFXGame.BioGamerProfile.EStickConfigOptions
/*enum EStickConfigOptions
{
	SCO_Default                                        = 0,
	SCO_SouthPaw                                       = 1,
	SCO_MAX                                            = 2
};*/

// Enum SFXGame.BioGamerProfile.ETriggerConfigOptions
/*enum ETriggerConfigOptions
{
	TCO_Default                                        = 0,
	TCO_SouthPaw                                       = 1,
	TCO_DefaultSwapped                                 = 2,
	TCO_SouthPawSwapped                                = 3,
	TCO_MAX                                            = 4
};*/

// Enum SFXGame.BioGamerProfile.EMappedSettingTypes
/*enum EMappedSettingTypes
{
	MST_Gamma                                          = 0,
	MST_HDRContrast                                    = 1,
	MST_HDRBrightness                                  = 2,
	MST_MAX                                            = 3
};*/

// Enum SFXGame.BioGamerProfile.EOptionDialogMode
/*enum EOptionDialogMode
{
	DIALOG_MODE_NORMAL                                 = 0,
	DIALOG_MODE_MOVIE                                  = 1,
	DIALOG_MODE_MAX                                    = 2
};*/

// Enum SFXGame.BioGamerProfile.ETelemetryExtendedOptions
/*enum ETelemetryExtendedOptions
{
	TELEM_OPTION_TYPE_WINDOW_MODE                      = 0,
	TELEM_OPTION_TYPE_RESOLUTION                       = 1,
	TELEM_OPTION_TYPE_DYNAMIC_SHADOWS                  = 2,
	TELEM_OPTION_TYPE_TEXTURE_DETAIL                   = 3,
	TELEM_OPTION_TYPE_VSYNC                            = 4,
	TELEM_OPTION_TYPE_BRIGHTNESS                       = 5,
	TELEM_OPTION_TYPE_HDR_ENABLE                       = 6,
	TELEM_OPTION_TYPE_HDR_CONTRAST                     = 7,
	TELEM_OPTION_TYPE_HDR_BRIGHTNESS                   = 8,
	TELEM_OPTION_TYPE_MAX                              = 9
};*/

// Enum SFXGame.BioGamerProfile.eOption
/*enum eOption
{
	OPTION_TYPE_COMBAT_DIFFICULTY                      = 0,
	OPTION_TYPE_DIALOG_MODE                            = 1,
	OPTION_TYPE_AUTO_LEVELUP                           = 2,
	OPTION_TYPE_AUTO_EQUIP                             = 3,
	OPTION_TYPE_TUTORIAL_FLAG                          = 4,
	OPTION_TYPE_SUBTITLES                              = 5,
	OPTION_TYPE_AUTOPAUSE_ENEMY_SIGHTED                = 6,
	OPTION_TYPE_AUTOPAUSE_SQUADMEMBER_DOWN             = 7,
	OPTION_TYPE_BRIGHTNESS                             = 8,
	OPTION_TYPE_DISPLAY_SETTING                        = 9,
	OPTION_TYPE_MUSIC_VOLUME                           = 10,
	OPTION_TYPE_FX_VOLUME                              = 11,
	OPTION_TYPE_DIALOG_VOLUME                          = 12,
	OPTION_TYPE_INVERT_YAXIS                           = 13,
	OPTION_TYPE_SOUTHPAW_FLAG                          = 14,
	OPTION_TYPE_TARGET_ASSIST_MODE                     = 15,
	OPTION_TYPE_H_COMBAT_SENSITIVITY                   = 16,
	OPTION_TYPE_V_COMBAT_SENSITIVITY                   = 17,
	OPTION_TYPE_H_EXPLORATION_SENSITIVITY              = 18,
	OPTION_TYPE_V_EXPLORATION_SENSITIVITY              = 19,
	OPTION_TYPE_RUMBLE_FLAG                            = 20,
	OPTION_TYPE_AUTOPAUSE_BLEEDOUT                     = 21,
	OPTION_TYPE_MOTION_BLUR                            = 22,
	OPTION_TYPE_FILM_GRAIN                             = 23,
	OPTION_TYPE_SQUAD_POWER_USE                        = 24,
	OPTION_TYPE_AUTO_SAVE                              = 25,
	OPTION_TYPE_STICK_CONFIGURATION                    = 26,
	OPTION_TYPE_TRIGGER_CONFIGURATION                  = 27,
	OPTION_TYPE_MOUSE_SENSITIVITY                      = 28,
	OPTION_TYPE_ANALOG_SENSITIVITY                     = 29,
	OPTION_TYPE_MAKO_STEERING                          = 30,
	OPTION_TYPE_ANTI_ALIASING                          = 31,
	OPTION_TYPE_VSYNC                                  = 32,
	OPTION_TYPE_DYNAMIC_SHADOWS                        = 33,
	OPTION_TYPE_TEXTURE_DETAIL                         = 34,
	OPTION_TYPE_DYNAMIC_RESOLUTION                     = 35,
	OPTION_TYPE_HDR_ENABLE                             = 36,
	OPTION_TYPE_HDR_CONTRAST                           = 37,
	OPTION_TYPE_HDR_BRIGHTNESS                         = 38,
	OPTION_TYPE_AMBIENT_OCCLUSION                      = 39,
	OPTION_TYPE_LEGACY_LEVELUP                         = 40,
	OPTION_TYPE_SELECTED_MONITOR                       = 41,
	OPTION_TYPE_UNCAPPED_FRAMERATE                     = 42,
	OPTION_TYPE_MAX                                    = 43
};*/

// Enum SFXGame.BioSkillGame.EBioSkillGameDifficulty
/*enum EBioSkillGameDifficulty
{
	SKILL_GAME_DIFFICULTY_EASY                         = 0,
	SKILL_GAME_DIFFICULTY_MEDIUM                       = 1,
	SKILL_GAME_DIFFICULTY_HARD                         = 2,
	SKILL_GAME_DIFFICULTY_MAX                          = 3
};*/

// Enum SFXGame.BioEquipmentVehicle.EBioEquipmentVehicleSlot
/*enum EBioEquipmentVehicleSlot
{
	VEHICLE_EQUIPMENT_SLOT_CANNON                      = 0,
	VEHICLE_EQUIPMENT_SLOT_MACHINE_GUN                 = 1,
	VEHICLE_EQUIPMENT_SLOT_ARMOR                       = 2,
	VEHICLE_EQUIPMENT_SLOT_SHIELDS                     = 3,
	VEHICLE_EQUIPMENT_SLOT_THRUSTER_BOOST              = 4,
	VEHICLE_EQUIPMENT_SLOT_REPAIR                      = 5,
	VEHICLE_EQUIPMENT_SLOT_RADAR                       = 6,
	VEHICLE_EQUIPMENT_SLOT_MAX                         = 7
};*/

// Enum SFXGame.BioAttributesItemWeaponRanged.EWeaponPowerMode
/*enum EWeaponPowerMode
{
	WEAPON_POWER_MODE_NONE                             = 0,
	WEAPON_POWER_MODE_MARKSMAN                         = 1,
	WEAPON_POWER_MODE_SUPPRESSION                      = 2,
	WEAPON_POWER_MODE_ASSASSINATION                    = 3,
	WEAPON_POWER_MODE_CARNAGE                          = 4,
	WEAPON_POWER_MODE_MAX                              = 5
};*/

// Enum SFXGame.BioCameraBehaviorGalaxy.EBioGalaxyMap_PlanetType
/*enum EBioGalaxyMap_PlanetType
{
	eBioGM_PlanetType_None                             = 0,
	eBioGM_PlanetType_Planet                           = 1,
	eBioGM_PlanetType_Anomaly                          = 2,
	eBioGM_PlanetType_PlanetAndAnomaly                 = 3,
	eBioGM_PlanetType_Citadel                          = 4,
	eBioGM_PlanetType_MAX                              = 5
};*/

// Enum SFXGame.BioCameraShake.EBioCameraShakeType
/*enum EBioCameraShakeType
{
	Grenade                                            = 0,
	Rumble                                             = 1,
	Ambient                                            = 2,
	Run                                                = 3,
	FireLoop                                           = 4,
	Rifle                                              = 5,
	Pistol                                             = 6,
	Sniper                                             = 7,
	Shotgun                                            = 8,
	Biotics                                            = 9,
	EBioCameraShakeType_MAX                            = 10
};*/

// Enum SFXGame.BioCameraShake.EBioCameraShakeVariant
/*enum EBioCameraShakeVariant
{
	Random                                             = 0,
	FX_Grenade1                                        = 1,
	FX_Grenade2                                        = 2,
	FX_Grenade3                                        = 3,
	FX_MAX                                             = 4
};*/

// Enum SFXGame.BioCharacterImporter.EBioCharacterImporterCharacter2DA
/*enum EBioCharacterImporterCharacter2DA
{
	CHARACTER_IMPORTER_CHARACTER_2DA_CHARACTER         = 0,
	CHARACTER_IMPORTER_CHARACTER_2DA_STARTING_EQUIPMENT = 1,
	CHARACTER_IMPORTER_CHARACTER_2DA_MAX               = 2
};*/

// Enum SFXGame.BioCharacterImporter.EBioCharacterImporterClasses2DA
/*enum EBioCharacterImporterClasses2DA
{
	CHARACTER_IMPORTER_CLASSES_2DA_BASE_CLASS          = 0,
	CHARACTER_IMPORTER_CLASSES_2DA_CLASS_TALENTS       = 1,
	CHARACTER_IMPORTER_CLASSES_2DA_CLASS_SPECIALIZATIONS = 2,
	CHARACTER_IMPORTER_CLASSES_2DA_MAX                 = 3
};*/

// Enum SFXGame.BioCheatManager.EBioProfilerType
/*enum EBioProfilerType
{
	BioProfiler_None                                   = 0,
	BioProfiler_Combat                                 = 1,
	BioProfiler_Talents                                = 2,
	BioProfiler_PawnAttributes                         = 3,
	BioProfiler_WeaponAttributes                       = 4,
	BioProfiler_PowerAttributes                        = 5,
	BioProfiler_Inventory                              = 6,
	BioProfiler_Hopper                                 = 7,
	BioProfiler_AI                                     = 8,
	BioProfiler_Cover                                  = 9,
	BioProfiler_Movement                               = 10,
	BioProfiler_Squad                                  = 11,
	BioProfiler_Avoid                                  = 12,
	BioProfiler_Path                                   = 13,
	BioProfiler_Noise                                  = 14,
	BioProfiler_Conversation                           = 15,
	BioProfiler_Ragdoll                                = 16,
	BioProfiler_Grenade                                = 17,
	BioProfiler_Lookat                                 = 18,
	BioProfiler_VehicleAttributes                      = 19,
	BioProfiler_Camera                                 = 20,
	BioProfiler_QA_AI                                  = 21,
	BioProfiler_Squad_Follow                           = 22,
	BioProfiler_Anim                                   = 23,
	BioProfiler_Save                                   = 24,
	BioProfiler_Gestures                               = 25,
	BioProfiler_Caps                                   = 26,
	BioProfiler_SquadCaps                              = 27,
	BioProfiler_Perception                             = 28,
	BioProfiler_ConversationBug                        = 29,
	BioProfiler_Stasis                                 = 30,
	BioProfiler_Components                             = 31,
	BioProfiler_VehicleWeaponAttributes                = 32,
	BioProfiler_Trilogy                                = 33,
	BioProfiler_MAX                                    = 34
};*/

// Enum SFXGame.BioInventoryGuiInterface.EBioInventoryGuiInterfaceItemStat
/*enum EBioInventoryGuiInterfaceItemStat
{
	BIO_INVENTORY_GUI_INTERFACE_ITEM_STAT_PRIMARY      = 0,
	BIO_INVENTORY_GUI_INTERFACE_ITEM_STAT_SECONDARY    = 1,
	BIO_INVENTORY_GUI_INTERFACE_ITEM_STAT_TERTIARY     = 2,
	BIO_INVENTORY_GUI_INTERFACE_ITEM_STAT_MAX          = 3
};*/

// Enum SFXGame.BioInventoryGuiInterface.GuiItemStatTypes
/*enum GuiItemStatTypes
{
	ITEM_STAT_TYPE_None                                = 0,
	ITEM_STAT_TYPE_DamagePerSecond                     = 1,
	ITEM_STAT_TYPE_Range                               = 2,
	ITEM_STAT_TYPE_KickbackEfficiency                  = 3,
	ITEM_STAT_TYPE_ChargeEfficiency                    = 4,
	ITEM_STAT_TYPE_EffectBoost                         = 5,
	ITEM_STAT_TYPE_DamageResistance                    = 6,
	ITEM_STAT_TYPE_ShieldStrength                      = 7,
	ITEM_STAT_TYPE_TechResistance                      = 8,
	ITEM_STAT_TYPE_School_Electronics                  = 9,
	ITEM_STAT_TYPE_School_Decryption                   = 10,
	ITEM_STAT_TYPE_School_Medical                      = 11,
	ITEM_STAT_TYPE_School_Kinetics                     = 12,
	ITEM_STAT_TYPE_School_Telekinetics                 = 13,
	ITEM_STAT_TYPE_School_SpatialDistortion            = 14,
	ITEM_STAT_TYPE_HeatsinkEfficiency                  = 15,
	ITEM_STAT_TYPE_Grenade_Damage                      = 16,
	ITEM_STAT_TYPE_Grenade_Impulse                     = 17,
	ITEM_STAT_TYPE_Grenade_Radius                      = 18,
	ITEM_STAT_TYPE_MAX                                 = 19
};*/

// Enum SFXGame.BioWeaponRanged.EBioWeaponVisualEffect
/*enum EBioWeaponVisualEffect
{
	BIO_WEAPON_VISUAL_EFFECT_MESH                      = 0,
	BIO_WEAPON_VISUAL_EFFECT_MUZZLE_FLASH              = 1,
	BIO_WEAPON_VISUAL_EFFECT_SECONDARY_MUZZLE_FLASH    = 2,
	BIO_WEAPON_VISUAL_EFFECT_COOL_DOWN                 = 3,
	BIO_WEAPON_VISUAL_EFFECT_SABOTAGE                  = 4,
	BIO_WEAPON_VISUAL_EFFECT_WHILE_FIRING              = 5,
	BIO_WEAPON_VISUAL_EFFECT_MAX                       = 6
};*/

// Enum SFXGame.BioWeaponRanged.EBioWeaponHit
/*enum EBioWeaponHit
{
	BIOWEAPON_HIT_INVALID                              = 0,
	BIOWEAPON_HIT_NONE                                 = 1,
	BIOWEAPON_HIT_PAWN                                 = 2,
	BIOWEAPON_HIT_SHIELD                               = 3,
	BIOWEAPON_HIT_SCENERY                              = 4,
	BIOWEAPON_HIT_COUNT                                = 5,
	BIOWEAPON_HIT_MAX                                  = 6
};*/

// Enum SFXGame.BioInventoryGuiInterface.EBioInventoryGuiInterfaceSortMode
/*enum EBioInventoryGuiInterfaceSortMode
{
	BIO_INVENTORY_GUI_INTERFACE_SORT_BY_SOPH_DESC      = 0,
	BIO_INVENTORY_GUI_INTERFACE_SORT_BY_SOPH_ASC       = 1,
	BIO_INVENTORY_GUI_INTERFACE_SORT_BY_NAME           = 2,
	BIO_INVENTORY_GUI_INTERFACE_SORT_BY_SOPH_DESC_STORE = 3,
	BIO_INVENTORY_GUI_INTERFACE_SORT_BY_SOPH_ASC_STORE = 4,
	BIO_INVENTORY_GUI_INTERFACE_SORT_BY_TYPE           = 5,
	BIO_INVENTORY_GUI_INTERFACE_SORT_BY_PRICE          = 6,
	BIO_INVENTORY_GUI_INTERFACE_SORT_BY_NAME_STORE     = 7,
	BIO_INVENTORY_GUI_INTERFACE_SORT_BY_MAX            = 8
};*/

// Enum SFXGame.BioInventoryGuiInterface.GuiXModSlots
/*enum GuiXModSlots
{
	XMOD_SLOT_Emitter                                  = 0,
	XMOD_SLOT_Functional                               = 1,
	XMOD_SLOT_Ammo                                     = 2,
	XMOD_SLOT_MAX                                      = 3
};*/

// Enum SFXGame.BioConsequenceFunctions.EXPCurveSet
/*enum EXPCurveSet
{
	EXPCurve_NoReward                                  = 0,
	EXPCurve_MinionKill                                = 1,
	EXPCurve_EliteKill                                 = 2,
	EXPCurve_SubBossKill                               = 3,
	EXPCurve_BossKill                                  = 4,
	EXPCurve_SkillUse                                  = 5,
	EXPCurve_MinorQuest                                = 6,
	EXPCurve_MediumQUest                               = 7,
	EXPCurve_MajorQuest                                = 8,
	EXPCurve_MainPlot                                  = 9,
	EXPCurve_MAX                                       = 10
};*/

// Enum SFXGame.BioConversation.EConvGUIStyles
/*enum EConvGUIStyles
{
	GUI_STYLE_NONE                                     = 0,
	GUI_STYLE_CHARM                                    = 1,
	GUI_STYLE_INTIMIDATE                               = 2,
	GUI_STYLE_PLAYER_ALERT                             = 3,
	GUI_STYLE_ILLEGAL                                  = 4,
	GUI_STYLE_MAX                                      = 5
};*/

// Enum SFXGame.BioConversation.EReplyCategory
/*enum EReplyCategory
{
	REPLY_CATEGORY_DEFAULT                             = 0,
	REPLY_CATEGORY_AGREE                               = 1,
	REPLY_CATEGORY_DISAGREE                            = 2,
	REPLY_CATEGORY_FRIENDLY                            = 3,
	REPLY_CATEGORY_HOSTILE                             = 4,
	REPLY_CATEGORY_INVESTIGATE                         = 5,
	REPLY_CATEGORY_MAX                                 = 6
};*/

// Enum SFXGame.BioConversation.EReplyTypes
/*enum EReplyTypes
{
	REPLY_STANDARD                                     = 0,
	REPLY_AUTOCONTINUE                                 = 1,
	REPLY_DIALOGEND                                    = 2,
	REPLY_MAX                                          = 3
};*/

// Enum SFXGame.BioDestinationArrow.eColorSelection
/*enum eColorSelection
{
	BDA_White                                          = 0,
	BDA_Yellow                                         = 1,
	BDA_Blue                                           = 2,
	BDA_Red                                            = 3,
	BDA_MAX                                            = 4
};*/

// Enum SFXGame.BioEventNotifier.BioNoticeDisplayTypes
/*enum BioNoticeDisplayTypes
{
	NOTICE_TYPE_DELTA                                  = 0,
	NOTICE_TYPE_TEXT                                   = 1,
	NOTICE_TYPE_QUANTITY                               = 2,
	NOTICE_TYPE_QUANTITY_TEXT                          = 3,
	NOTICE_TYPE_MAX                                    = 4
};*/

// Enum SFXGame.BioEventNotifier.BioNoticeIcons
/*enum BioNoticeIcons
{
	NOTICE_ICON_UNASSIGNED                             = 0,
	NOTICE_ICON_QUEST_UPDATE                           = 1,
	NOTICE_ICON_LEVELUP                                = 2,
	NOTICE_ICON_DEFICIENCY                             = 3,
	NOTICE_ICON_XP                                     = 4,
	NOTICE_ICON_PARAGON                                = 5,
	NOTICE_ICON_RENEGADE                               = 6,
	NOTICE_ICON_OMNITOOL                               = 7,
	NOTICE_ICON_BIOAMP                                 = 8,
	NOTICE_ICON_XMOD                                   = 9,
	NOTICE_ICON_CODEX_ADDED                            = 10,
	NOTICE_ICON_COIN                                   = 11,
	NOTICE_ICON_MEDIGEL                                = 12,
	NOTICE_ICON_SALVAGE                                = 13,
	NOTICE_ICON_PISTOL                                 = 14,
	NOTICE_ICON_SHOTGUN                                = 15,
	NOTICE_ICON_ASSAULT_RIFLE                          = 16,
	NOTICE_ICON_NEWABILITY                             = 17,
	NOTICE_ICON_INVENTORY                              = 18,
	NOTICE_ICON_GRENADE                                = 19,
	NOTICE_ICON_QUEST_ADDED                            = 20,
	NOTICE_ICON_AREAMAPNODE                            = 21,
	NOTICE_ICON_MAX                                    = 22
};*/

// Enum SFXGame.BioEventNotifier.BioNoticeContexts
/*enum BioNoticeContexts
{
	NOTICE_CONTEXT_JOURNAL                             = 0,
	NOTICE_CONTEXT_CODEX                               = 1,
	NOTICE_CONTEXT_INVENTORY                           = 2,
	NOTICE_CONTEXT_PARTYLEVEL                          = 3,
	NOTICE_CONTEXT_XP                                  = 4,
	NOTICE_CONTEXT_MEDIGEL                             = 5,
	NOTICE_CONTEXT_SALVAGE                             = 6,
	NOTICE_CONTEXT_CREDITS                             = 7,
	NOTICE_CONTEXT_GRENADES                            = 8,
	NOTICE_CONTEXT_PARAGON                             = 9,
	NOTICE_CONTEXT_RENEGADE                            = 10,
	NOTICE_CONTEXT_AREAMAP                             = 11,
	NOTICE_CONTEXT_ABILITY                             = 12,
	NOTICE_CONTEXT_MAX                                 = 13
};*/

// Enum SFXGame.BioEventNotifier.BioQuestEventTypes
/*enum BioQuestEventTypes
{
	QET_New                                            = 0,
	QET_Updated                                        = 1,
	QET_Completed                                      = 2,
	QET_MAX                                            = 3
};*/

// Enum SFXGame.BioEvtSysTrackFuncShot.EBioFuncShotType
/*enum EBioFuncShotType
{
	FuncShotType_Unset                                 = 0,
	FuncShotType_MAX                                   = 1
};*/

// Enum SFXGame.BioEvtSysTrackGesture.EBioGestureAllPoses
/*enum EBioGestureAllPoses
{
	GestPose_Unset                                     = 0,
	GestPose_MAX                                       = 1
};*/

// Enum SFXGame.BioEvtSysTrackGesture.EBioGestureOverrideType
/*enum EBioGestureOverrideType
{
	DEFAULT_TRACK                                      = 0,
	FEMALE_PLAYER_TRACK                                = 1,
	FRENCH_TRACK                                       = 2,
	ITALIAN_TRACK                                      = 3,
	GERMAN_TRACK                                       = 4,
	EBioGestureOverrideType_MAX                        = 5
};*/

// Enum SFXGame.BioEvtSysTrackGesture.EBioGestureFindActorMode
/*enum EBioGestureFindActorMode
{
	Gesture_FindActorByTag                             = 0,
	Gesture_UseObjectPinForActor                       = 1,
	Gesture_MAX                                        = 2
};*/

// Enum SFXGame.BioStage.EStageNodes
/*enum EStageNodes
{
	STAGENODE_NODE1                                    = 0,
	STAGENODE_NODE2                                    = 1,
	STAGENODE_PUP1                                     = 2,
	STAGENODE_PUP101                                   = 3,
	STAGENODE_PUP2                                     = 4,
	STAGENODE_PUP201                                   = 5,
	STAGENODE_NODE3                                    = 6,
	STAGENODE_NODE4                                    = 7,
	STAGENODE_UNSET                                    = 8,
	STAGENODE_MAX                                      = 9
};*/

// Enum SFXGame.BioSeqAct_StageSwitchCamera.EBioCommonStageCameras
/*enum EBioCommonStageCameras
{
	ChangeCam_Unset                                    = 0,
	cam1_2                                             = 1,
	cam1_201                                           = 2,
	cam1_202                                           = 3,
	cam1_203                                           = 4,
	cam1_204                                           = 5,
	cam2_1                                             = 6,
	cam2_101                                           = 7,
	cam2_102                                           = 8,
	cam2_103                                           = 9,
	cam2_104                                           = 10,
	cam3_1                                             = 11,
	cam3_101                                           = 12,
	cam3_2                                             = 13,
	cam3_201                                           = 14,
	cam4_1                                             = 15,
	cam4_101                                           = 16,
	cam4_2                                             = 17,
	cam4_201                                           = 18,
	EBioCommonStageCameras_MAX                         = 19
};*/

// Enum SFXGame.BioForceFeedbackPlayer.EBioForceFeedbackPlayer
/*enum EBioForceFeedbackPlayer
{
	BIO_FORCE_FEEDBACK_PLAYER_COVER                    = 0,
	BIO_FORCE_FEEDBACK_PLAYER_DRAW                     = 1,
	BIO_FORCE_FEEDBACK_PLAYER_HOLSTERED                = 2,
	BIO_FORCE_FEEDBACK_PLAYER_WEAPON_CLOSE             = 3,
	BIO_FORCE_FEEDBACK_PLAYER_USE_PLACEABLE            = 4,
	BIO_FORCE_FEEDBACK_PLAYER_VEHICLE_CANNON           = 5,
	BIO_FORCE_FEEDBACK_PLAYER_VEHICLE_MACHINE_GUN      = 6,
	BIO_FORCE_FEEDBACK_PLAYER_MAX                      = 7
};*/

// Enum SFXGame.BioGameEffect.EBioGameEffectClassPriority
/*enum EBioGameEffectClassPriority
{
	BIO_GAME_EFFECT_CLASS_PRIORITY_STANDARD            = 0,
	BIO_GAME_EFFECT_CLASS_PRIORITY_ADD_POWER_PARAMETER = 1,
	BIO_GAME_EFFECT_CLASS_PRIORITY_GIVE_POWER          = 2,
	BIO_GAME_EFFECT_CLASS_PRIORITY_MAX                 = 3
};*/

// Enum SFXGame.BioGameEffectAttribute.EBioGameEffectAttributeType
/*enum EBioGameEffectAttributeType
{
	BIO_ATTRIBUTE_TYPE_PAWN                            = 0,
	BIO_ATTRIBUTE_TYPE_PAWNPARTY                       = 1,
	BIO_ATTRIBUTE_TYPE_PAWNPLAYER                      = 2,
	BIO_ATTRIBUTE_TYPE_POWER                           = 3,
	BIO_ATTRIBUTE_TYPE_ITEM                            = 4,
	BIO_ATTRIBUTE_TYPE_ITEM_WEAPON                     = 5,
	BIO_ATTRIBUTE_TYPE_ITEM_ARMOR                      = 6,
	BIO_ATTRIBUTE_TYPE_ITEM_BIOAMP                     = 7,
	BIO_ATTRIBUTE_TYPE_ITEM_OMNITOOL                   = 8,
	BIO_ATTRIBUTE_TYPE_SHIELD                          = 9,
	BIO_ATTRIBUTE_TYPE_DAMAGE                          = 10,
	BIO_ATTRIBUTE_TYPE_PAWN_VEHICLE                    = 11,
	BIO_ATTRIBUTE_TYPE_ITEM_GRENADE                    = 12,
	BIO_ATTRIBUTE_TYPE_MAX                             = 13
};*/

// Enum SFXGame.BioGameEffectAttributeNumeric.EBioGameEffectAttributeAspect
/*enum EBioGameEffectAttributeAspect
{
	BIO_ATTRIBUTE_ASPECT_BASE                          = 0,
	BIO_ATTRIBUTE_ASPECT_MODIFIER                      = 1,
	BIO_ATTRIBUTE_ASPECT_MAX                           = 2
};*/

// Enum SFXGame.BioGameProperty.EBioGamePropertyType
/*enum EBioGamePropertyType
{
	GPT_Static                                         = 0,
	GPT_Timed                                          = 1,
	GPT_Instant                                        = 2,
	GPT_Frame                                          = 3,
	GPT_StaticFrame                                    = 4,
	GPT_MAX                                            = 5
};*/

// Enum SFXGame.BioGamePropertyImporter.EBioCharacterImporterGameProperty2DA
/*enum EBioCharacterImporterGameProperty2DA
{
	GAMEPROP_IMPORTER_2DA_GAMEPROPERTY_GAMEPROPERTIES  = 0,
	GAMEPROP_IMPORTER_2DA_GAMEPROPERTY_CONDITIONALS    = 1,
	GAMEPROP_IMPORTER_2DA_GAMEPROPERTY_GAMEPROPERTY_CONDITIONALS = 2,
	GAMEPROP_IMPORTER_2DA_GAMEPROPERTY_GAMEEFFECTS     = 3,
	GAMEPROP_IMPORTER_2DA_GAMEPROPERTY_EVENTSETS       = 4,
	GAMEPROP_IMPORTER_2DA_GAMEPROPERTY_MAX             = 5
};*/

// Enum SFXGame.BioInterpolator.EBioInterpolationMethod
/*enum EBioInterpolationMethod
{
	BIO_INTERPOLATION_METHOD_LINEAR                    = 0,
	BIO_INTERPOLATION_METHOD_LOG_E                     = 1,
	BIO_INTERPOLATION_METHOD_QUARTER_SIN               = 2,
	BIO_INTERPOLATION_METHOD_MAX                       = 3
};*/

// Enum SFXGame.BioItemImporter.EBioItem2DA
/*enum EBioItem2DA
{
	ITEM_IMPORTER_ITEM                                 = 0,
	ITEM_IMPORTER_ITEM_EFFECT_LEVELS                   = 1,
	ITEM_IMPORTER_2DA_COUNT                            = 2,
	ITEM_IMPORTER_MAX                                  = 3
};*/

// Enum SFXGame.BioLayers.EBioLayer
/*enum EBioLayer
{
	LAYER_DAMAGE_CONCENTRATION                         = 0,
	LAYER_SUPPRESSION_CONCENTRATION                    = 1,
	LAYER_BIOTIC_HARDENING                             = 2,
	LAYER_TECH_HARDENING                               = 3,
	LAYER_TOXIC_RESISTANCE                             = 4,
	LAYER_DISABLING_EFFECTS_RESISTANCE                 = 5,
	LAYER_DAMAGE_RESISTANCE                            = 6,
	LAYER_COMBAT_KICKBACK_REDUCTION                    = 7,
	LAYER_BIOTIC_KICKBACK_REDUCTION                    = 8,
	LAYER_TECH_KICKBACK_REDUCTION                      = 9,
	LAYER_COUNT                                        = 10,
	LAYER_MAX                                          = 11
};*/

// Enum SFXGame.BioLevelUpSystem.EBioLevelUp2DA
/*enum EBioLevelUp2DA
{
	LEVEL_UP_2DA_LEVEL_UP                              = 0,
	LEVEL_UP_2DA_RANK                                  = 1,
	LEVEL_UP_2DA_CHALLENGE_SCALING                     = 2,
	LEVEL_UP_2DA_EXPERIENCE                            = 3,
	LEVEL_UP_2DA_TEMPLATE                              = 4,
	LEVEL_UP_2DA_MAX                                   = 5
};*/

// Enum SFXGame.BioMorphUtility.EBioMorphUtilityComponentType
/*enum EBioMorphUtilityComponentType
{
	BMU_Component_Unknown                              = 0,
	BMU_Component_Picker                               = 1,
	BMU_Component_Slider                               = 2,
	BMU_Component_Combo                                = 3,
	BMU_Component_RGBA                                 = 4,
	BMU_Component_Compound                             = 5,
	BMU_Component_MAX                                  = 6
};*/

// Enum SFXGame.BioMorphUtility.EBioMorphUtilityHairComponentType
/*enum EBioMorphUtilityHairComponentType
{
	BMU_HairComponent_Hair                             = 0,
	BMU_HairComponent_Other                            = 1,
	BMU_HairComponent_MAX                              = 2
};*/

// Enum SFXGame.BioMorphFaceFrontEnd.EBioMorphFrontendSliderType
/*enum EBioMorphFrontendSliderType
{
	BMFE_SLIDER_MORPH_SINGLE                           = 0,
	BMFE_SLIDER_MORPH_DOUBLE                           = 1,
	BMFE_SLIDER_MATERIAL                               = 2,
	BMFE_SLIDER_MAX                                    = 3
};*/

// Enum SFXGame.BioOp.EBioOp
/*enum EBioOp
{
	BIO_OP_NULL                                        = 0,
	BIO_OP_ADD                                         = 1,
	BIO_OP_MULTIPLY                                    = 2,
	BIO_OP_MULTIPLY_COMPLEMENT                         = 3,
	BIO_OP_ASSIGN                                      = 4,
	BIO_OP_COUNT                                       = 5,
	BIO_OP_MAX                                         = 6
};*/

// Enum SFXGame.BioParticleModuleLocationAttachedMesh.EmissionAreaSpecificationType
/*enum EmissionAreaSpecificationType
{
	EAST_UniformDensityPerVertex                       = 0,
	EAST_UniformDensityPerBone                         = 1,
	EAST_WeightedDensityPerBone                        = 2,
	EAST_WeightedDensityPerEmissionArea                = 3,
	EAST_UniformDensityPerEmissionArea                 = 4,
	EAST_MAX                                           = 5
};*/

// Enum SFXGame.BioParticleModuleLocationPrimitiveNearestSurface.ELocationNearestSurface
/*enum ELocationNearestSurface
{
	eLocationNearestSurface_Stay                       = 0,
	eLocationNearestSurface_StayAtRadius               = 1,
	eLocationNearestSurface_Kill                       = 2,
	eLocationNearestSurface_MAX                        = 3
};*/

// Enum SFXGame.BioParticleModuleLocationPrimitiveNearestSurface.EBioParticleCollisionComplete
/*enum EBioParticleCollisionComplete
{
	EBPCC_DoNothing                                    = 0,
	EBPCC_Kill                                         = 1,
	EBPCC_Freeze                                       = 2,
	EBPCC_FreezeTranslation                            = 3,
	EBPCC_FreezeRotation                               = 4,
	EBPCC_FreezeMovement                               = 5,
	EBPCC_MAX                                          = 6
};*/

// Enum SFXGame.BioParticleModuleMultiplyByEmitterSpeed.MultiplyByEmitterSpeedProperty
/*enum MultiplyByEmitterSpeedProperty
{
	MESProperty_SpawnRate                              = 0,
	MESProperty_MAX                                    = 1
};*/

// Enum SFXGame.BioParticleModuleSound.EInstanceVersion
/*enum EInstanceVersion
{
	ParticleModSound_OriginalVer                       = 0,
	ParticleModSound_PerParticleVer                    = 1,
	ParticleModSound_MaxVer                            = 2,
	ParticleModSound_MAX                               = 3
};*/

// Enum SFXGame.BioPathNodeVolume.EBioPathNodeAlignment
/*enum EBioPathNodeAlignment
{
	BIO_PATH_ALIGN_NONE                                = 0,
	BIO_PATH_ALIGN_CENTER                              = 1,
	BIO_PATH_ALIGN_JUSTIFY                             = 2,
	BIO_PATH_ALIGN_MAX                                 = 3
};*/

// Enum SFXGame.BioPathNodeVolume.EBioPathNodeGenerators
/*enum EBioPathNodeGenerators
{
	PATHNODE_SQUARE                                    = 0,
	PATHNODE_MAX                                       = 1
};*/

// Enum SFXGame.SFXTrilogyProfileSettings.ETrilogyProfileSetting
/*enum ETrilogyProfileSetting
{
	TrilogySetting_TotalKills                          = 0,
	TrilogySetting_TotalMeleeKills                     = 1,
	TrilogySetting_InsanityME1                         = 2,
	TrilogySetting_InsanityME2                         = 3,
	TrilogySetting_InsanityME3                         = 4,
	TrilogySetting_RomancedME1                         = 5,
	TrilogySetting_RomancedME2                         = 6,
	TrilogySetting_RomancedME3                         = 7,
	TrilogySetting_MAX                                 = 8
};*/

// Enum SFXGame.BioPlayerSelection.EGeneralSelectionMode
/*enum EGeneralSelectionMode
{
	BIO_SELECTION_MODE_INACTIVE                        = 0,
	BIO_SELECTION_MODE_NORMAL                          = 1,
	BIO_SELECTION_MODE_SPECTATOR                       = 2,
	BIO_SELECTION_MODE_MAX                             = 3
};*/

// Enum SFXGame.BioPlayerController.ETVType
/*enum ETVType
{
	TVT_EpicDefault                                    = 0,
	TVT_Default                                        = 1,
	TVT_Soft                                           = 2,
	TVT_Lucent                                         = 3,
	TVT_MAX                                            = 4
};*/

// Enum SFXGame.BioPlayerController.EForceFeedbackType
/*enum EForceFeedbackType
{
	BIO_FEEDBACK_PLAYER                                = 0,
	BIO_FEEDBACK_WEAPON                                = 1,
	BIO_FEEDBACK_MAX                                   = 2
};*/

// Enum SFXGame.BioPlayerController.EBioActionType
/*enum EBioActionType
{
	BIO_ACTMAP_NONE                                    = 0,
	BIO_ACTMAP_POWER                                   = 1,
	BIO_ACTMAP_GRENADE                                 = 2,
	BIO_ACTMAP_RANGED                                  = 3,
	BIO_ACTMAP_MAX                                     = 4
};*/

// Enum SFXGame.BioPlayerController.EBioActionMappingSlot
/*enum EBioActionMappingSlot
{
	BIO_MAPSLOT_RIGHT                                  = 0,
	BIO_MAPSLOT_UP                                     = 1,
	BIO_MAPSLOT_LEFT                                   = 2,
	BIO_MAPSLOT_DOWN                                   = 3,
	BIO_MAPSLOT_HENCH1                                 = 4,
	BIO_MAPSLOT_HENCH2                                 = 5,
	BIO_MAPSLOT_MAX                                    = 6
};*/

// Enum SFXGame.BioSFHandler_MessageBox.BioMessageBoxIconSets
/*enum BioMessageBoxIconSets
{
	ICONSET_None                                       = 0,
	ICONSET_Manufacturer                               = 1,
	ICONSET_Combat                                     = 2,
	ICONSET_Plot                                       = 3,
	ICONSET_ItemProperties                             = 4,
	ICONSET_SaveLoad                                   = 5,
	ICONSET_MAX                                        = 6
};*/

// Enum SFXGame.BioPlayerController.EBioSide
/*enum EBioSide
{
	BIO_SIDE_RIGHT                                     = 0,
	BIO_SIDE_LEFT                                      = 1,
	BIO_SIDE_MAX                                       = 2
};*/

// Enum SFXGame.BioPlayerInput.EAxisBuffer
/*enum EAxisBuffer
{
	AxisBuffer_LX                                      = 0,
	AxisBuffer_LY                                      = 1,
	AxisBuffer_RX                                      = 2,
	AxisBuffer_RY                                      = 3,
	AxisBuffer_MouseX                                  = 4,
	AxisBuffer_MouseY                                  = 5,
	AxisBuffer_MAX                                     = 6
};*/

// Enum SFXGame.BioPlayerSquad.EExperienceSourceType
/*enum EExperienceSourceType
{
	EXPSourceType_SimpleDeath                          = 0,
	EXPSourceType_SkillUse                             = 1,
	EXPSourceType_QuestCompletion                      = 2,
	EXPSourceType_Generic                              = 3,
	EXPSourceType_MAX                                  = 4
};*/

// Enum SFXGame.BioPlayerSquad.EBioGameOverCondition
/*enum EBioGameOverCondition
{
	BIO_GAME_OVER_CONDITION_PLAYER_PAWN_DIES           = 0,
	BIO_GAME_OVER_CONDITION_PLAYER_SQUAD_DIES          = 1,
	BIO_GAME_OVER_CONDITION_PLAYER_SQUAD_MAX           = 2,
	BIO_GAME_OVER_CONDITION_PLAYER_MAX                 = 3
};*/

// Enum SFXGame.BioProbeCombat.EBioProbeCombatResult
/*enum EBioProbeCombatResult
{
	BioPCR_Disengaged                                  = 0,
	BioPCR_PlayerKilled                                = 1,
	BioPCR_SquadKilled                                 = 2,
	BioPCR_MAX                                         = 3
};*/

// Enum SFXGame.SFXSaveGame.ENotorietyType
/*enum ENotorietyType
{
	NotorietyType_None                                 = 0,
	NotorietyType_Survivor                             = 1,
	NotorietyType_Warhero                              = 2,
	NotorietyType_Ruthless                             = 3,
	NotorietyType_MAX                                  = 4
};*/

// Enum SFXGame.SFXSaveGame.EOriginType
/*enum EOriginType
{
	OriginType_None                                    = 0,
	OriginType_Spacer                                  = 1,
	OriginType_Colony                                  = 2,
	OriginType_Earthborn                               = 3,
	OriginType_MAX                                     = 4
};*/

// Enum SFXGame.SFXSaveGame.EHelmetPart
/*enum EHelmetPart
{
	HelmetPart_Helmet                                  = 0,
	HelmetPart_Visor                                   = 1,
	HelmetPart_Breather                                = 2,
	HelmetPart_MAX                                     = 3
};*/

// Enum SFXGame.SFXEngine.ESFXSaveGameType
/*enum ESFXSaveGameType
{
	SaveGameType_Manual                                = 0,
	SaveGameType_Quick                                 = 1,
	SaveGameType_Auto                                  = 2,
	SaveGameType_Chapter                               = 3,
	SaveGameType_MAX                                   = 4
};*/

// Enum SFXGame.SFXEngine.ESFXSaveGameAction
/*enum ESFXSaveGameAction
{
	SaveGame_DoNothing                                 = 0,
	SaveGame_Load                                      = 1,
	SaveGame_Save                                      = 2,
	SaveGame_Delete                                    = 3,
	SaveGame_CreateCareer                              = 4,
	SaveGame_DeleteCareer                              = 5,
	SaveGame_EnumerateCareers                          = 6,
	SaveGame_EnumerateSaves                            = 7,
	SaveGame_QueryFreeSpace                            = 8,
	SaveGame_PrepareSave                               = 9,
	SaveGame_DeletePreparedSave                        = 10,
	SaveGame_SaveGamerProfile                          = 11,
	SaveGame_LoadGamerProfile                          = 12,
	SaveGame_MAX                                       = 13
};*/

// Enum SFXGame.SFXEngine.EAsyncLoadStatus
/*enum EAsyncLoadStatus
{
	ASYNC_LOAD_ERROR                                   = 0,
	ASYNC_LOAD_STARTED                                 = 1,
	ASYNC_LOAD_INPROGRESS                              = 2,
	ASYNC_LOAD_COMLETE                                 = 3,
	ASYNC_LOAD_MAX                                     = 4
};*/

// Enum SFXGame.SFXSaveGame.EPlayerAppearanceType
/*enum EPlayerAppearanceType
{
	PlayerAppearanceType_Parts                         = 0,
	PlayerAppearanceType_Full                          = 1,
	PlayerAppearanceType_MAX                           = 2
};*/

// Enum SFXGame.SFXSaveGame.EEndGameState
/*enum EEndGameState
{
	EGS_NotFinished                                    = 0,
	EGS_OutInABlazeOfGlory                             = 1,
	EGS_LivedToFightAgain                              = 2,
	EGS_MAX                                            = 3
};*/

// Enum SFXGame.BioSaveGame.LoadGameResult
/*enum LoadGameResult
{
	LoadGame_Success                                   = 0,
	LoadGame_Fail                                      = 1,
	LoadGame_InitialChunk                              = 2,
	LoadGame_MAX                                       = 3
};*/

// Enum SFXGame.BioSeqAct_ActionStation.EBioActionStationExitCondition
/*enum EBioActionStationExitCondition
{
	BIO_AS_NONE                                        = 0,
	BIO_AS_EXIT                                        = 1,
	BIO_AS_COMBAT_EXIT                                 = 2,
	BIO_AS_INTERRUPT                                   = 3,
	BIO_AS_FAIL                                        = 4,
	BIO_AS_ABORT_TWITCHES                              = 5,
	BIO_AS_MAX                                         = 6
};*/

// Enum SFXGame.BioSeqAct_ActionStation.EBioActionStationEntrancePose
/*enum EBioActionStationEntrancePose
{
	BIO_AS_ENTRANCEPOSE_UNSET                          = 0,
	BIO_AS_ENTRANCEPOSE_MAX                            = 1
};*/

// Enum SFXGame.BioSeqAct_ActionStation.EBioActionStationExitPose
/*enum EBioActionStationExitPose
{
	BIO_AS_EXITPOSE_UNSET                              = 0,
	BIO_AS_EXITPOSE_MAX                                = 1
};*/

// Enum SFXGame.BioSeqAct_ActionStation.EBioActionStationCombatPose
/*enum EBioActionStationCombatPose
{
	BIO_AS_COMBATPOSE_UNSET                            = 0,
	BIO_AS_COMBATPOSE_MAX                              = 1
};*/

// Enum SFXGame.BioSeqAct_BlackScreen.BlackScreenActionSet
/*enum BlackScreenActionSet
{
	BlackScreenAction_TurnBlackOn                      = 0,
	BlackScreenAction_TurnBlackOff                     = 1,
	BlackScreenAction_FadeToBlack                      = 2,
	BlackScreenAction_FadeFromBlack                    = 3,
	BlackScreenAction_MAX                              = 4
};*/

// Enum SFXGame.BioSFHandler_DesignerUI.BioDUIElements
/*enum BioDUIElements
{
	BIO_DUI_PassiveTimer                               = 0,
	BIO_DUI_PassiveCounter                             = 1,
	BIO_DUI_PassiveText                                = 2,
	BIO_DUI_PassiveBar                                 = 3,
	BIO_DUI_PassiveBarMarker1                          = 4,
	BIO_DUI_PassiveBarMarker2                          = 5,
	BIO_DUI_ModalBar                                   = 6,
	BIO_DUI_ModalBarMarker1                            = 7,
	BIO_DUI_ModalBarMarker2                            = 8,
	BIO_DUI_ModalCounter                               = 9,
	BIO_DUI_ModalTimer                                 = 10,
	BIO_DUI_ModalText                                  = 11,
	BIO_DUI_ModalBackground                            = 12,
	BIO_DUI_ButtonA                                    = 13,
	BIO_DUI_ButtonAText                                = 14,
	BIO_DUI_ButtonB                                    = 15,
	BIO_DUI_ButtonBText                                = 16,
	BIO_DUI_ButtonX                                    = 17,
	BIO_DUI_ButtonXText                                = 18,
	BIO_DUI_ButtonY                                    = 19,
	BIO_DUI_ButtonYText                                = 20,
	BIO_DUI_ModalBackground2                           = 21,
	BIO_DUI_MAX                                        = 22
};*/

// Enum SFXGame.BioSeqAct_FaceOnlyVO.EBioFOVOLines
/*enum EBioFOVOLines
{
	FOVOLines_Unset                                    = 0,
	FOVOLines_MAX                                      = 1
};*/

// Enum SFXGame.BioSeqAct_FaceOnlyVO.EBioFOVOSpeakers
/*enum EBioFOVOSpeakers
{
	FOVOSpeakers_Unset                                 = 0,
	FOVOSpeakers_MAX                                   = 1
};*/

// Enum SFXGame.BioSeqAct_FireWeaponAt.EFireWeaponAtOutputPins
/*enum EFireWeaponAtOutputPins
{
	OL_Success                                         = 0,
	OL_Failed                                          = 1,
	OL_MAX                                             = 2
};*/

// Enum SFXGame.BioSeqAct_InteractProperty.EBioPropertyType
/*enum EBioPropertyType
{
	BPT_INVALID                                        = 0,
	BPT_OBJECT_PROPERTY                                = 1,
	BPT_BEHAVIOR_PROPERTY                              = 2,
	BPT_BEHAVIOR_FUNCTION                              = 3,
	BPT_OBJECT_FUNCTION                                = 4,
	BPT_MAX                                            = 5
};*/

// Enum SFXGame.BioSeqAct_GetTalentRank.EBioSeqActGetTalentRankInput
/*enum EBioSeqActGetTalentRankInput
{
	EBioSeqActGetTalentRankInput_TalentID              = 0,
	EBioSeqActGetTalentRankInput_Pawn                  = 1,
	EBioSeqActGetTalentRankInput_ResultRank            = 2,
	EBioSeqActGetTalentRankInput_MAX                   = 3
};*/

// Enum SFXGame.BioSeqAct_GetTalentRank.EBioSeqActGetTalentRankOutput
/*enum EBioSeqActGetTalentRankOutput
{
	EBioSeqActGetTalentRankOutput_Success              = 0,
	EBioSeqActGetTalentRankOutput_Failure              = 1,
	EBioSeqActGetTalentRankOutput_MAX                  = 2
};*/

// Enum SFXGame.BioSeqAct_GrantBonusTalent.EBioSeqActGrantBonusTalentInput
/*enum EBioSeqActGrantBonusTalentInput
{
	EBioSeqActGrantBonusTalentInput_BonusID            = 0,
	EBioSeqActGrantBonusTalentInput_MAX                = 1
};*/

// Enum SFXGame.BioSeqAct_GrantBonusTalent.EBioSeqActGrantBonusTalentOutput
/*enum EBioSeqActGrantBonusTalentOutput
{
	EBioSeqActGrantBonusTalentOutput_Success           = 0,
	EBioSeqActGrantBonusTalentOutput_Failure           = 1,
	EBioSeqActGrantBonusTalentOutput_MAX               = 2
};*/

// Enum SFXGame.BioSeqAct_HideAllWeapons.EBioSeqActHideAllWeaponsInput
/*enum EBioSeqActHideAllWeaponsInput
{
	EBioSeqActHideAllWeaponsInput_PawnList             = 0,
	EBioSeqActHideAllWeaponsInput_ShouldHide           = 1,
	EBioSeqActHideAllWeaponsInput_MAX                  = 2
};*/

// Enum SFXGame.BioSeqAct_HideAllWeapons.EBioSeqActHideAllWeaponsOutput
/*enum EBioSeqActHideAllWeaponsOutput
{
	EBioSeqActHideAllWeaponsOutput_Success             = 0,
	EBioSeqActHideAllWeaponsOutput_Failure             = 1,
	EBioSeqActHideAllWeaponsOutput_MAX                 = 2
};*/

// Enum SFXGame.BioSeqAct_IncreaseTalentMaxRank.EBioSeqActIncreaseTalentMaxRankInput
/*enum EBioSeqActIncreaseTalentMaxRankInput
{
	EBioSeqActIncreaseTalentMaxRankInput_TalentID      = 0,
	EBioSeqActIncreaseTalentMaxRankInput_MaxRank       = 1,
	EBioSeqActIncreaseTalentMaxRankInput_ExtraPoints   = 2,
	EBioSeqActIncreaseTalentMaxRankInput_MAX           = 3
};*/

// Enum SFXGame.BioSeqAct_IncreaseTalentMaxRank.EBioSeqActIncreaseTalentMaxRankOutput
/*enum EBioSeqActIncreaseTalentMaxRankOutput
{
	EBioSeqActIncreaseTalentMaxRankOutput_Success      = 0,
	EBioSeqActIncreaseTalentMaxRankOutput_Failure      = 1,
	EBioSeqActIncreaseTalentMaxRankOutput_MAX          = 2
};*/

// Enum SFXGame.BioSeqAct_MoveToObject.EMoveToObjectOutputPins
/*enum EMoveToObjectOutputPins
{
	MTO_Success                                        = 0,
	MTO_Failed                                         = 1,
	MTO_MAX                                            = 2
};*/

// Enum SFXGame.BioSeqAct_OpenShop.EBioSeqAct_OpenShopVariableLinks
/*enum EBioSeqAct_OpenShopVariableLinks
{
	BIOSEQACT_OPENSHOP_VARIABLE_LINK_PRICE_ADJUSTMENT  = 0,
	BIOSEQACT_OPENSHOP_VARIABLE_LINK_SHOP              = 1,
	BIOSEQACT_OPENSHOP_VARIABLE_LINK_OVERRIDE          = 2,
	BIOSEQACT_OPENSHOP_VARIABLE_LINK_MAX               = 3
};*/

// Enum SFXGame.BioSeqAct_OpenShop.EBioSeqAct_OpenShopOutputLinks
/*enum EBioSeqAct_OpenShopOutputLinks
{
	BIOSEQACT_OPENSHOPOUTPUTLINK_SUCCESS               = 0,
	BIOSEQACT_OPENSHOPOUTPUTLINK_FAILURE               = 1,
	BIOSEQACT_OPENSHOPOUTPUTLINK_MAX                   = 2
};*/

// Enum SFXGame.BioSeqAct_PlayFaceFXAnim.EBioAutoSetFXGroup
/*enum EBioAutoSetFXGroup
{
	FaceFXGroup_Unset                                  = 0,
	FaceFXGroup_MAX                                    = 1
};*/

// Enum SFXGame.BioSeqAct_PlayFaceFXAnim.EBioAutoSetFXAnim
/*enum EBioAutoSetFXAnim
{
	FaceFXAnim_Unset                                   = 0,
	FaceFXAnim_MAX                                     = 1
};*/

// Enum SFXGame.BioSeqAct_PlayFaceFXAnim.EBioAutoSetFXAnimSet
/*enum EBioAutoSetFXAnimSet
{
	FaceFXAnimSet_Unset                                = 0,
	FaceFXAnimSet_MAX                                  = 1
};*/

// Enum SFXGame.BioSeqAct_ScalarMathUnit.EScalarMathOps
/*enum EScalarMathOps
{
	SMO_Add                                            = 0,
	SMO_Subtract                                       = 1,
	SMO_Multiply                                       = 2,
	SMO_Divide                                         = 3,
	SMO_Exponent                                       = 4,
	SMO_Modulo                                         = 5,
	SMO_MAX                                            = 6
};*/

// Enum SFXGame.BioSeqAct_SelectWeapon.EBioSeqActSelectWeaponLinks
/*enum EBioSeqActSelectWeaponLinks
{
	EBioSeqActSelectWeaponLinks_Success                = 0,
	EBioSeqActSelectWeaponLinks_Failure                = 1,
	EBioSeqActSelectWeaponLinks_MAX                    = 2
};*/

// Enum SFXGame.BioSeqAct_SetGestureMode.EBioSetGestureModes
/*enum EBioSetGestureModes
{
	GestureMode_On                                     = 0,
	GestureMode_Off                                    = 1,
	GestureMode_MAX                                    = 2
};*/

// Enum SFXGame.BioSeqAct_SetOverrideTipText.EBioSeqActSetOverrideTipTextInput
/*enum EBioSeqActSetOverrideTipTextInput
{
	EBioSeqActSetOverrideTipTextInput_OverrideStringRef = 0,
	EBioSeqActSetOverrideTipTextInput_MAX              = 1
};*/

// Enum SFXGame.BioSeqAct_SetOverrideTipText.EBioSeqActSetOverrideTipTextOutput
/*enum EBioSeqActSetOverrideTipTextOutput
{
	EBioSeqActSetOverrideTipTextOutput_Success         = 0,
	EBioSeqActSetOverrideTipTextOutput_Failure         = 1,
	EBioSeqActSetOverrideTipTextOutput_MAX             = 2
};*/

// Enum SFXGame.BioWorldInfo.BioLocalVariableObjectType
/*enum BioLocalVariableObjectType
{
	BIO_LVOT_PLAYER                                    = 0,
	BIO_LVOT_OWNER                                     = 1,
	BIO_LVOT_TARGET                                    = 2,
	BIO_LVOT_BYTAG                                     = 3,
	BIO_LVOT_SPEAKER                                   = 4,
	BIO_LVOT_MAX                                       = 5
};*/

// Enum SFXGame.BioWorldInfo.BioLevelTypeObjectType
/*enum BioLevelTypeObjectType
{
	BIO_LTYPE_HUB                                      = 0,
	BIO_LTYPE_COMBAT                                   = 1,
	BIO_LTYPE_MAX                                      = 2
};*/

// Enum SFXGame.BioWorldInfo.EPlayerRenderStateSetting
/*enum EPlayerRenderStateSetting
{
	PRSS_NEARCLIP                                      = 0,
	PRSS_MAX                                           = 1
};*/

// Enum SFXGame.BioWorldInfo.JournalSortMethods
/*enum JournalSortMethods
{
	JSM_Newest                                         = 0,
	JSM_Name                                           = 1,
	JSM_Oldest                                         = 2,
	JSM_MAX                                            = 3
};*/

// Enum SFXGame.BioWorldInfo.MEBrowserWheelSubPages
/*enum MEBrowserWheelSubPages
{
	MBW_SP_Map                                         = 0,
	MBW_SP_Save                                        = 1,
	MBW_SP_CharacterRecord                             = 2,
	MBW_SP_Load                                        = 3,
	MBW_SP_Journal                                     = 4,
	MBW_SP_DataPad                                     = 5,
	MBW_SP_Inventory                                   = 6,
	MBW_SP_Options                                     = 7,
	MBW_SP_MAX                                         = 8
};*/

// Enum SFXGame.BioWorldInfo.BioBrowserStates
/*enum BioBrowserStates
{
	BBS_NORMAL                                         = 0,
	BBS_ALERT                                          = 1,
	BBS_DISABLED                                       = 2,
	BBS_MAX                                            = 3
};*/

// Enum SFXGame.BioSeqAct_SetSuperMode.EModes
/*enum EModes
{
	MOD_Ready                                          = 0,
	MOD_Explore                                        = 1,
	MOD_MAX                                            = 2
};*/

// Enum SFXGame.BioSeqAct_SetWeapon.EBioSeqActSetWeaponLinks
/*enum EBioSeqActSetWeaponLinks
{
	EBioSeqActSetWeaponLinks_Success                   = 0,
	EBioSeqActSetWeaponLinks_Failure                   = 1,
	EBioSeqActSetWeaponLinks_MAX                       = 2
};*/

// Enum SFXGame.BioSeqAct_SkillGame.ECustomSkillGameComplete
/*enum ECustomSkillGameComplete
{
	CUSTOM_SK_CANCEL                                   = 0,
	CUSTOM_SK_SUCCESS                                  = 1,
	CUSTOM_SK_FAIL                                     = 2,
	CUSTOM_SK_UNDEFINED                                = 3,
	CUSTOM_SK_MAX                                      = 4
};*/

// Enum SFXGame.BioSeqAct_SpawnHenchman.EBioSeqAct_SpawnHenchmanSide
/*enum EBioSeqAct_SpawnHenchmanSide
{
	BIOSEQACT_SPAWNHENCHMAN_SIDE_LEFT                  = 0,
	BIOSEQACT_SPAWNHENCHMAN_SIDE_RIGHT                 = 1,
	BIOSEQACT_SPAWNHENCHMAN_SIDE_MAX                   = 2
};*/

// Enum SFXGame.BioSeqAct_SpawnHenchman.EBioSeqActSpawnHenchmanLinks
/*enum EBioSeqActSpawnHenchmanLinks
{
	EBioSeqActSpawnHenchmanLinks_Success               = 0,
	EBioSeqActSpawnHenchmanLinks_Failure               = 1,
	EBioSeqActSpawnHenchmanLinks_MAX                   = 2
};*/

// Enum SFXGame.BioSeqAct_ThrowGrenadeAt.EThrowGrenadeAtOutputPins
/*enum EThrowGrenadeAtOutputPins
{
	TGAOL_Success                                      = 0,
	TGAOL_Failed                                       = 1,
	TGAOL_MAX                                          = 2
};*/

// Enum SFXGame.BioSeqAct_ToggleLightEnv.ToggleLightEnvType
/*enum ToggleLightEnvType
{
	TLET_ENABLE                                        = 0,
	TLET_DISABLE                                       = 1,
	TLET_TOGGLE                                        = 2,
	TLET_MAX                                           = 3
};*/

// Enum SFXGame.BioSeqAct_UseCover.EUseCoverOutputPins
/*enum EUseCoverOutputPins
{
	UCO_Success                                        = 0,
	UCO_Failed                                         = 1,
	UCO_MAX                                            = 2
};*/

// Enum SFXGame.BioSeqAct_UsePowerOn.EPowerOnOutputPins
/*enum EPowerOnOutputPins
{
	POL_Success                                        = 0,
	POL_Failed                                         = 1,
	POL_MAX                                            = 2
};*/

// Enum SFXGame.BioSeqAct_WalkWaypointSet.EWalkWaypointSetOutputPins
/*enum EWalkWaypointSetOutputPins
{
	WWS_Success                                        = 0,
	WWS_Failed                                         = 1,
	WWS_MAX                                            = 2
};*/

// Enum SFXGame.BioSeqCond_CheckChunkStatus.EBioSeqCondCheckChunkStatusCriteria
/*enum EBioSeqCondCheckChunkStatusCriteria
{
	EBioSeqCondCheckChunkStatusCriteria_Loaded         = 0,
	EBioSeqCondCheckChunkStatusCriteria_LoadedAndVisible = 1,
	EBioSeqCondCheckChunkStatusCriteria_MAX            = 2
};*/

// Enum SFXGame.BioSeqData.eCompletionEventType
/*enum eCompletionEventType
{
	CET_None                                           = 0,
	CET_Combat                                         = 1,
	CET_Movement                                       = 2,
	CET_MAX                                            = 3
};*/

// Enum SFXGame.BioSeqData_DoWorldInteraction.EWI_Mode
/*enum EWI_Mode
{
	WIM_Entering                                       = 0,
	WIM_Active                                         = 1,
	WIM_Exiting                                        = 2,
	WIM_StartingConv                                   = 3,
	WIM_Conv                                           = 4,
	WIM_EndingConv                                     = 5,
	WIM_MAX                                            = 6
};*/

// Enum SFXGame.BioSeqEvt_Conversation.EConversationScriptType
/*enum EConversationScriptType
{
	NodeEnd                                            = 0,
	NodeStart                                          = 1,
	StartConversationScript                            = 2,
	EndConversationScript                              = 3,
	EConversationScriptType_MAX                        = 4
};*/

// Enum SFXGame.BioSeqEvt_OnLookingAt.eLookingAtType
/*enum eLookingAtType
{
	LAT_Both                                           = 0,
	LAT_CO                                             = 1,
	LAT_NCO                                            = 2,
	LAT_MAX                                            = 3
};*/

// Enum SFXGame.BioSeqEvt_OnNotLookingAt.eNotLookingAtType
/*enum eNotLookingAtType
{
	LNAT_Both                                          = 0,
	LNAT_CO                                            = 1,
	LNAT_NCO                                           = 2,
	LNAT_MAX                                           = 3
};*/

// Enum SFXGame.BioSFHandler_BlackScreen.BlackScreenFadeModes
/*enum BlackScreenFadeModes
{
	BlackScreenFadeMode_NoFade                         = 0,
	BlackScreenFadeMode_FadeToBlack                    = 1,
	BlackScreenFadeMode_FadeFromBlack                  = 2,
	BlackScreenFadeMode_MAX                            = 3
};*/

// Enum SFXGame.BioSFHandler_CharacterRecord.EBioTalentRankState
/*enum EBioTalentRankState
{
	BioTalentRankState_Locked                          = 0,
	BioTalentRankState_Buyable                         = 1,
	BioTalentRankState_Bought                          = 2,
	BioTalentRankState_MAX                             = 3
};*/

// Enum SFXGame.BioSFHandler_Conversation.BioConvWheelPositions
/*enum BioConvWheelPositions
{
	REPLY_WHEEL_MIDDLE_RIGHT                           = 0,
	REPLY_WHEEL_BOTTOM_RIGHT                           = 1,
	REPLY_WHEEL_BOTTOM_LEFT                            = 2,
	REPLY_WHEEL_MIDDLE_LEFT                            = 3,
	REPLY_WHEEL_TOP_LEFT                               = 4,
	REPLY_WHEEL_TOP_RIGHT                              = 5,
	REPLY_WHEEL_MAX                                    = 6
};*/

// Enum SFXGame.BioSFHandler_HUD.EHUDInvokeLabel
/*enum EHUDInvokeLabel
{
	HUD_INVOKELABEL_UpdateHUDMode                      = 0,
	HUD_INVOKELABEL_UpdateTargetStatus                 = 1,
	HUD_INVOKELABEL_ChangeSelectedWeapon               = 2,
	HUD_INVOKELABEL_UpdateWeaponHeat                   = 3,
	HUD_INVOKELABEL_UpdateVehicleStatus                = 4,
	HUD_INVOKELABEL_UpdateVehicleStatusSquad           = 5,
	HUD_INVOKELABEL_UpdateSquadStatus                  = 6,
	HUD_INVOKELABEL_ChangeSelectedSquadOrder           = 7,
	HUD_INVOKELABEL_UpdateSquadFormation               = 8,
	HUD_INVOKELABEL_UpdatePowerPadMode                 = 9,
	HUD_INVOKELABEL_UpdateCustomButtons                = 10,
	HUD_INVOKELABEL_UpdateStorm                        = 11,
	HUD_INVOKELABEL_updateRadarArrow                   = 12,
	HUD_INVOKELABEL_setRadarParameters                 = 13,
	HUD_INVOKELABEL_updateRadarBoundaries              = 14,
	HUD_INVOKELABEL_RETICULE_updateCombatReticule      = 15,
	HUD_INVOKELABEL_RETICULE_updateSelectionReticule   = 16,
	HUD_INVOKELABEL_RETICULE_updateLosReticule         = 17,
	HUD_INVOKELABEL_updateNorthIndicator               = 18,
	HUD_INVOKELABEL_MAX                                = 19
};*/

// Enum SFXGame.BioSFHandler_HUD.EHUDStatusConditionTypes
/*enum EHUDStatusConditionTypes
{
	HUD_STATUS_TYPE_NONE                               = 0,
	HUD_STATUS_TYPE_MISCTEXT                           = 1,
	HUD_STATUS_TYPE_POISON                             = 2,
	HUD_STATUS_TYPE_IMMUNE                             = 3,
	HUD_STATUS_TYPE_SHOCK                              = 4,
	HUD_STATUS_TYPE_HACK                               = 5,
	HUD_STATUS_TYPE_MAX                                = 6
};*/

// Enum SFXGame.BioSFHandler_HUD.EHUDSquadDisplaySlots
/*enum EHUDSquadDisplaySlots
{
	HUD_SQUAD_DISPLAY_SLOT_BOTTOM                      = 0,
	HUD_SQUAD_DISPLAY_SLOT_MIDDLE                      = 1,
	HUD_SQUAD_DISPLAY_SLOT_TOP                         = 2,
	HUD_SQUAD_DISPLAY_SLOT_MAX                         = 3
};*/

// Enum SFXGame.BioSFHandler_HUD.EHUDShoulderTriggerButtons
/*enum EHUDShoulderTriggerButtons
{
	HUD_BUTTON_UNASSIGNED                              = 0,
	HUD_BUTTON_LEFT_SHOULDER                           = 1,
	HUD_BUTTON_LEFT_TRIGGER                            = 2,
	HUD_BUTTON_RIGHT_SHOULDER                          = 3,
	HUD_BUTTON_RIGHT_TRIGGER                           = 4,
	HUD_BUTTON_MAX                                     = 5
};*/

// Enum SFXGame.BioSFHandler_HUD.EHUDPowerMapSlots
/*enum EHUDPowerMapSlots
{
	HUD_POWERMAP_SLOT_UNASSIGNED                       = 0,
	HUD_POWERMAP_SLOT_DPADLEFT                         = 1,
	HUD_POWERMAP_SLOT_DPADTOP                          = 2,
	HUD_POWERMAP_SLOT_DPADRIGHT                        = 3,
	HUD_POWERMAP_SLOT_DPADBOTTOM                       = 4,
	HUD_POWERMAP_SLOT_BUMPLEFT                         = 5,
	HUD_POWERMAP_SLOT_BUMPRIGHT                        = 6,
	HUD_POWERMAP_SLOT_MAX                              = 7
};*/

// Enum SFXGame.BioSFHandler_HUD.EHUDDPadSlots
/*enum EHUDDPadSlots
{
	HUD_DPAD_SLOT_UNASSIGNED                           = 0,
	HUD_DPAD_SLOT_LEFT                                 = 1,
	HUD_DPAD_SLOT_TOP                                  = 2,
	HUD_DPAD_SLOT_RIGHT                                = 3,
	HUD_DPAD_SLOT_BOTTOM                               = 4,
	HUD_DPAD_SLOT_MAX                                  = 5
};*/

// Enum SFXGame.BioSFHandler_HUD.EHudPowerPadModes
/*enum EHudPowerPadModes
{
	HUD_POWER_PAD_MODE_EXPLORE                         = 0,
	HUD_POWER_PAD_MODE_COMBAT                          = 1,
	HUD_POWER_PAD_MODE_PAUSED_POWERS                   = 2,
	HUD_POWER_PAD_MODE_PAUSED_WEAPONS                  = 3,
	HUD_POWER_PAD_MODE_PAUSED_COMMANDS                 = 4,
	HUD_POWER_PAD_MODE_MAX                             = 5
};*/

// Enum SFXGame.BioSFHandler_HUD.EHUDPowerBehaviorTypes
/*enum EHUDPowerBehaviorTypes
{
	HUD_POWER_BEHAVIOR_TYPE_NONE                       = 0,
	HUD_POWER_BEHAVIOR_TYPE_STANDARD                   = 1,
	HUD_POWER_BEHAVIOR_TYPE_ACTIVATION                 = 2,
	HUD_POWER_BEHAVIOR_TYPE_DELIVERY                   = 3,
	HUD_POWER_BEHAVIOR_TYPE_WEAPON                     = 4,
	HUD_POWER_BEHAVIOR_TYPE_WEAPONALT                  = 5,
	HUD_POWER_BEHAVIOR_TYPE_GRENADEAMMO                = 6,
	HUD_POWER_BEHAVIOR_TYPE_WEAPONALT_OVERLOAD         = 7,
	HUD_POWER_BEHAVIOR_TYPE_MAX                        = 8
};*/

// Enum SFXGame.BioSFHandler_HUD.EHUDHenchNameIconRefs
/*enum EHUDHenchNameIconRefs
{
	HUD_HENCHNAME_ICON_UNASSIGNED                      = 0,
	HUD_HENCHNAME_ICON_ASHLEY                          = 1,
	HUD_HENCHNAME_ICON_KAIDAN                          = 2,
	HUD_HENCHNAME_ICON_LIARA                           = 3,
	HUD_HENCHNAME_ICON_WREX                            = 4,
	HUD_HENCHNAME_ICON_GARRUS                          = 5,
	HUD_HENCHNAME_ICON_TALI                            = 6,
	HUD_HENCHNAME_ICON_JENKINS                         = 7,
	HUD_HENCHNAME_ICON_MAX                             = 8
};*/

// Enum SFXGame.BioSFHandler_Keyboard.Keyboard_Options
/*enum Keyboard_Options
{
	KEYBOARD_STANDARD                                  = 0,
	KEYBOARD_CODE                                      = 1,
	KEYBOARD_MAX                                       = 2
};*/

// Enum SFXGame.BioSFHandler_SaveLoadBase.ESaveLoadGuiMode
/*enum ESaveLoadGuiMode
{
	SAVELOAD_GUI_BROWSER_WHEEL                         = 0,
	SAVELOAD_GUI_MAINMENU                              = 1,
	SAVELOAD_GUI_GAMEOVER                              = 2,
	SAVELOAD_GUI_MAX                                   = 3
};*/

// Enum SFXGame.BioSFHandler_MainMenu.MainMenuEntries
/*enum MainMenuEntries
{
	MM_ENTRY_DEFAULT                                   = 0,
	MM_ENTRY_NEWGAME                                   = 1,
	MM_ENTRY_LOADGAME                                  = 2,
	MM_ENTRY_EXTRAS                                    = 3,
	MM_ENTRY_ACHIEVEMENTS                              = 4,
	MM_ENTRY_LIVECONTENT                               = 5,
	MM_ENTRY_OPTIONS                                   = 6,
	MM_ENTRY_CREDITS                                   = 7,
	MM_ENTRY_MANUAL                                    = 8,
	MM_ENTRY_MAX                                       = 9
};*/

// Enum SFXGame.MassEffectGuiManager.EGuiHandlers
/*enum EGuiHandlers
{
	GUI_HANDLER_NONE                                   = 0,
	GUI_HANDLER_INVENTORY                              = 1,
	GUI_HANDLER_INGAMEGUI                              = 2,
	GUI_HANDLER_CHARACTER_RECORD                       = 3,
	GUI_HANDLER_LOOT                                   = 4,
	GUI_HANDLER_CONVERSATION                           = 5,
	GUI_HANDLER_SHOP                                   = 6,
	GUI_HANDLER_GALAXYMAP                              = 7,
	GUI_HANDLER_MAINMENU                               = 8,
	GUI_HANDLER_NEW_CHARACTER                          = 9,
	GUI_HANDLER_SELECT_CHARACTER                       = 10,
	GUI_HANDLER_JOURNAL                                = 11,
	GUI_HANDLER_HUD                                    = 12,
	GUI_HANDLER_PARTYSELECT                            = 13,
	GUI_HANDLER_XMODS                                  = 14,
	GUI_HANDLER_SQUADCOMMAND                           = 15,
	GUI_HANDLER_DATACODEX                              = 16,
	GUI_HANDLER_SAVELOAD                               = 17,
	GUI_HANDLER_ACHIEVEMENT                            = 18,
	GUI_HANDLER_AREAMAP                                = 19,
	GUI_HANDLER_SHAREDINGAMEGUI                        = 20,
	GUI_HANDLER_MENUBROWSER                            = 21,
	GUI_HANDLER_GAMEOVER                               = 22,
	GUI_HANDLER_SPECIALIZATION                         = 23,
	GUI_HANDLER_MESSAGEBOX                             = 24,
	GUI_HANDLER_INTROTEXT                              = 25,
	GUI_HANDLER_BLACKSCREEN                            = 26,
	GUI_HANDLER_CREDITS                                = 27,
	GUI_HANDLER_OPTIONS                                = 28,
	GUI_HANDLER_ADDITONALCONTENT                       = 29,
	GUI_HANDLER_SKILLGAME                              = 30,
	GUI_HANDLER_SPLASH_SCREEN                          = 31,
	GUI_HANDLER_REPLAYCHARACTERSELECT                  = 32,
	GUI_HANDLER_MAX                                    = 33
};*/

// Enum SFXGame.MassEffectGuiManager.BioTutorialPosition
/*enum BioTutorialPosition
{
	BTP_Top                                            = 0,
	BTP_Bottom                                         = 1,
	BTP_MessageBox                                     = 2,
	BTP_MAX                                            = 3
};*/

// Enum SFXGame.BioSFHandler_NewCharacter.BioNewCharacterTemplates
/*enum BioNewCharacterTemplates
{
	BNCT_ICONIC_MALE                                   = 0,
	BNCT_ICONIC_FEMALE                                 = 1,
	BNCT_CUSTOM_MALE                                   = 2,
	BNCT_CUSTOM_FEMALE                                 = 3,
	BNCT_MAX                                           = 4
};*/

// Enum SFXGame.BioSFHandler_NewCharacter.NewCharacterUIState
/*enum NewCharacterUIState
{
	NCMS_Database                                      = 0,
	NCMS_Iconic                                        = 1,
	NCMS_Sex                                           = 2,
	NCMS_Name                                          = 3,
	NCMS_Database_Corrupt                              = 4,
	NCMS_Origin                                        = 5,
	NCMS_Notoriety                                     = 6,
	NCMS_Class                                         = 7,
	NCMS_Deprecated                                    = 8,
	NCMS_Deprecated2                                   = 9,
	NCMS_Talent                                        = 10,
	NCMS_FaceCustom                                    = 11,
	NCMS_FaceTitle                                     = 12,
	NCMS_FaceDetail                                    = 13,
	NCMS_Summary                                       = 14,
	NCMS_MAX                                           = 15
};*/

// Enum SFXGame.BioSFHandler_Options.EOptionMessageID
/*enum EOptionMessageID
{
	OPTION_NONE                                        = 0,
	OPTION_CLOSE                                       = 1,
	OPTION_QUIT                                        = 2,
	OPTION_RESET_DEFAULTS                              = 3,
	OPTION_INITIALIZE                                  = 4,
	OPTION_SET_OPTION                                  = 5,
	OPTION_GOTO_MAINMENU                               = 6,
	OPTION_RESET_TUTORIALS                             = 7,
	OPTION_COMMIT                                      = 8,
	OPTION_CANCEL_PROMPT                               = 9,
	OPTION_REFRESH_HDR                                 = 10,
	OPTION_MAX                                         = 11
};*/

// Enum SFXGame.BioSFHandler_Options.EOptionsGuiMode
/*enum EOptionsGuiMode
{
	OPTION_GUI_BROWSER_WHEEL                           = 0,
	OPTION_GUI_MAINMENU                                = 1,
	OPTION_GUI_CHARACTER_CREATION                      = 2,
	OPTION_GUI_MAX                                     = 3
};*/

// Enum SFXGame.SFXGameModeManager.EGameModes
/*enum EGameModes
{
	GameMode_Default                                   = 0,
	GameMode_Vehicle                                   = 1,
	GameMode_PowerWheel                                = 2,
	GameMode_WeaponWheel                               = 3,
	GameMode_Command                                   = 4,
	GameMode_Conversation                              = 5,
	GameMode_Cinematic                                 = 6,
	GameMode_GUI                                       = 7,
	GameMode_Movie                                     = 8,
	GameMode_Galaxy                                    = 9,
	GameMode_Minigame                                  = 10,
	GameMode_Photo                                     = 11,
	GameMode_FlyCam                                    = 12,
	GameMode_MAX                                       = 13
};*/

// Enum SFXGame.BioSFHandler_PCOptions.WindowMode
/*enum WindowMode
{
	WIN_MODE_FULLSCREEN                                = 0,
	WIN_MODE_BORDERLESS                                = 1,
	WIN_MODE_WINDOWED                                  = 2,
	WIN_MODE_MAX                                       = 3
};*/

// Enum SFXGame.BioSFHandler_PCOptions.DeatilLevels
/*enum DeatilLevels
{
	DETAIL_LEVEL_LOW                                   = 0,
	DETAIL_LEVEL_MEDIUM                                = 1,
	DETAIL_LEVEL_HIGH                                  = 2,
	DETAIL_LEVEL_ULTRA_HIGH                            = 3,
	DETAIL_LEVEL_MAX                                   = 4
};*/

// Enum SFXGame.BioSFHandler_PCOptions.SettingsChecksBoxes
/*enum SettingsChecksBoxes
{
	CB_VIDEO_VSYNC                                     = 0,
	CB_AUDIO_CAPTIONING                                = 1,
	CB_MOUSE_INVERT                                    = 2,
	CB_MOUSE_HARDWARE                                  = 3,
	CB_GAMEPAD_RUMBLE                                  = 4,
	CB_GAMEPLAY_TUTORIALS                              = 5,
	CB_AUTO_ENEMY_SIGHTED                              = 6,
	CB_AUTO_BLEED_OUT                                  = 7,
	CB_AUTO_MEMBERDOWN                                 = 8,
	CB_GAMEPLAY_AUTOSAVE                               = 9,
	CB_TUT_TUTORIALS                                   = 10,
	CB_VIDEO_SHADOW                                    = 11,
	CB_VIDEO_SHADER_BLUR                               = 12,
	CB_VIDEO_SHADER_FILM                               = 13,
	CB_SOUND_HARDWARE                                  = 14,
	CB_MAKO_STEERING                                   = 15,
	CB_VIDEO_AA                                        = 16,
	CB_VIDEO_HDR_ENABLE                                = 17,
	CB_VIDEO_AO_ENABLE                                 = 18,
	CB_MAX                                             = 19
};*/

// Enum SFXGame.BioSFHandler_PCOptions.SettingsSliders
/*enum SettingsSliders
{
	PCSLIDER_VIDEO_BRIGHTNESS                          = 0,
	PCSLIDER_AUDIO_VOICE                               = 1,
	PCSLIDER_AUDIO_FX                                  = 2,
	PCSLIDER_AUDIO_MUSIC                               = 3,
	PCSLIDER_MOUSE_SENSE                               = 4,
	PCSLIDER_CONTROLLER_SENSE_HC                       = 5,
	PCSLIDER_CONTROLLER_SENSE_VC                       = 6,
	PCSLIDER_CONTROLLER_SENSE_HE                       = 7,
	PCSLIDER_CONTROLLER_SENSE_VE                       = 8,
	PCSLIDER_VIDEO_HDR_BRIGHTNESS                      = 9,
	PCSLIDER_VIDEO_HDR_CONTRAST                        = 10,
	PCSLIDER_MAX                                       = 11
};*/

// Enum SFXGame.BioSFHandler_PCOptions.SettingsDropDowns
/*enum SettingsDropDowns
{
	DD_VIDEO_WIN                                       = 0,
	DD_VIDEO_EFFECTS                                   = 1,
	DD_VIDEO_RESOLUTION                                = 2,
	DD_VIDEO_TEXTURE_DETAIL                            = 3,
	DD_VIDEO_FILTERING                                 = 4,
	DD_GAMEPLAY_COMBAT_DIFF                            = 5,
	DD_GAMEPLAY_AUTO_LEVEL                             = 6,
	DD_GAMEPLAY_TARGET_ASSIST                          = 7,
	DD_GAMEPLAY_SQUAD_POWER                            = 8,
	DD_CONTROLLER_ANALOGSENSE                          = 9,
	DD_CONTROLLER_STICKCONFIG                          = 10,
	DD_CONTROLLER_SHOOTCONFIG                          = 11,
	DD_SELECTED_MONITOR                                = 12,
	DD_GAMEPLAY_LEGACY_LEVELUP                         = 13,
	DD_UNCAPPED_FRAMERATE                              = 14,
	DD_MAX                                             = 15
};*/

// Enum SFXGame.BioSFHandler_PCOptions.PanelIndexs
/*enum PanelIndexs
{
	SETTINGS_PANEL_MAIN                                = 0,
	SETTINGS_PANEL_GRAPHICS                            = 1,
	SETTINGS_PANEL_CALIBRATION                         = 2,
	SETTINGS_PANEL_SOUND                               = 3,
	SETTINGS_PANEL_INPUT                               = 4,
	SETTINGS_PANEL_CONTROLS                            = 5,
	SETTINGS_PANEL_GAMEPLAY                            = 6,
	SETTINGS_PANEL_MAX                                 = 7
};*/

// Enum SFXGame.BioSFHandler_PCOptions.EPCOptionsGuiMode
/*enum EPCOptionsGuiMode
{
	PCOPTION_GUI_BROWSER_WHEEL                         = 0,
	PCOPTION_GUI_MAINMENU                              = 1,
	PCOPTION_GUI_CHARACTER_CREATION                    = 2,
	PCOPTION_GUI_MAX                                   = 3
};*/

// Enum SFXGame.BioSFHandler_Reticule.EReticuleMode
/*enum EReticuleMode
{
	RETICULE_MODE_OFF                                  = 0,
	RETICULE_MODE_STANDARD                             = 1,
	RETICULE_MODE_SNIPER                               = 2,
	RETICULE_MODE_MARKSMAN                             = 3,
	RETICULE_MODE_SUPPRESSION                          = 4,
	RETICULE_MODE_ASSASSINATION                        = 5,
	RETICULE_MODE_VEHICLE                              = 6,
	RETICULE_MODE_VEHICLE_ZOOM                         = 7,
	RETICULE_MODE_CARNAGE                              = 8,
	RETICULE_MODE_TIGHTAIM                             = 9,
	RETICULE_MODE_MAX                                  = 10
};*/

// Enum SFXGame.BioSFHandler_Reticule.EHUDObjectType
/*enum EHUDObjectType
{
	HUD_OBJECT_TYPE_PAWN                               = 0,
	HUD_OBJECT_TYPE_PLACEABLE                          = 1,
	HUD_OBJECT_TYPE_MAX                                = 2
};*/

// Enum SFXGame.BioShop.EBioShopInventory
/*enum EBioShopInventory
{
	BIO_SHOP_INVENTORY_PERMANENT                       = 0,
	BIO_SHOP_INVENTORY_PREMIUM                         = 1,
	BIO_SHOP_INVENTORY_LIMITED                         = 2,
	BIO_SHOP_INVENTORY_MAX                             = 3
};*/

// Enum SFXGame.BioSFHandler_XBoxMessageBox.MessageBoxIcon
/*enum MessageBoxIcon
{
	MBI_None                                           = 0,
	MBI_Error                                          = 1,
	MBI_Warning                                        = 2,
	MBI_Alert                                          = 3,
	MBI_MAX                                            = 4
};*/

// Enum SFXGame.BioShield.EBioShieldState
/*enum EBioShieldState
{
	BIO_SHIELD_STATE_INVALID                           = 0,
	BIO_SHIELD_STATE_FULLY_CHARGED                     = 1,
	BIO_SHIELD_STATE_DAMAGED                           = 2,
	BIO_SHIELD_STATE_RECHARGING                        = 3,
	BIO_SHIELD_STATE_COUNT                             = 4,
	BIO_SHIELD_STATE_MAX                               = 5
};*/

// Enum SFXGame.BioShieldView.EBioShieldVFXScale
/*enum EBioShieldVFXScale
{
	BIO_SHIELD_VFX_SCALE_NONE                          = 0,
	BIO_SHIELD_VFX_SCALE_TO_OWNER                      = 1,
	BIO_SHIELD_VFX_SCALE_MAX                           = 2
};*/

// Enum SFXGame.BioShieldView.EBioShieldVFXOrientation
/*enum EBioShieldVFXOrientation
{
	BIO_SHIELD_VFX_ORIENTATION_IMPACT_NORMAL           = 0,
	BIO_SHIELD_VFX_ORIENTATION_OWNER_ORIENTATION       = 1,
	BIO_SHIELD_VFX_ORIENTATION_MAX                     = 2
};*/

// Enum SFXGame.BioShieldView.EBioShieldVFXPosition
/*enum EBioShieldVFXPosition
{
	BIO_SHIELD_VFX_POSITION_IMPACT_POINT               = 0,
	BIO_SHIELD_VFX_POSITION_OWNER_LOCATION             = 1,
	BIO_SHIELD_VFX_POSITION_BOUNDING_BOX_BASE          = 2,
	BIO_SHIELD_VFX_POSITION_MAX                        = 3
};*/

// Enum SFXGame.BioShieldView.EBioShieldEvent
/*enum EBioShieldEvent
{
	BIO_SHIELD_EVENT_FULLY_CHARGED                     = 0,
	BIO_SHIELD_EVENT_PENETRATED                        = 1,
	BIO_SHIELD_EVENT_IMPACT                            = 2,
	BIO_SHIELD_EVENT_EMP                               = 3,
	BIO_SHIELD_EVENT_SHUT_DOWN                         = 4,
	BIO_SHIELD_EVENT_RESET                             = 5,
	BIO_SHIELD_EVENT_COUNT                             = 6,
	BIO_SHIELD_EVENT_MAX                               = 7
};*/

// Enum SFXGame.BioSkillGame_Handler.ESkillGameButtons
/*enum ESkillGameButtons
{
	SKILL_GAME_BUTTON_A                                = 0,
	SKILL_GAME_BUTTON_B                                = 1,
	SKILL_GAME_BUTTON_X                                = 2,
	SKILL_GAME_BUTTON_Y                                = 3,
	SKILL_GAME_BUTTON_MAX                              = 4
};*/

// Enum SFXGame.BioSoundNodeFootsteps.eFootStepType
/*enum eFootStepType
{
	FST_Heel                                           = 0,
	FST_Toe                                            = 1,
	FST_VFX                                            = 2,
	FST_MAX                                            = 3
};*/

// Enum SFXGame.BioSubtitles.ESubtitlesRenderMode
/*enum ESubtitlesRenderMode
{
	SUBTITLE_RENDER_NONE                               = 0,
	SUBTITLE_RENDER_DEFAULT                            = 1,
	SUBTITLE_RENDER_TOP                                = 2,
	SUBTITLE_RENDER_BOTTOM                             = 3,
	SUBTITLE_RENDER_AMBIENT                            = 4,
	SUBTITLE_RENDER_LOADSCREEN                         = 5,
	SUBTITLE_RENDER_MAX                                = 6
};*/

// Enum SFXGame.BioTalentImporter.EBioCharacterImporterTalent2DA
/*enum EBioCharacterImporterTalent2DA
{
	TALENT_IMPORTER_2DA_TALENT_DEPRECATED              = 0,
	TALENT_IMPORTER_2DA_TALENT_TREE_DEPRECATED         = 1,
	TALENT_IMPORTER_2DA_TALENT_POOL_DEPRECATED         = 2,
	TALENT_IMPORTER_2DA_TALENT_EFFECT_LEVELS           = 3,
	TALENT_IMPORTER_2DA_TALENT_GUI                     = 4,
	TALENT_IMPORTER_2DA_BONUS_TALENTS                  = 5,
	TALENT_IMPORTER_2DA_MAX                            = 6
};*/

// Enum SFXGame.SFXCameraModifier_ScreenShake.EShakeParam
/*enum EShakeParam
{
	ESP_OffsetRandom                                   = 0,
	ESP_OffsetZero                                     = 1,
	ESP_MAX                                            = 2
};*/

// Enum SFXGame.BioWp_ActionStation.ePoses
/*enum ePoses
{
	Sit                                                = 0,
	Crouch                                             = 1,
	Tele                                               = 2,
	ePoses_MAX                                         = 3
};*/

// Enum SFXGame.SFXGameModeBase.EGameModePriority
/*enum EGameModePriority
{
	ModePriority_Base                                  = 0,
	ModePriority_CheatMenu                             = 1,
	ModePriority_Conversation                          = 2,
	ModePriority_Menus                                 = 3,
	ModePriority_Popup                                 = 4,
	ModePriority_MAX                                   = 5
};*/

// Enum SFXGame.SFXLoadMovieManager.LoadingMovieState
/*enum LoadingMovieState
{
	LMS_NotPlaying                                     = 0,
	LMS_Playing                                        = 1,
	LMS_MAX                                            = 2
};*/

// Enum SFXGame.SFXSFHandler_PhotoMode.PhotoModeOptionType
/*enum PhotoModeOptionType
{
	PhotoOption_CameraMode                             = 0,
	PhotoOption_Roll                                   = 1,
	PhotoOption_FocalLength                            = 2,
	PhotoOption_DOF                                    = 3,
	PhotoOption_DOFDistance                            = 4,
	PhotoOption_FStop                                  = 5,
	PhotoOption_DOFIntensity                           = 6,
	PhotoOption_Saturation                             = 7,
	PhotoOption_Brightness                             = 8,
	PhotoOption_Contrast                               = 9,
	PhotoOption_Filters                                = 10,
	PhotoOption_BloomIntensity                         = 11,
	PhotoOption_BloomThreshold                         = 12,
	PhotoOption_FilmGrain                              = 13,
	PhotoOption_FilmGrainStrength                      = 14,
	PhotoOption_Vignette                               = 15,
	PhotoOption_HidePlayer                             = 16,
	PhotoOption_HideParty                              = 17,
	PhotoOption_HideEnemies                            = 18,
	PhotoOption_HideNPCs                               = 19,
	PhotoOption_HideVehicle                            = 20,
	PhotoOption_MAX                                    = 21
};*/

// Enum SFXGame.SFXTelemetry.ETelemetryGameDataType
/*enum ETelemetryGameDataType
{
	GameDataType_Load                                  = 0,
	GameDataType_Save                                  = 1,
	GameDataType_AutoSave                              = 2,
	GameDataType_ChapterSave                           = 3,
	GameDataType_EndGame                               = 4,
	GameDataType_Unknown                               = 5,
	GameDataType_MAX                                   = 6
};*/

// Enum SFXGame.SFXTelemetry.ETelemetryLogoutReason
/*enum ETelemetryLogoutReason
{
	LogoutStatus_Normal                                = 0,
	LogoutStatus_Error                                 = 1,
	LogoutStatus_OptOutTelemetry                       = 2,
	LogoutStatus_Unknown                               = 3,
	LogoutStatus_MAX                                   = 4
};*/

// Enum SFXGame.SFXTelemetry.ETelemetryLoginStatus
/*enum ETelemetryLoginStatus
{
	LoginStatus_Success                                = 0,
	LoginStatus_Error                                  = 1,
	LoginStatus_Cancel                                 = 2,
	LoginStatus_Unknown                                = 3,
	LoginStatus_MAX                                    = 4
};*/

// Enum SFXGame.SFXTelemetry.EBootEndReason
/*enum EBootEndReason
{
	BootEndReason_Normal                               = 0,
	BootEndReason_Error                                = 1,
	BootEndReason_OptOutTelemetry                      = 2,
	BootEndReason_Unknown                              = 3,
	BootEndReason_MAX                                  = 4
};*/

// Enum SFXGame.SFXTelemetryGameSession.EGameEndReason
/*enum EGameEndReason
{
	GameEndReason_Leave                                = 0,
	GameEndReason_GameEnd                              = 1,
	GameEndReason_Restart                              = 2,
	GameEndReason_Error                                = 3,
	GameEndReason_OptOutTelemetry                      = 4,
	GameEndReason_Unknown                              = 5,
	GameEndReason_MAX                                  = 6
};*/

// Enum SFXGame.SFXWeaponStatsBase.FireModes
/*enum FireModes
{
	FireMode_None                                      = 0,
	FireMode_SemiAuto                                  = 1,
	FireMode_FullAuto                                  = 2,
	FireMode_Burst                                     = 3,
	FireMode_Ramping                                   = 4,
	FireMode_MAX                                       = 5
};*/

// Enum SFXGame.UnVince.EBioTestSeverity
/*enum EBioTestSeverity
{
	BIOSEVERITY_FATAL                                  = 0,
	BIOSEVERITY_ERROR                                  = 1,
	BIOSEVERITY_WARNING                                = 2,
	BIOSEVERITY_INFORMATION                            = 3,
	BIOSEVERITY_MAX                                    = 4
};*/


/*
# ========================================================================================= #
# Classes
# ========================================================================================= #
*/

// Class SFXGame.BioActorFactoryPhysicsActor
// 0x0003 (0x00D4 - 0x00D1)
class UBioActorFactoryPhysicsActor : public UActorFactoryRigidBody
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAppearanceVehicleSettings
// 0x0004 (0x0074 - 0x0070)
class UBioAppearanceVehicleSettings : public UComponent
{
public:
	int                                                m_nMaterialConfig;                                		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioCoverVolume
// 0x0000 (0x02C4 - 0x02C4)
class ABioCoverVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioDEBUGMarker
// 0x000C (0x0290 - 0x0284)
class ABioDEBUGMarker : public AActor
{
public:
	class UBioDEBUGMarkerComponent*                    Markers;                                          		// 0x0284 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              TimeTillDestroy;                                  		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventClear ( );
	void eventAddMarker ( struct FVector const& _Start, int _size, unsigned char _R, unsigned char _G, unsigned char _B );
	void eventAddLine ( struct FVector const& _Start, struct FVector const& _End, unsigned char _R, unsigned char _G, unsigned char _B );
	void eventTick ( float DeltaTime );
};

// Class SFXGame.BioDEBUGMarkerComponent
// 0x0050 (0x0270 - 0x0220)
class UBioDEBUGMarkerComponent : public UPrimitiveComponent
{
public:
	TArray<struct FLineData>                           Lines;                                            		// 0x0220 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FLineData>                           Arrows;                                           		// 0x0230 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FMarkerData>                         Markers;                                          		// 0x0240 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FMarkerData>                         Diamonds;                                         		// 0x0250 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FMarkerData>                         Circles;                                          		// 0x0260 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventClearMarkers ( );
	void eventClearCircles ( );
	void eventClearDiamonds ( );
	void eventClearArrows ( );
	void eventClearLines ( );
	void eventClear ( );
	void eventAddCircles ( struct FVector const& _Start, int _size, unsigned char _R, unsigned char _G, unsigned char _B );
	void eventAddDiamond ( struct FVector const& _Start, int _size, unsigned char _R, unsigned char _G, unsigned char _B );
	void eventAddMarker ( struct FVector const& _Start, int _size, unsigned char _R, unsigned char _G, unsigned char _B );
	void eventAddArrows ( struct FVector const& _Start, struct FVector const& _End, unsigned char _R, unsigned char _G, unsigned char _B );
	void eventAddLine ( struct FVector const& _Start, struct FVector const& _End, unsigned char _R, unsigned char _G, unsigned char _B );
};

// Class SFXGame.BioDamageType
// 0x0014 (0x00D4 - 0x00C0)
class UBioDamageType : public UDamageType
{
public:
	class UBioDeathVFX*                                m_pDeathVFX;                                      		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioAttributesDamage*                        m_pAttributes;                                    		// 0x00C8 (0x0008) [0x0000000004420009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      m_bIsInitialized : 1;                             		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetDeathVFX ( class UBioDeathVFX* pDeathVFX );
	class UBioDeathVFX* GetDeathVFX ( );
	void SetAttributes ( class UBioAttributesDamage* pAttributes );
	class UBioAttributesDamage* GetAttributes ( );
	void InitializeDamageType ( class UBioAttributesDamage* pAttributes, class UBioDeathVFX* pDeathVFX );
};

// Class SFXGame.BioDestinationArrow
// 0x0008 (0x028C - 0x0284)
class ABioDestinationArrow : public AActor
{
public:
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x0284 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventSetArrowColor ( unsigned char clr );
};

// Class SFXGame.BioEventDispatcher
// 0x0048 (0x00A8 - 0x0060)
class UBioEventDispatcher : public UObject
{
public:
	struct FMap_Mirror                                 m_mEventSubscriptions;                            		// 0x0060 (0x0048) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Dispatch ( struct SFXName oEventName );
	bool Unsubscribe ( struct SFXName oEventName, class UObject* oSubscriber );
	bool Subscribe ( struct SFXName oEventName, class UObject* oSubscriber );
};

// Class SFXGame.BioFollowMarker
// 0x0000 (0x0284 - 0x0284)
class ABioFollowMarker : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGameReplicationInfo
// 0x0014 (0x0318 - 0x0304)
class ABioGameReplicationInfo : public AGameReplicationInfo
{
public:
	class UClass*                                      DifficultyHandlerClass;                           		// 0x0304 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class USFXDifficultyHandler*                       DifficultyHandler;                                		// 0x030C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      Temp : 1;                                         		// 0x0314 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void PostBeginPlay ( );
};

// Class SFXGame.BioGamerProfile
// 0x02A0 (0x0300 - 0x0060)
class UBioGamerProfile : public UObject
{
public:
	TArray<struct FProfileBOOL>                        BoolVariables;                                    		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FProfileINT>                         IntVariables;                                     		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FProfileFLOAT>                       FloatVariables;                                   		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FPlotManagerAchievement>             PlotManagerAchievementMaps;                       		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FProfilePlaythrough>                 lstPlaythroughs;                                  		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FProfileRewardStat>                  RewardStats;                                      		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<int>                                        anAchievementStates;                              		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FBonusTalent>                        aUnlockedBonusTalents;                            		// 0x00D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FBonusTalent>                        BonusWeaponTalents;                               		// 0x00E0 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<struct FBonusTalent>                        aPassiveBonusTalents;                             		// 0x00F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<int>                                        IntStats;                                         		// 0x0100 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<float>                                      FloatStats;                                       		// 0x0110 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FCharacterProfile>                   lstCharacterProfiles;                             		// 0x0120 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sLastPlayedCharacterID;                         		// 0x0130 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sLastSaveGame;                                  		// 0x0140 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<unsigned char>                              KeyBindings;                                      		// 0x0150 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FGameOptions                                m_GameOptions;                                    		// 0x0160 (0x00B0) [0x0000000000000000]              
	struct SFXName                                     m_nmSKU;                                          		// 0x0210 (0x0008) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	class UBio2DA*                                     RewardsTable;                                     		// 0x0218 (0x0008) [0x0000000000000000]              
	int                                                m_DefaultGammaPostProcessTemplate;                		// 0x0220 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultCombatDifficulty;                       		// 0x0224 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultDialogMode;                             		// 0x0228 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultAutoLevelUp;                            		// 0x022C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nLegacyLevelUpMode;                             		// 0x0230 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultAutoEquip;                              		// 0x0234 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultTutorialFlag;                           		// 0x0238 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultSubTitles;                              		// 0x023C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultAutoPauseEnemySighted;                  		// 0x0240 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultAutoPauseSquadMemberDown;               		// 0x0244 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultMusicVolume;                            		// 0x0248 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultFXVolume;                               		// 0x024C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultDialogVolume;                           		// 0x0250 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultSouthpawFlag;                           		// 0x0254 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultTargetingAssistMode;                    		// 0x0258 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_nDefaultTargetingAssistModifierHigh;            		// 0x025C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_nDefaultTargetingAssistModifierNormal;          		// 0x0260 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_nDefaultTargetingAssistModifierLow;             		// 0x0264 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultHorizontalCombatSensitivity;            		// 0x0268 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultVerticalCombatSensitivity;              		// 0x026C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultHorizontalExplorationSensitivity;       		// 0x0270 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultVerticalExplorationSensitivity;         		// 0x0274 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultControllerSensativityLow;               		// 0x0278 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultControllerSensativityMedium;            		// 0x027C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultControllerSensativityHigh;              		// 0x0280 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultRumbleFlag;                             		// 0x0284 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultAutoPauseBleedOut;                      		// 0x0288 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultMotionBlur;                             		// 0x028C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultFilmGrain;                              		// 0x0290 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultSquadPowerUse;                          		// 0x0294 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultAutoSave;                               		// 0x0298 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultAntiAliasing;                           		// 0x029C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultTextureDetailLevel;                     		// 0x02A0 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultDynamicResolution;                      		// 0x02A4 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultAmbientOcclusion;                       		// 0x02A8 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultBrightness;                             		// 0x02AC (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultHDRBrightness;                          		// 0x02B0 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultHDRContrast;                            		// 0x02B4 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nAchievedCombatDifficultyOverride;              		// 0x02B8 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultStickConfiguration;                     		// 0x02BC (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultTriggerConfiguration;                   		// 0x02C0 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                ParagonPlotIndex;                                 		// 0x02C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RenegadePlotIndex;                                		// 0x02C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PrincipledAchievementThreshold;                   		// 0x02CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nDefaultMouseSensitivity;                       		// 0x02D0 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultSensePerc;                              		// 0x02D4 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_bDefaultMonitorIndex;                           		// 0x02D8 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDefaultFramerateIndex;                         		// 0x02DC (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nLastUsedPlaythroughID;                         		// 0x02E0 (0x0004) [0x0000000000000000]              
	int                                                m_nMostMoneyAccumulated;                          		// 0x02E4 (0x0004) [0x0000000000000000]              
	int                                                m_nMostPlaythroughPlayerKills;                    		// 0x02E8 (0x0004) [0x0000000000000000]              
	int                                                m_nLowestPlaythroughPlayerDeaths;                 		// 0x02EC (0x0004) [0x0000000000000000]              
	float                                              m_fFastestPlaythroughTime;                        		// 0x02F0 (0x0004) [0x0000000000000000]              
	int                                                m_DefaultSaveDeviceId;                            		// 0x02F4 (0x0004) [0x0000000000000000]              
	int                                                m_BioProfileSaveDeviceId;                         		// 0x02F8 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bDefaultYAxisInverted : 1;                      		// 0x02FC (0x0004) [0x0000000000006000] [0x00000001] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bDefaultVsync : 1;                              		// 0x02FC (0x0004) [0x0000000000006000] [0x00000002] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bDefaultShadowDetailLevel : 1;                  		// 0x02FC (0x0004) [0x0000000000006000] [0x00000004] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bDefaultHDREnable : 1;                          		// 0x02FC (0x0004) [0x0000000000006000] [0x00000008] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bDefaultCameraRelativeSteering : 1;             		// 0x02FC (0x0004) [0x0000000000006000] [0x00000010] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bInvalidProfileCreator : 1;                     		// 0x02FC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bGamerProfileDeviceHasBeenRemoved : 1;          		// 0x02FC (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UpdateRichPresence ( );
	void UpdateSoundOptions ( );
	void ApplyGraphicsOptions ( struct FGameOptions const& Options );
	void UpdateGraphicsOptions ( );
	void UpdateAllOptions ( unsigned long bUpdateRichPresence );
	void eventDuplicateGameOptions ( struct FGameOptions* destOptions );
	void eventOverwiteGameOptions ( struct FGameOptions const& sourceOptions, unsigned long bUpdateRichPresence );
	float GetTargetingAssistModifier ( );
	void GetOptionEx ( struct FGameOptions const& io_oGameOptions, int i_nOptionType, int* i_nOptionValue );
	void GetOption ( int i_nOptionType, int* i_nOptionValue );
	void SetOptionEx ( int i_nOptionType, int i_nOptionValue, unsigned long i_bSuppressUpdate, struct FGameOptions* io_oGameOptions );
	void SetOption ( int i_nOptionType, int i_nOptionValue, unsigned long i_bSuppressUpdate );
	int GetCombatDifficulty ( );
	void SetCombatDifficulty ( int i_Template );
	void DumpAchievementStats ( );
	int GetGammaPostProcessTemplate ( );
	void SetGammaPostProcessTemplate ( int i_Template );
	void SelectDefaultStorageDevice ( );
	int GetDefaultStorageDevice ( );
	void SetDefaultStorageDevice ( int i_DeviceId );
	int GetBioProfileStorageDevice ( );
	void SetBioProfileStorageDevice ( int i_DeviceId );
	void SetYAxisInverted ( unsigned long bInverted );
	bool GetYAxisInverted ( );
	void GetAllUnlockedBonusTalentInfo ( struct SFXName nmCharClass, TArray<struct FUnlockedBonusTalentInfo>* aUnlockedBonusTalentInfo );
	void AwardAllPassiveBonusTalents ( );
	void UpdateAchievementState ( int nAchievementID, unsigned long bEarned, unsigned long bUpdatePlotState, unsigned long bAwardBonusTalent, unsigned long bSaveProfile );
	void GetDefaultValues ( struct FGameOptions* io_Options );
	void ResetToDefaults ( unsigned long bUpdateRichPresence );
	void SortAchievementInfo ( TArray<struct FAchievementInfo>* aAchievementList );
	void GetAllAchievementInfo ( TArray<struct FAchievementInfo>* aAchievementList );
	int GetAchievementID ( int Index );
	bool GetIsAchievementEarned ( int AchievementId );
	void UpdateAchievements ( TArray<struct FAchievementDetails> const& Achievements, class ABioPlayerController* PC );
	bool UpdateCharacterProfilePawnDataEx ( class ABioPawn* i_playerPawn, unsigned long i_bUpdateFirstName, int i_oHoursPlayed, int i_oMinPlayed, int i_oSecPlayed, struct FCharacterProfile* sCharProfile );
	bool UpdateCharacterProfilePawnData ( FString const& sCharacterID, class ABioPawn* i_playerPawn, int i_oHoursPlayed, int i_oMinPlayed, int i_oSecPlayed, unsigned long i_bUpdateFirstName );
	bool DeleteCharacterProfile ( FString const& sCharacterID );
	int GetCharacterProfileIndex ( FString const& sCharacterID );
	void SetCharacterProfile ( FString const& sCharacterID, struct FCharacterProfile const& i_CharProfile, unsigned long i_bAddProfileIfNotExist );
	struct FCharacterProfile GetCharacterProfile ( FString const& sCharacterID );
	bool SetCharacterProfileLastPlayedSlot ( FString const& sCharacaterID, int nLastPlayedSlot );
	FString ConvertToValidCharacterID ( FString const& sCharacterName, unsigned long bConvertAccentCharacters );
	FString CreateNewCharacterProfile ( FString const& sCharacterName );
	bool SetFloatStatistic ( int nIndex, float fValue );
	float InrementFloatStatistic ( int nIndex, float fAmount );
	float GetFloatStatistic ( int nIndex );
	bool SetIntStatistic ( int nIndex, int nValue );
	int IncrementIntStatistic ( int nIndex, int nAmount );
	int GetIntStatistic ( int nIndex );
	int GetHighestDifficultyCompleted ( );
	bool GetPlaythroughCompleted ( int nDifficulty );
	int GetNumberOfPlaythroughsCompleted ( );
	bool UpdateEndGameGamerProfileStats ( unsigned long bLogStats );
	void GetUnlockedTalentTrees ( TArray<int>* aUnlockedTalentTrees );
	int GetRewardStatUnlockedAt ( FString const& sStatisticName );
	FString GetRewardStatName ( int nAchievementID );
	bool GetIsRewardStatUnlocked ( FString const& sStatisticName );
	int IncrementRewardStat ( FString const& sStatisticName, int nAmount );
	bool SetRewardStat ( FString const& sStatisticName, int nValue );
	bool RestoreGamerProfilePlotManagerVariables ( );
	bool SetGamerProfilePlotManagerVariables ( );
};

// Class SFXGame.BioLayers
// 0x0028 (0x0094 - 0x006C)
class UBioLayers : public UBioBaseComponent
{
public:
	float                                              m_aEntry[ 0xA ];                                  		// 0x006C (0x0028) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioLoadingMovie
// 0x0014 (0x0074 - 0x0060)
class UBioLoadingMovie : public UObject
{
public:
	FString                                            MovieName;                                        		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                LoopBackFrame;                                    		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioObject
// 0x0048 (0x00B4 - 0x006C)
class UBioObject : public UBioBaseComponent
{
public:
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x006C (0x0048) UNKNOWN PROPERTY: MapProperty SFXGame.BioObject.m_ClassCache

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool ValidateOwnershipSemantics ( class UObject* Target, unsigned long isVerbose, int recurrence );
	void ParseIntoArray ( FString const& sDelimitedStrings, FString const& sDelimiter, unsigned long bCullEmptyStrings, TArray<FString>* aString );
	void ParseIntoArrayWS ( FString const& whitespaceDelimitedStrings, TArray<FString>* Strings );
	bool GetEnumValue ( class UClass* clsEnumDefiner, struct SFXName nmEnumField, struct SFXName nmEnumValue, unsigned char* cEnumValue );
	class UClass* FindClass ( struct SFXName nmClass );
};

// Class SFXGame.BioPathNodeVolume
// 0x001E (0x02E2 - 0x02C4)
class ABioPathNodeVolume : public AVolume
{
public:
	float                                              fMaxNodeSeparation;                               		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMargin;                                          		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fNodeTargetRadius;                                		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMaxSlope;                                        		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nLevels;                                          		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLevelHeight;                                     		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDeleteNodesOnPopulate : 1;                       		// 0x02DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDoNotGenerateGroundNodes : 1;                    		// 0x02DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      eAlignment;                                       		// 0x02E0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ePathNodeGenerator;                               		// 0x02E1 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioPhysicsSounds
// 0x0034 (0x0094 - 0x0060)
class UBioPhysicsSounds : public UObject
{
public:
	FString                                            m_sPhysicsSoundEntity;                            		// 0x0060 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<struct FBioPhysicsSoundsInfo>               m_aAudioTracks;                                   		// 0x0070 (0x0010) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	float                                              m_fMaxMass;                                       		// 0x0080 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMaxSpeed;                                      		// 0x0084 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMinTimeBetweenSoundByActor;                    		// 0x0088 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nMaxSimultaneousSounds;                         		// 0x008C (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bPhysicsSoundDebug : 1;                         		// 0x0090 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool RequestSound ( int nPriority, class UPrimitiveComponent* oComp0, class UPrimitiveComponent* oComp1, TArray<struct FRigidBodyContactInfo>* ContactInfos );
	void Initialize ( );
};

// Class SFXGame.BioPowerScript
// 0x0020 (0x0080 - 0x0060)
class UBioPowerScript : public UObject
{
public:
	struct FVector                                     m_vWorldImpactLocation;                           		// 0x0060 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vWorldImpactNormal;                             		// 0x006C (0x000C) [0x0000000000000000]              
	class UBioPower*                                   m_oPower;                                         		// 0x0078 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool PlayForceFeedback ( class AActor* oCaster, class AActor* oImpacted );
	bool PlayGuiSound ( struct SFXName nmSound );
	bool GetFloorLocation ( struct FVector const& vStartLocation, struct FVector* vFloorLocation );
	bool eventAdjustCooldown ( float* fCoolDownTime );
	bool eventOnImpact ( class AActor* oCaster, float fCasterStability, class AActor* oImpacted, int nPreviouslyImpacted );
	bool eventEndPhase ( unsigned char ePhase, class AActor* oCaster );
	bool eventStartPhase ( unsigned char ePhase, class AActor* oCaster, float fDuration );
	bool eventCanStartPower ( class AActor* oCaster );
	void eventInitializePowerScript ( class UBioPower* pPower );
};

// Class SFXGame.BioRadarMapBoundaries
// 0x000C (0x0290 - 0x0284)
class ABioRadarMapBoundaries : public AActor
{
public:
	struct FVector                                     m_vBoundarySize;                                  		// 0x0284 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_PopupLootGui
// 0x000C (0x0104 - 0x00F8)
class UBioSeqAct_PopupLootGui : public USequenceAction
{
public:
	int                                                m_nTreasureID;                                    		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nOverrideLevel;                                 		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bSupressLootGui : 1;                            		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class SFXGame.BioSocketSupermodel
// 0x0010 (0x0434 - 0x0424)
class UBioSocketSupermodel : public USkeletalMesh
{
public:
	TArray<class USkeletalMesh*>                       Dependents;                                       		// 0x0424 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSpriteTranslucentComponent
// 0x0034 (0x0274 - 0x0240)
class UBioSpriteTranslucentComponent : public USpriteComponent
{
public:
	struct FLinearColor                                CachedColor;                                      		// 0x0240 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	float                                              TranslucentScale;                                 		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDelayTime;                                       		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFadeInTime;                                      		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDuration;                                        		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFadeOutTime;                                     		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fIntensityCurveAccumulator;                       		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fScaleCurveAccumulator;                           		// 0x0268 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fBrightnessCurveAccumulator;                      		// 0x026C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bRenderOcclusionOnly : 1;                         		// 0x0270 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsOccluder : 1;                                  		// 0x0270 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSunFlareComponent
// 0x0020 (0x0294 - 0x0274)
class UBioSunFlareComponent : public UBioSpriteTranslucentComponent
{
public:
	struct FLinearColor                                FlareTint;                                        		// 0x0274 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              Intensity;                                        		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Distance;                                         		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BrightPercent;                                    		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UseParentOverrideTint : 1;                        		// 0x0290 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      IsHaloComponent : 1;                              		// 0x0290 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSunFlareStreakComponent
// 0x0030 (0x02A4 - 0x0274)
class UBioSunFlareStreakComponent : public UBioSpriteTranslucentComponent
{
public:
	struct FLinearColor                                FlareTint;                                        		// 0x0274 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              Intensity;                                        		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Distance;                                         		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HorizontalOffset;                                 		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HorizontalMoveRate;                               		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VerticalOffset;                                   		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VerticalMoveRate;                                 		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BrightPercent;                                    		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UseParentOverrideTint : 1;                        		// 0x02A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      IsHaloComponent : 1;                              		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSunActor
// 0x012C (0x03B0 - 0x0284)
class ABioSunActor : public AActor
{
public:
	struct FRawDistributionFloat                       IntensityCurve;                                   		// 0x0284 (0x0024) [0x00000000044A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRawDistributionFloat                       ScaleCurve;                                       		// 0x02A8 (0x0024) [0x00000000044A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRawDistributionFloat                       BrightnessCurve;                                  		// 0x02CC (0x0024) [0x00000000044A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FLinearColor                                SunTint;                                          		// 0x02F0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UBioSpriteTranslucentComponent*              SunSprite;                                        		// 0x0300 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioSunFlareComponent*                       HaloSprite;                                       		// 0x0308 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioSunFlareComponent*                       FlareSprite0;                                     		// 0x0310 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioSunFlareComponent*                       FlareSprite1;                                     		// 0x0318 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioSunFlareComponent*                       FlareSprite2;                                     		// 0x0320 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioSunFlareComponent*                       FlareSprite3;                                     		// 0x0328 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioSunFlareComponent*                       FlareSprite4;                                     		// 0x0330 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioSunFlareComponent*                       FlareSprite5;                                     		// 0x0338 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioSunFlareComponent*                       FlareSprite6;                                     		// 0x0340 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioSunFlareComponent*                       FlareSprite7;                                     		// 0x0348 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioSunFlareComponent*                       FlareSprite8;                                     		// 0x0350 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioSunFlareComponent*                       FlareSprite9;                                     		// 0x0358 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioSunFlareStreakComponent*                 StreakSprite0;                                    		// 0x0360 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioSunFlareStreakComponent*                 StreakSprite1;                                    		// 0x0368 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioSunFlareStreakComponent*                 StreakSprite2;                                    		// 0x0370 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioSunFlareStreakComponent*                 StreakSprite3;                                    		// 0x0378 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioSunFlareStreakComponent*                 StreakSprite4;                                    		// 0x0380 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioSunFlareStreakComponent*                 StreakSprite5;                                    		// 0x0388 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              FocusDistance;                                    		// 0x0390 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AutoScaleDistance;                                		// 0x0394 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fIntensityCurveAccumulator;                       		// 0x0398 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fScaleCurveAccumulator;                           		// 0x039C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fBrightnessCurveAccumulator;                      		// 0x03A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fDyingFadePercent;                                		// 0x03A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fFadeTime;                                        		// 0x03A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      UseBaseLightTint : 1;                             		// 0x03AC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      HideAllFlaresOverride : 1;                        		// 0x03AC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      ViewDependentIntensity : 1;                       		// 0x03AC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAnimateIntensity : 1;                            		// 0x03AC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bAnimateScale : 1;                                		// 0x03AC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAnimateBrightness : 1;                           		// 0x03AC (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bDying : 1;                                       		// 0x03AC (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioTacticalMoveToIndicator
// 0x0010 (0x0294 - 0x0284)
class ABioTacticalMoveToIndicator : public AActor
{
public:
	class UParticleSystemComponent*                    ParticleSystem;                                   		// 0x0284 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              m_fFadeInTime;                                    		// 0x028C (0x0004) [0x0000000000000000]              
	float                                              m_fTimePassed;                                    		// 0x0290 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioTriggerStream
// 0x0020 (0x02E4 - 0x02C4)
class ABioTriggerStream : public ATriggerVolume
{
public:
	TArray<struct FBioStreamingState>                  StreamingStates;                                  		// 0x02C4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UGFxMovieInfo*                               m_oAreaMapOverride;                               		// 0x02D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_StoredStateIndex;                               		// 0x02DC (0x0004) [0x0000000000000000]              
	int                                                m_nPriorityLevel;                                 		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector const& HitLocation, struct FVector const& HitNormal );
	void ForegroundStreamingDone ( TArray<class USequence*> const& Sequences, class APawn* PlayerPawn );
	void BackgroundStreamingDone ( TArray<class USequence*> const& Sequences, class APawn* PlayerPawn );
	void Retouch ( );
	void DoStasis ( class AActor* Touched, unsigned long bTouched );
	void DoUntouch ( class AActor* Other );
	void DoTouch ( );
};

// Class SFXGame.Bio_Appr_Character_Base_Settings
// 0x0004 (0x0074 - 0x0070)
class UBio_Appr_Character_Base_Settings : public UComponent
{
public:
	unsigned long                                      m_bIsShowingMissingResources : 1;                 		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.Bio_Appr_Character_Body_Settings
// 0x0016 (0x008A - 0x0074)
class UBio_Appr_Character_Body_Settings : public UBio_Appr_Character_Base_Settings
{
public:
	class UBio_Appr_Character_HeadGear_Settings*       m_oHeadGearSettings;                              		// 0x0074 (0x0008) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	int                                                m_nModelVariant;                                  		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nMaterialConfig;                                		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bIsHeadGearLoaded : 1;                          		// 0x0084 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bIsHeadGearHidden : 1;                          		// 0x0084 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      m_eArmorType;                                     		// 0x0088 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eVisualOverride;                                		// 0x0089 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.Bio_Appr_Character_Hair_Settings
// 0x0004 (0x0078 - 0x0074)
class UBio_Appr_Character_Hair_Settings : public UBio_Appr_Character_Base_Settings
{
public:
	int                                                m_nMaterial;                                      		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.Bio_Appr_Character_HeadGear_Settings
// 0x0025 (0x0099 - 0x0074)
class UBio_Appr_Character_HeadGear_Settings : public UBio_Appr_Character_Base_Settings
{
public:
	struct FBioHeadGearComponentSettings               m_visor;                                          		// 0x0074 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FBioHeadGearComponentSettings               m_facePlate;                                      		// 0x0080 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nModelSpec;                                     		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nMaterialConfig;                                		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bUseBodyMaterialConfig : 1;                     		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      m_eVisualOverride;                                		// 0x0098 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.Bio_Appr_Character_Head_Settings
// 0x0010 (0x0084 - 0x0074)
class UBio_Appr_Character_Head_Settings : public UBio_Appr_Character_Base_Settings
{
public:
	class UBio_Appr_Character_Hair_Settings*           m_oHairSettings;                                  		// 0x0074 (0x0008) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	int                                                m_nMaterialConfig;                                		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nHairAppearance;                                		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.Bio_Appr_Character_Settings
// 0x0018 (0x008C - 0x0074)
class UBio_Appr_Character_Settings : public UBio_Appr_Character_Base_Settings
{
public:
	class UBio_Appr_Character_Body_Settings*           m_oBodySettings;                                  		// 0x0074 (0x0008) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UBio_Appr_Character_Head_Settings*           m_oHeadSettings;                                  		// 0x007C (0x0008) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	int                                                m_nHeadAppearance;                                		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bIsHeadHidden : 1;                              		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bIsHeadLoaded : 1;                              		// 0x0088 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXDifficultyHandler
// 0x006D (0x00CD - 0x0060)
class USFXDifficultyHandler : public UObject
{
public:
	TArray<struct FDifficultySettings>                 Level1DifficultyData;                             		// 0x0060 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<struct FDifficultySettings>                 Level2DifficultyData;                             		// 0x0070 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<struct FDifficultySettings>                 Level3DifficultyData;                             		// 0x0080 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<struct FDifficultySettings>                 Level4DifficultyData;                             		// 0x0090 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<struct FDifficultySettings>                 Level5DifficultyData;                             		// 0x00A0 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                PlayerLevel;                                      		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxLevel;                                         		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CoverDamageReduction;                             		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HenchDamageTaken;                                 		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PlayerDamageTaken;                                		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              EnemyDamageTaken;                                 		// 0x00C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bNeedsUpdate : 1;                                 		// 0x00C8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      CurrentDifficulty;                                		// 0x00CC (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Update ( );
	float GetFloatAtDifficulty ( struct SFXName PropertyName, struct SFXName DifficultyCategory, unsigned char Difficulty, float Score );
	float GetFloat ( struct SFXName PropertyName, struct SFXName DifficultyCategory );
	bool GetBool ( struct SFXName PropertyName, struct SFXName DifficultyCategory );
	class USFXDifficultyHandler* GetDifficultyHandler ( );
};

// Class SFXGame.SFXDynamicEdgeMarker
// 0x0028 (0x02AC - 0x0284)
class ASFXDynamicEdgeMarker : public AActor
{
public:
	struct FVector                                     StandingLeanOffset;                               		// 0x0284 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CrouchLeanOffset;                                 		// 0x0290 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UCylinderComponent*                          CylinderComponent;                                		// 0x029C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              FireTraceDist;                                    		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInitialized : 1;                                 		// 0x02A8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLeftEdgeSlot : 1;                                		// 0x02A8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bRightEdgeSlot : 1;                               		// 0x02A8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bStandLeanLeft : 1;                               		// 0x02A8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bStandLeanRight : 1;                              		// 0x02A8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bCrouchLeanLeft : 1;                              		// 0x02A8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bCrouchLeanRight : 1;                             		// 0x02A8 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DebugDraw ( );
	void UpdateLeanFlags ( unsigned char Action );
	struct FVector GetViewPoint ( unsigned char Type, unsigned char Action );
	bool eventCanLean ( );
	void Initialize ( );
	void PostBeginPlay ( );
};

// Class SFXGame.SFXGUIInteraction
// 0x0044 (0x00EC - 0x00A8)
class USFXGUIInteraction : public UGFxInteraction
{
public:
	TArray<struct FSFXSFControlToken>                  ControlTokens;                                    		// 0x00A8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<struct FSFXControlTokenAlias>               ControlTokenAliases;                              		// 0x00B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FSFXStringMap>                       StringMappings;                                   		// 0x00C8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<struct FSFXStringMap>                       TutorialStringMappings;                           		// 0x00D8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      ReplaceRegisteredTMWithFullHeightChar : 1;        		// 0x00E8 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void NotifyGameSessionEnded ( );
};

// Class SFXGame.BioBasePlayerController
// 0x000A (0x07C4 - 0x07BA)
class ABioBasePlayerController : public APlayerController
{
public:
	class UBioGrenadeInterfacePlayer*                  m_grenadeInterface;                               		// 0x07BC (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void QuickLoad ( );
	void QuickSave ( );
};

// Class SFXGame.BioPlayerController
// 0x03F4 (0x0BB8 - 0x07C4)
class ABioPlayerController : public ABioBasePlayerController
{
public:
	struct FMap_Mirror                                 m_RadarDataMap;                                   		// 0x07C4 (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct FMap_Mirror                                 m_DamageIndicatorDataMap;                         		// 0x080C (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct FInterpCurveFloat                           PhotoModeSpeedCurve;                              		// 0x0854 (0x0014) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	FString                                            PlayerSquadClass;                                 		// 0x0868 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<class ABioPawn*>                            m_TrilogyAchievementTargets;                      		// 0x0878 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<int>                                        m_anRecoveredRadarIndexes;                        		// 0x0888 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<int>                                        m_anDestroyedPawnIndexesToRecover;                		// 0x0898 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<class AActor*>                              m_aoPotentialRadarObjects;                        		// 0x08A8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<class ABioRadarMapBoundaries*>              m_aoMapBoundaryObjects;                           		// 0x08B8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<class APawn*>                               m_aoDamageCausers;                                		// 0x08C8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<int>                                        m_anRecoveredDamageIndicatorIndexes;              		// 0x08D8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<struct FBioPlayerControllerTwistThresholdSpec> m_aTwistThresholdSpec;                            		// 0x08E8 (0x0010) [0x0000000004420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	TArray<struct FPostProcessInfo>                    PostProcessPresets;                               		// 0x08F8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<struct FBioPPSettingsCallbackData>          m_aPPCallbacks;                                   		// 0x0908 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UClass*                                      SquadClass;                                       		// 0x0918 (0x0008) [0x0000000000000000]              
	struct FBioActionMapping                           m_aActionMap[ 0x6 ];                              		// 0x0920 (0x0078) [0x0000000000002000]              ( CPF_Transient )
	int                                                lstHotKeyPawns[ 0xC ];                            		// 0x0998 (0x0030) [0x0000000000000000]              
	int                                                lstHotKeyEvents[ 0xC ];                           		// 0x09C8 (0x0030) [0x0000000000000000]              
	float                                              m_afLastDisplayLevel[ 0x8 ];                      		// 0x09F8 (0x0020) [0x0000000000000000]              
	struct FBoxSphereBounds                            AimbackBounds;                                    		// 0x0A18 (0x001C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    PrePhotoModeRotation;                             		// 0x0A34 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     PushOffCoverDir;                                  		// 0x0A40 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vLocationRadarArrowPointsTo;                    		// 0x0A4C (0x000C) [0x0000000000000000]              
	struct SFXName                                     MaleStormBreathSoundName;                         		// 0x0A58 (0x0008) [0x0000000000000000]              
	struct SFXName                                     FemaleStormBreathSoundName;                       		// 0x0A60 (0x0008) [0x0000000000000000]              
	struct SFXName                                     StormExhaustionSoundName;                         		// 0x0A68 (0x0008) [0x0000000000000000]              
	class USFXGameModeManager*                         GameModeManager;                                  		// 0x0A70 (0x0008) [0x0000000004002001]              ( CPF_Edit | CPF_Transient | CPF_EditInline )
	class UCylinderComponent*                          PhotoCollision;                                   		// 0x0A78 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct SFXName                                     SquadName;                                        		// 0x0A80 (0x0008) [0x0000000000000000]              
	class APawn*                                       m_oCommandTarget;                                 		// 0x0A88 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USFXTrilogyProfileSettings*                  TrilogyProfileSettings;                           		// 0x0A90 (0x0008) [0x0000000000000000]              
	struct SFXName                                     m_nPauseActionPrevState;                          		// 0x0A98 (0x0008) [0x0000000000000000]              
	class ABioRadarMapBoundaries*                      m_oRadarMapBoundary;                              		// 0x0AA0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioForceFeedbackPlayer*                     m_pForceFeedback;                                 		// 0x0AA8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UBioSFHandler_MessageBox*                    m_CachedMessageBox;                               		// 0x0AB0 (0x0008) [0x0000000000000000]              
	class UBioPlayerSelection*                         m_oPlayerSelection;                               		// 0x0AB8 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              MoveStickIdleThreshold;                           		// 0x0AC0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MoveStickWalkThreshold;                           		// 0x0AC4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MoveStickRunThreshold;                            		// 0x0AC8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MoveWalkModifierBlendTime;                        		// 0x0ACC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              RemappedJoyRight;                                 		// 0x0AD0 (0x0004) [0x0000000000000000]              
	float                                              RemappedJoyUp;                                    		// 0x0AD4 (0x0004) [0x0000000000000000]              
	float                                              RotationSensitivityLow;                           		// 0x0AD8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RotationSensitivityMedium;                        		// 0x0ADC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RotationSensitivityHigh;                          		// 0x0AE0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                RotationSensitivity;                              		// 0x0AE4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                OldIgnoreMoveCount;                               		// 0x0AE8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentStormStamina;                              		// 0x0AEC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StormCooldownTime;                                		// 0x0AF0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxNonCombatStormStamina;                         		// 0x0AF4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxStormStamina;                                  		// 0x0AF8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              StormRegenRateNonCombat;                          		// 0x0AFC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              StormRegenRate;                                   		// 0x0B00 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PhotoModeTetherDistance;                          		// 0x0B04 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              VehiclePhotoModeTetherDistance;                   		// 0x0B08 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PhotoModeCameraSpeed;                             		// 0x0B0C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              VehiclePhotoModeCameraSpeed;                      		// 0x0B10 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CurrentPhotoModeMoveSpeed;                        		// 0x0B14 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMovementWalkRunTrans;                          		// 0x0B18 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMovementWalkUpperMult;                         		// 0x0B1C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fLeaveConvPitch;                                		// 0x0B20 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fMoveToCoverSearchRadius_Short;                 		// 0x0B24 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMoveToCoverSearchRadius_Medium;                		// 0x0B28 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMoveToCoverSearchRadius_Long;                  		// 0x0B2C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMoveToCoverSearchRange_Short;                  		// 0x0B30 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMoveToCoverSearchRange_Medium;                 		// 0x0B34 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMoveToDropDistance;                            		// 0x0B38 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMoveToDelayTime;                               		// 0x0B3C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fTacticalDelayTime;                             		// 0x0B40 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DeadZoneThreshold;                                		// 0x0B44 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CoverBreakTimer;                                  		// 0x0B48 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CoverBreakTimeThreshold;                          		// 0x0B4C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CoverLeanExitDelay;                               		// 0x0B50 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CoverPartialLeanExitDelay;                        		// 0x0B54 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              PushOffCoverDuration;                             		// 0x0B58 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PushOffTimeToGo;                                  		// 0x0B5C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fRadarGUISize;                                  		// 0x0B60 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMaxZDifference;                                		// 0x0B64 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fDifferenceScale;                               		// 0x0B68 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fRadarUpdateTime;                               		// 0x0B6C (0x0004) [0x0000000000000000]              
	float                                              m_fLastRadarPassTime;                             		// 0x0B70 (0x0004) [0x0000000000000000]              
	float                                              m_fLastRadarRange;                                		// 0x0B74 (0x0004) [0x0000000000000000]              
	float                                              m_fRadarRange;                                    		// 0x0B78 (0x0004) [0x0000000000000000]              
	float                                              m_fRadarFOV;                                      		// 0x0B7C (0x0004) [0x0000000000000000]              
	float                                              m_fLastRadarFOV;                                  		// 0x0B80 (0x0004) [0x0000000000000000]              
	int                                                m_nMaxRadarIndex;                                 		// 0x0B84 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fDamageIndicatorDisplayTime;                    		// 0x0B88 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_srVehicleExitFailureMsg;                        		// 0x0B8C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srVehicleExitAButtonMsg;                        		// 0x0B90 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ControllerRemoved;                                		// 0x0B94 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ControllerRemovedOk;                              		// 0x0B98 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ProfileChangedText;                               		// 0x0B9C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fAttackOrderFarAngle;                           		// 0x0BA0 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fAttackOrderCloseAngle;                         		// 0x0BA4 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fAttackOrderCloseDistance;                      		// 0x0BA8 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_TetherDistance;                                 		// 0x0BAC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bToggledWalk : 1;                                 		// 0x0BB0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bStorming : 1;                                    		// 0x0BB0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bStormingWasCrouched : 1;                         		// 0x0BB0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bTiredStorming : 1;                               		// 0x0BB0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bStormCoolingDown : 1;                            		// 0x0BB0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bPhotoModeCameraUnlocked : 1;                     		// 0x0BB0 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bDebugAccuracy : 1;                               		// 0x0BB0 (0x0004) [0x0000000000002001] [0x00000040] ( CPF_Edit | CPF_Transient )
	unsigned long                                      m_bEnableSkipElevator : 1;                        		// 0x0BB0 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bInElevator : 1;                                  		// 0x0BB0 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      m_bInConversation : 1;                            		// 0x0BB0 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      m_bIsStoppedForConv : 1;                          		// 0x0BB0 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bBreakFromCover : 1;                              		// 0x0BB0 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bPreferLeanOverPopup : 1;                         		// 0x0BB0 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bUseCameraRelativeVehicleSteering : 1;            		// 0x0BB0 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      m_bOverrideCanTeleportCheck : 1;                  		// 0x0BB0 (0x0004) [0x0000000000004000] [0x00004000] ( CPF_Config )
	unsigned long                                      m_bRadarArrow : 1;                                		// 0x0BB0 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      m_bUpdateRadarHud : 1;                            		// 0x0BB0 (0x0004) [0x0000000000004000] [0x00010000] ( CPF_Config )
	unsigned long                                      m_bRadarIsJammed : 1;                             		// 0x0BB0 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      m_bPauseOnControllerDisconnect : 1;               		// 0x0BB0 (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      m_bApplyingOrders : 1;                            		// 0x0BB0 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned char                                      bFireCannon;                                      		// 0x0BB4 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bJumpJetsOn;                                      		// 0x0BB5 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bBoostersOn;                                      		// 0x0BB6 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bWantsToStorm;                                    		// 0x0BB7 (0x0001) [0x0000000000002004]              ( CPF_Input | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnToggleElevatorMode ( class USFXSeqAct_ToggleElevatorMode* Action );
	void OnSkipElevatorSequence ( class UBioSeqAct_SkipElevatorSequence* Action );
	void eventUpdateTrilogyUniqueStatProgression ( int ProfileSettingId );
	void eventUpdateTrilogyGrinderStatProgression ( int ProfileSettingId, int Amount, class ABioPawn* oTarget );
	void SetRichPresence ( );
	void ClientSetOnlineStatus ( );
	void NotifyReadAchievementsComplete ( int TitleId );
	void UpdateProfileData ( );
	void eventNotifyProfileLoaded ( );
	void ClearOnlineDelegates ( );
	void RegisterOnlineDelegates ( );
	void NotifyLoginChange ( unsigned char LocalUserNum );
	void OnExternalUIChanged ( unsigned long bIsOpening );
	void eventProxyOnExternalUIChanged ( unsigned long bIsOpening );
	void OnControllerChanged ( int ControllerId, unsigned long bIsConnected );
	void eventProxyOnControllerChanged ( int ControllerId, unsigned long bIsConnected );
	void Initialize ( );
	void eventOnProximityAlarm ( class AActor* oTarget, int nRelationship );
	void eventOnSquadSeen ( class AActor* oSquad );
	void eventOnActionComplete_Movement ( struct SFXName nmAction, int nReason, class AActor* oTarget, struct FVector const& vLocation );
	void eventOnActionComplete_Combat ( struct SFXName nmAction, struct SFXName nmTechnique, int nReason, class AActor* oLastTarget );
	void eventOnDamaged ( class AController* oInstigator, float fDamage );
	void eventOnCastAt ( class APawn* oAttacker, struct SFXName nmPower );
	void eventOnAttacked ( class APawn* oAttacker, struct SFXName nmWeapon );
	void eventOnAbilityDisabled ( int nEnableType, struct SFXName nmSubType );
	void eventOnAbilityEnabled ( int nEnableType, struct SFXName nmSubType );
	void eventOnNoCombatAction ( );
	void eventOnDeath ( class AController* oKiller );
	bool IsMoveInputIgnored ( );
	void OnTeleportCameraSync ( class USeqAct_Teleport* Action );
	void eventUnlockGamerPicture ( int PictureId );
	bool GetIsAchievementEarned ( int AchievementId );
	void eventUnlockAchievement ( int AchievementId, unsigned long bUpdatePlotState );
	void RestoreMotionBlur ( );
	void DisableMotionBlur ( );
	void InitializeGammaCorrectionSettings ( );
	void SetPostProcessValuesEx ( int i_GammaPreset );
	void SetPostProcessValues ( unsigned char Preset );
	void eventProxyClientStopForceFeedbackWaveform ( class UForceFeedbackWaveform* pWaveform );
	void eventProxyClientPlayForceFeedbackWaveform ( class UForceFeedbackWaveform* pWaveform );
	class UClass* GetSaveObjectClass ( );
	void Possess ( class APawn* aPawn, unsigned long bVehicleTransition );
	void LoadInputBindings ( );
	void SaveInputBindings ( );
	void eventUpdateInputConfiguration ( );
	void eventUnPauseController ( );
	void eventPauseController ( );
	void PushOffCover ( );
	void DetermineLeanDirection ( class ABioPawn* ChkPawn, unsigned char* out_PawnCA, unsigned char* out_PawnLeanBias, unsigned char* out_PawnSnapDirection );
	void ResetCoverAction ( );
	bool IsCameraAlignedWithCoverSlot ( float fThreshold );
	bool IsInCoverState ( );
	void ProcessViewRotation ( float DeltaTime, struct FRotator const& DeltaRot, struct FRotator* out_ViewRotation );
	bool IsLookInputIgnored ( );
	void SpawnPlayerCamera ( );
	void DisablePhotoModeCameraCollision ( );
	void EnablePhotoModeCameraCollision ( );
	void eventEndConversationMode ( );
	void eventStartConversationMode ( );
	void SetCinematicMode ( unsigned long bInCinematicMode, unsigned long bHidePlayer, unsigned long bAffectsHUD, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsButtons );
	void eventPostBeginPlay ( );
	void StopForceFeedback ( unsigned char eFeedbackType, unsigned char eWaveform );
	void PlayForceFeedback ( unsigned char eFeedbackType, unsigned char eWaveform );
	void EnablePauseGameOnControllerRemoval ( );
	void DissablePauseGameOnControllerRemoval ( );
	float GetSensitivityScaling ( );
	bool IsAbleToInstigate ( );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector const& StartFireLoc );
	class APawn* GetZoomSnapTarget ( float MinDistance, float MaxDistance, struct FVector* AimLocation );
	class APawn* GetAimAssistTarget ( float MaxDistance, struct FVector* CamLoc, struct FRotator* CamRot, struct FVector* TargetLoc, float* Margin );
	float ScoreZoomSnapTarget ( class APawn* TestPawn, float MaxDistance, struct FVector* CamLoc, struct FRotator* CamRot, struct FVector* AimLocation );
	int LerpMovementStickAngle ( int RotDesired, int RotBase, float RotationSpeed, float DeltaSeconds );
	void ComputeMovementStickAngle ( float* Mag, float* AngleStick, struct FRotator* RotWorld );
	bool CanPerceiveTarget ( class AActor* oTarget );
	bool GetTargetRelativeRotation ( struct FVector* vDirection );
	void LogCinematicMode ( unsigned long bIsStartingCinematic );
	void BioOnPawnActionStateChanged ( );
	bool BioExitVehicle ( unsigned long bForceExit );
	bool BioEnterVehicle ( class ABioVehicleBase* oVehicle );
	void InitializeCommandTarget ( );
	void ReApplyTacticalOrders ( class APawn* pPawn, float fDelay );
	void ApplyMovementOrders ( );
	void ApplyTacticalOrders ( );
	void SquadOrderUseGrenade ( class APawn* pPawn );
	void SquadOrderEquipWeapon ( unsigned char nWeapon, class APawn* pPawn );
	void SquadOrderUsePower ( struct SFXName nmPower, class APawn* pPawn );
	void SquadOrderShootTarget ( class APawn* pPawn, class AActor* Target );
	bool ShouldLockOnTarget ( class AActor* pTarget );
	bool QuickCommandUseMappedAction ( unsigned char nSlot );
	bool QuickCommandMoveTo ( int iSquadMember );
	bool QuickCommandAttackTarget ( int iSquadMember, class AActor* pTarget );
	bool QuickCommandFollowPlayer ( int iSquadMember );
	void PlayerSquadSetActionState ( unsigned char eState );
	struct SFXName GetHenchmanMappedPower ( class APawn* oHenchman );
	bool SetHenchmanMappedPower ( class APawn* oHenchman, struct SFXName nmPower );
	bool IsActionMappedToPlayerSlot ( unsigned char eType, struct SFXName nmPower );
	bool ClearMapByIndex ( unsigned char nSlot );
	bool GetMappingByIndex ( unsigned char nSlot, struct FBioActionMapping* stMapData );
	bool MapActionToAvailablePlayerSlot ( unsigned char eType, struct SFXName nmPower );
	bool MapAction ( unsigned char nSlot, unsigned char nType, struct SFXName nmPower, class APawn* oPawn );
	void InitializeDefaultMapping ( );
	bool OnNewPlayerSelection ( class AActor* Selection );
	void OnEnteredCover ( );
	void DisableDOF ( );
	void OutputConsoleText ( FString const& Text );
	void RecoverForPlayerPawnActionState ( );
	void RecoverSelectionForPawnActionState ( );
	void RecoverCameraForPawnActionState ( );
	void RecoverCameraPostCinematic ( );
	void DrawSelectionReticule ( struct FVector const& vLocation );
	void DrawCircle ( struct FVector const& vLocation, struct FVector const& vNormal, float fRadius, struct FColor const& CircleColor );
	void HandleWalking ( );
	bool IsScoped ( );
	bool IsZoomed ( );
	void eventSetZoomed ( unsigned long bZoomState );
	void ResetStormCooldown ( );
	class USFXGameModeDefault* GetGameModeDefault ( );
	void eventSaveProfile ( );
	void RegisterCustomPlayerDataStores ( );
};

// Class SFXGame.SFXGameModeBase
// 0x006D (0x00CD - 0x0060)
class USFXGameModeBase : public UObject
{
public:
	struct FMultiMap_Mirror                            CollectedBindMapping;                             		// 0x0060 (0x0048) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray<struct FKeyBind>                            Bindings;                                         		// 0x00A8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<struct FKeyBind>                            LocalizedBindings;                                		// 0x00B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bBindingsCollected : 1;                           		// 0x00C8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsActive : 1;                                    		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bShowHUD : 1;                                     		// 0x00C8 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShowSelection : 1;                               		// 0x00C8 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShowDamageIndicators : 1;                        		// 0x00C8 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShowRadar : 1;                                   		// 0x00C8 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowPlayerRotation : 1;                         		// 0x00C8 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowMovement : 1;                               		// 0x00C8 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowAIMovement : 1;                             		// 0x00C8 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowHenchmenMovement : 1;                       		// 0x00C8 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowCamera : 1;                                 		// 0x00C8 (0x0004) [0x0000000000000003] [0x00000400] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowCameraMods : 1;                             		// 0x00C8 (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowSave : 1;                                   		// 0x00C8 (0x0004) [0x0000000000000003] [0x00001000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowLookAt : 1;                                 		// 0x00C8 (0x0004) [0x0000000000000003] [0x00002000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowPauseMenu : 1;                              		// 0x00C8 (0x0004) [0x0000000000000003] [0x00004000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHasMouseAuthority : 1;                           		// 0x00C8 (0x0004) [0x0000000000000003] [0x00008000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bMouseVisible : 1;                                		// 0x00C8 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bShowReticles : 1;                                		// 0x00C8 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bPlayVocalizations : 1;                           		// 0x00C8 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned char                                      Priority;                                         		// 0x00CC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void GuiKey ( unsigned char Event );
	void SquadCommand_Move2 ( );
	void SquadCommand_Move1 ( );
	void SquadCommand_Follow ( );
	void SquadCommand_Attack ( );
	void ToggleKeyMap ( );
	void ShowEquipmentGui ( unsigned long bShow );
	void ShowSquadGui ( unsigned long bShow );
	void ShowCodexGui ( unsigned long bShow );
	void ShowJournalGui ( unsigned long bShow );
	void ShowMapGui ( unsigned long bShow );
	void TurnOffStormForPause ( );
	bool ShowMenuGui ( );
	bool CanPause ( );
	void StopFiringWeapon ( );
	void FireWeapon ( );
	void SetSystemFilmgrainEnabled ( unsigned long bValue );
	bool IsSystemFilmgrainEnabled ( );
	void CollectBindings ( );
	void eventInitialize ( );
	void DeactivateSpecifier ( struct SFXName ModeSpecifier );
	void ActivateSpecifier ( struct SFXName ModeSpecifier );
	void Deactivated ( );
	void Activated ( );
	void ClearTimer ( struct SFXName inTimerFunc, class UObject* inObj );
	bool IsTimerActive ( struct SFXName inTimerFunc, class UObject* inObj );
	void SetTimer ( float InRate, unsigned long inbLoop, struct SFXName inTimerFunc, class UObject* inObj );
	class USFXCameraMode* eventHACK_GetCameraMode ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
};

// Class SFXGame.SFXGameModeManager
// 0x0059 (0x00B9 - 0x0060)
class USFXGameModeManager : public UObject
{
public:
	TArray<class UClass*>                              SupportedModeClasses;                             		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class USFXGameModeBase*>                    GameModes;                                        		// 0x0070 (0x0010) [0x0000000004402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	TArray<struct FLocalizedKeyName>                   KeyNames;                                         		// 0x0080 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<struct FTutorialCommandsDetails>            lstTutorialParseStrings;                          		// 0x0090 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	FString                                            sAudioGameModeRTPCName;                           		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              KEY_BINDING_VERSION;                              		// 0x00B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srUnboundKeyString;                               		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      CurrentMode;                                      		// 0x00B8 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	FString GetLocalizedNameForKey ( struct SFXName Key, unsigned long Control, unsigned long Shift, unsigned long Alt );
	void UpdateAllBindMappingCollections ( );
	void ResetKeyPresses ( );
	FString ParseStringForPCCommands ( FString const& sMessage );
	void ResetBindings ( );
	bool ShouldPlayVocalizations ( );
	bool ShouldShowReticles ( );
	bool GetMouseVisible ( );
	bool HasMouseAuthority ( );
	bool AllowsLookAt ( );
	bool AllowsSaving ( );
	bool AllowsCameraMods ( );
	bool AllowsHenchmenMovement ( );
	bool AllowsAIMovement ( );
	bool AllowsPlayerRotation ( );
	bool ShouldShowRadar ( );
	bool ShouldShowDamageIndicators ( );
	bool ShouldShowSelection ( );
	bool ShouldShowHUD ( );
	bool IsActive ( unsigned char Mode );
	void UpdateCurrentMode ( );
	void Initialize ( );
	class USFXGameModePhoto* GetPhotoMode ( );
	class USFXGameModeDefault* HACK_GetDefaultMode ( );
	class USFXCameraMode* HACK_GetCameraMode ( unsigned char GalaxyOrConversationMode );
	void UpdateControllerButtonBindings ( unsigned long bSwapCrossCircle );
	void UpdateControllerTriggerBindings ( unsigned char ConfigOption );
	void UpdateControllerStickBindings ( unsigned char ConfigOption );
	void Helper_ResetStaticPCBindings ( );
	void Helper_SetStaticPCBinding ( struct SFXName Key, FString const& Command );
	void ResetControllerBindings ( );
	void Helper_ResetStaticConsoleBindings ( );
	void Helper_SetStaticConsoleBinding ( struct SFXName Key, FString const& Command );
	void Helper_SwapStaticConsoleSticks ( );
	void Helper_SwapStaticConsoleBindings ( struct SFXName SourceKey, struct SFXName TargetKey );
	void Helper_SwapBindings ( class USFXGameModeBase* TargetMode, struct SFXName SourceKey, struct SFXName TargetKey, unsigned long bSwapBindings, FString const& OverrideSourceCommand, FString const& OverrideTargetCommand, unsigned long bUseDefaultBindings );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
	void TurnOffStormForPause ( );
	bool CanPause ( );
	void eventDisableMode ( unsigned char Mode, struct SFXName ModeSpecifier );
	void eventEnableMode ( unsigned char Mode, struct SFXName ModeSpecifier );
	bool IsPlayMode ( unsigned char Mode );
};

// Class SFXGame.SFXInventoryManager
// 0x006C (0x031C - 0x02B0)
class ASFXInventoryManager : public AInventoryManager
{
public:
	TArray<float>                                      AccBufferValues;                                  		// 0x02B0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FRotator                                    AccuracyLastViewRot;                              		// 0x02C0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    WeaponRecoilOffset;                               		// 0x02CC (0x000C) [0x0000000000000000]              
	struct FRotator                                    TotalRecoil;                                      		// 0x02D8 (0x000C) [0x0000000000000000]              
	struct FVector2D                                   InterpRange;                                      		// 0x02E4 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              Base_Acc_Standing;                                		// 0x02EC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              Base_Acc_Zoom;                                    		// 0x02F0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AccMod_Move;                                      		// 0x02F4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AccMod_ViewTurn;                                  		// 0x02F8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AccMod_MouseMultiplier;                           		// 0x02FC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AccMod_MaxCameraLoss;                             		// 0x0300 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              Base_Interp_Speed;                                		// 0x0304 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              InterpMod_Move;                                   		// 0x0308 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              InterpMul_ViewTurn;                               		// 0x030C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              Accuracy;                                         		// 0x0310 (0x0004) [0x0000008000000000]              
	float                                              AccMod_WeaponFired;                               		// 0x0314 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bWeaponFired : 1;                                 		// 0x0318 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DebugDraw_Accuracy ( class ABioHUD* HUD );
	void ResetAccuracy ( );
	void UpdateKickbackFade ( float DeltaTime, struct FRotator* out_DeltaRot );
	void UpdateKickback ( float DeltaTime, struct FRotator* out_DeltaRot );
	void SetWeaponRecoil ( float PitchRecoil );
};

// Class SFXGame.SFXLoadMovieManager
// 0x0021 (0x0081 - 0x0060)
class USFXLoadMovieManager : public UObject
{
public:
	FString                                            LoadingMovieName;                                 		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioLoadingMovie*                            DefaultLoadingMovie;                              		// 0x0070 (0x0008) [0x0000000000000000]              
	int                                                nLoopBackFrame;                                   		// 0x0078 (0x0004) [0x0000000000000000]              
	unsigned long                                      bPlayToCompletion : 1;                            		// 0x007C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bRequireExplicitStop : 1;                         		// 0x007C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bResetToDefaultOnPlayLoadMovie : 1;               		// 0x007C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bStreamFromDisc : 1;                              		// 0x007C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bIsInLoad : 1;                                    		// 0x007C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned char                                      PlaybackState;                                    		// 0x0080 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool IsLoadingMoviePlaying ( );
	bool StopLoadingMovie ( unsigned long bDelayStopUntilGameHasRendered );
	bool PlayLoadingMovie ( FString const& LevelName );
	void InitLoadScreenTip ( );
	void SetupLoadingMovie ( class UBioLoadingMovie* Movie, unsigned long RequiresExplicitStop, unsigned long PlayToCompletion, unsigned long StreamFromDisc );
	void ResetToDefaultLoadMovie ( );
};

// Class SFXGame.SFXModule_AimAssistTarget
// 0x0020 (0x008C - 0x006C)
class USFXModule_AimAssistTarget : public USFXModule
{
public:
	TArray<struct SFXName>                             AimNodes;                                         		// 0x006C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FAimAssistBox>                       AimAssistRegions;                                 		// 0x007C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void PostBeginPlay ( );
};

// Class SFXGame.SFXModule_Cover
// 0x007C (0x00E8 - 0x006C)
class USFXModule_Cover : public USFXModule
{
public:
	TArray<struct FCachedDebugInfo>                    LeftDebugInfo;                                    		// 0x006C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FCachedDebugInfo>                    RightDebugInfo;                                   		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FCoverSearchCache>                   LeftSearchInfo;                                   		// 0x008C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FCoverSearchCache>                   RightSearchInfo;                                  		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class ASFXDynamicEdgeMarker*>               EdgeMarkers;                                      		// 0x00AC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              WalkableFloorZ;                                   		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              CollisionRadius;                                  		// 0x00C0 (0x0004) [0x0000000000000000]              
	float                                              CoverStandHeight;                                 		// 0x00C4 (0x0004) [0x0000000000000000]              
	float                                              CoverMidHeight;                                   		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              CoverHeight;                                      		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              EdgePullbackDistance;                             		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxIterations;                                    		// 0x00D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SearchDistance;                                   		// 0x00D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              NormalThreshold;                                  		// 0x00DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DistanceThresholdAngle;                           		// 0x00E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bEnabled : 1;                                     		// 0x00E4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bFoundLeftEdge : 1;                               		// 0x00E4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bFoundRightEdge : 1;                              		// 0x00E4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bDebugCover : 1;                                  		// 0x00E4 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void PlayerFinishedCoverAlign ( );
	void PlayerLeftCover ( );
	void PlayerEnteredCover ( );
	void PostBeginPlay ( );
	void Tick ( float DeltaTime );
};

// Class SFXGame.SFXObjectSerializerMT
// 0x001C (0x007C - 0x0060)
class USFXObjectSerializerMT : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x1C ];                            		// 0x0060 (0x001C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXTrilogyProfileSettings
// 0x0010 (0x00D8 - 0x00C8)
class USFXTrilogyProfileSettings : public UOnlineProfileSettings
{
public:
	TArray<struct FTrilogyGrinderAchievementData>      StaticTrilogyGrinderAchievementData;              		// 0x00C8 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool IsComplete ( class ABioPlayerController* PC, int AchievementId );
	void UnlockAchievement ( class ABioPlayerController* PC, int AchievementId );
	void ResetTrilogyData ( class ABioPlayerController* PC );
	void GrinderStatReset ( int ProfileSettingId, class ABioPlayerController* PC );
	void UniqueStatIncrement ( int ProfileSettingId, class ABioPlayerController* PC );
	void GrinderStatIncrement ( int ProfileSettingId, int Amount, class ABioPlayerController* PC );
};

// Class SFXGame.BioWeapon
// 0x005B (0x0420 - 0x03C5)
class ABioWeapon : public AWeapon
{
public:
	struct FLinearColor                                m_vActivatedMatParamColor_Active;                 		// 0x03C8 (0x0010) [0x0000000000004000]              ( CPF_Config )
	struct FLinearColor                                m_vActivatedMatParamColor_Inactive;               		// 0x03D8 (0x0010) [0x0000000000004000]              ( CPF_Config )
	class USkeletalMeshComponent*                      SkelMeshComp;                                     		// 0x03E8 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioItemWeapon*                              m_oItem;                                          		// 0x03F0 (0x0008) [0x0000000000000000]              
	class USkeletalMeshComponent*                      AttachedMesh;                                     		// 0x03F8 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct SFXName                                     AttachedBone;                                     		// 0x0400 (0x0008) [0x0000000000000000]              
	class APawn*                                       AttachPawn;                                       		// 0x0408 (0x0008) [0x0000000000000000]              
	struct SFXName                                     m_nActivatedMatParamName;                         		// 0x0410 (0x0008) [0x0000000000004000]              ( CPF_Config )
	class UBioDamageType*                              m_pDamage;                                        		// 0x0418 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventInitializeWeapon ( );
	class ABioPawn* DeactivateWeapon ( );
	class ABioPawn* ActivateWeapon ( );
	float GetFractionOfEffectsMaterialEnabled ( );
	void SetFractionOfEffectsMaterialEnabled ( float FractionEnabled );
	unsigned char GetEffectsMaterialType ( );
	void SetEffectsMaterialType ( unsigned char EffectsMaterialType );
	void UpdateAppearance ( );
	class APawn* DetachFromPawn ( unsigned long bCinematicsMode );
	class UBioItemWeapon* ClearItem ( );
	class UBioItemWeapon* SetItem ( class UBioItemWeapon* oItem );
	class AActor* GetTraceOwner ( );
	void OnEffectsMaterial ( class UBioSeqAct_EffectsMaterial* Action );
	void eventProxyPlaySound ( class USoundCue* SoundCue );
	bool eventAttachToMesh ( class USkeletalMeshComponent* MeshComponent, struct SFXName SocketName, unsigned long bCinematicsMode );
};

// Class SFXGame.BioWeaponRanged
// 0x012C (0x054C - 0x0420)
class ABioWeaponRanged : public ABioWeapon
{
public:
	TArray<struct FStatsClassBinding>                  StatsClassBindings;                               		// 0x0420 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray<struct FHeadshotTalentBinding>              HeadshotTalentBindings;                           		// 0x0430 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray<struct FImpactDelayInfo>                    m_aImpactDelayQueue;                              		// 0x0440 (0x0010) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnTargetHit__Delegate;                          		// 0x0450 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ABioVisualEffect*                            m_visualEffects[ 0x6 ];                           		// 0x0460 (0x0030) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_MuzzleSocketName;                               		// 0x0490 (0x0008) [0x0000000000000000]              
	struct SFXName                                     m_MuzzleCamSocketName;                            		// 0x0498 (0x0008) [0x0000000000000000]              
	struct SFXName                                     m_ImpactParameterName;                            		// 0x04A0 (0x0008) [0x0000000000000000]              
	struct SFXName                                     m_SourceParameterName;                            		// 0x04A8 (0x0008) [0x0000000000000000]              
	class UAudioComponent*                             oAudioComponent;                                  		// 0x04B0 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioWeaponVFXAppearance*                     m_pCachedVFXAppearance;                           		// 0x04B8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USFXWeaponStatsBase*                         Stats;                                            		// 0x04C0 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              fWeaponMeshEffectValue;                           		// 0x04C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fWeaponMeshEffectTargetValue;                     		// 0x04CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nFireSound;                                     		// 0x04D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StartFireTime;                                    		// 0x04D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StopFireTime;                                     		// 0x04D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ShotCount;                                        		// 0x04DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CurrentAimMode;                                   		// 0x04E0 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              m_coolDownDuration;                               		// 0x04E4 (0x0004) [0x0000000000000000]              
	float                                              m_CooldownTime;                                   		// 0x04E8 (0x0004) [0x0000000000000000]              
	int                                                RemainingBurstFireCount;                          		// 0x04EC (0x0004) [0x0000000000000000]              
	float                                              FireDelay;                                        		// 0x04F0 (0x0004) [0x0000000000000000]              
	float                                              ReFireDelay;                                      		// 0x04F4 (0x0004) [0x0000000000000000]              
	float                                              HeadshotDamageMultiplier;                         		// 0x04F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MinPelletsForPhysics;                             		// 0x04FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fCurrentHeat;                                   		// 0x0500 (0x0004) [0x0000000000000000]              
	float                                              m_fProjectilesSpreadModifier;                     		// 0x0504 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PortArmsPistolDistance;                           		// 0x0508 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PortArmsShotgunDistance;                          		// 0x050C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PortArmsAssaultDistance;                          		// 0x0510 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PortArmsSniperDistance;                           		// 0x0514 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fVehicleFireDistance;                           		// 0x0518 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fWeaponFireDistance;                            		// 0x051C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fSniperFireDistance;                            		// 0x0520 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nTraceFireTestType;                             		// 0x0524 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fOverlapRecurseBreakoutDistance;                		// 0x0528 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nTotalNumberStrips;                             		// 0x052C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nTotalNumberCloseStrips;                        		// 0x0530 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_nCloseStripLength;                              		// 0x0534 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMaxVFXIntensity;                               		// 0x0538 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMinVFXIntensity;                               		// 0x053C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMaxVFXDecalIntensity;                          		// 0x0540 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMinVFXDecalIntensity;                          		// 0x0544 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bTriggerPulled : 1;                               		// 0x0548 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bNeedsRetrigger : 1;                              		// 0x0548 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bIsZoomed : 1;                                    		// 0x0548 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_isFiring : 1;                                   		// 0x0548 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bOverheated : 1;                                		// 0x0548 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bShootingWhileOverheatedSoundPlayed : 1;        		// 0x0548 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bIsMuzzleFlashVFXEnabled : 1;                   		// 0x0548 (0x0004) [0x0000000000000000] [0x00000040] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool CanStartFiring ( );
	float GetPlayerAimError ( float Accuracy );
	float GetRecoil ( );
	float GetRateOfFire ( );
	unsigned char GetRangedWeaponType ( );
	struct FVector GetMuzzleLoc ( );
	void PlayWeaponSound ( struct SFXName nmSound );
	void PlayShootingWhileOverheatedSound ( );
	void PlayOverheatSound ( );
	void OnHide ( unsigned long bHide );
	void TickHeat ( float fDeltaTime );
	class UBioVISGrenade* GetVisualExplosionSet ( );
	class UBioVISWeapon* GetVisualImpactSet ( );
	void ReleaseVisualEffect ( unsigned char Effect );
	class ABioVisualEffect* GetVisualEffect ( unsigned char Effect, unsigned long bCacheEffect );
	void TickFire ( float TimeDelta );
	void WeaponRanges ( float* MinRange, float* BestRange, float* MaxRange );
	class UBioAttributesItemWeaponRanged* GetAttributes ( );
	bool IsPenetratedByInstantFire ( class AActor* oHitActor );
	void eventDoCoolDownEffect ( );
	void DoBulletTraceEffect ( struct FVector* vHitPoint );
	float GetZoomFOV ( );
	bool IsScoped ( );
	float GetAdhesionMultiplier ( );
	float GetFrictionMultiplier ( );
	float GetCameraSensitivityMultiplier ( );
	void ResetFiringState ( );
	bool eventHasLoopingFire ( );
	void eventFireOff ( );
	void eventFireOn ( );
	void InitializeWeapon ( );
	bool GetWeaponDesc ( int ManufacturerID, unsigned char Slot, int* Description );
	bool GetStatsBinding ( int ManufacturerID, unsigned char weaponType, struct FStatsClassBinding* OutBinding );
	struct FRotator GetAdjustedAim ( struct FVector const& StartFireLoc );
	void CycleMagnification ( );
	void SetZoomed ( unsigned long bState );
	void SetMuzzleFlashState ( unsigned long bState );
	class ABioPawn* DeactivateWeapon ( );
	bool eventAttachToMesh ( class USkeletalMeshComponent* MeshComponent, struct SFXName SocketName, unsigned long bCinematicsMode );
	class UBioItemWeapon* SetItem ( class UBioItemWeapon* oItem );
	void OnTargetHit ( unsigned long bIsHeadShot );
};

// Class SFXGame.SFXWeaponStatsBase
// 0x01FA (0x025A - 0x0060)
class USFXWeaponStatsBase : public UObject
{
public:
	struct FInterpCurveFloat                           AccBonusMapping;                                  		// 0x0060 (0x0014) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           ConeMaxAccBonusMapping;                           		// 0x0074 (0x0014) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           ConeAccBonusMapping;                              		// 0x0088 (0x0014) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           RecoilMaxAccBonusMapping;                         		// 0x009C (0x0014) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           RecoilAccBonusMapping;                            		// 0x00B0 (0x0014) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray<struct FZoomSnapInfo>                       ZoomSnapList;                                     		// 0x00C4 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray<struct FHeadshotDamageBonus>                HeadshotPowerDamageBonus;                         		// 0x00D4 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray<struct FVector2D>                           PelletSpread;                                     		// 0x00E4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FManufacturerModifier>               ManufacturerModifiers;                            		// 0x00F4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<struct FWeaponAimMode>                      AimModes;                                         		// 0x0104 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray<class UAnimSet*>                            MaleWeaponAnimSets;                               		// 0x0114 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<class UAnimSet*>                            FemaleWeaponAnimSets;                             		// 0x0124 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     FrictionTargetOffset;                             		// 0x0134 (0x000C) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   AimError;                                         		// 0x0140 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   ZoomAimError;                                     		// 0x0148 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   FrictionMultiplierRange;                          		// 0x0150 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   AdhesionStrengthRange;                            		// 0x0158 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   DamageRange;                                      		// 0x0160 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   HeatPerShotRange;                                 		// 0x0168 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   HeatLossRateRange;                                		// 0x0170 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector2D                                   OverheatedHeatLossRateRange;                      		// 0x0178 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class USFXCameraSetup*                             CameraSetup;                                      		// 0x0180 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    DrawAnimset;                                      		// 0x0188 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UForceFeedbackWaveform*                      WeaponFireRumble;                                 		// 0x0190 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UForceFeedbackWaveform*                      WeaponOverheatedRumble;                           		// 0x0198 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class USFXCameraShakeBase*                         FiringShake;                                      		// 0x01A0 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class USFXCameraShakeBase*                         TightAimFiringShake;                              		// 0x01A8 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              CrosshairErrorFactor;                             		// 0x01B0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AccFirePenalty;                                   		// 0x01B4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AccFireInterpSpeed;                               		// 0x01B8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ZoomConeAccBonus;                                 		// 0x01BC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ZoomAccFirePenalty;                               		// 0x01C0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ZoomAccFireInterpSpeed;                           		// 0x01C4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              Recoil;                                           		// 0x01C8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ZoomRecoil;                                       		// 0x01CC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilInterpSpeed;                                		// 0x01D0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilFadeSpeed;                                  		// 0x01D4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilZoomFadeSpeed;                              		// 0x01D8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilCap;                                        		// 0x01DC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              ZoomRecoilCap;                                    		// 0x01E0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilYawScale;                                   		// 0x01E4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RecoilYawFrequency;                               		// 0x01E8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MinFrictionDistance;                              		// 0x01EC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxFrictionDistance;                              		// 0x01F0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              PeakFrictionDistance;                             		// 0x01F4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              PeakFrictionRadiusScale;                          		// 0x01F8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              PeakFrictionHeightScale;                          		// 0x01FC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MinAdhesionDistance;                              		// 0x0200 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxAdhesionDistance;                              		// 0x0204 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MinAdhesionVelocity;                              		// 0x0208 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              CamInputAdhesionDamping;                          		// 0x020C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxLateralAdhesionDist;                           		// 0x0210 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              AimCorrectionAmount;                              		// 0x0214 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MagneticCorrectionThresholdAngle;                 		// 0x0218 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxMagneticCorrectionAngle;                       		// 0x021C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MinZoomSnapDistance;                              		// 0x0220 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxZoomSnapDistance;                              		// 0x0224 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RateOfFire;                                       		// 0x0228 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MinRefireTime;                                    		// 0x022C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                RoundsPerBurst;                                   		// 0x0230 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              Damage;                                           		// 0x0234 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              HeatPerShot;                                      		// 0x0238 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              HeatLossRate;                                     		// 0x023C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              OverheatedHeatLossRate;                           		// 0x0240 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              RampFirePct;                                      		// 0x0244 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RampFireTime;                                     		// 0x0248 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                Description;                                      		// 0x024C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              UIDPSFudgeFactor;                                 		// 0x0250 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned long                                      bEnableAccuracy : 1;                              		// 0x0254 (0x0004) [0x0000000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	unsigned long                                      bRemapAccToRecoil : 1;                            		// 0x0254 (0x0004) [0x0000000000004001] [0x00000002] ( CPF_Edit | CPF_Config )
	unsigned long                                      bFrictionEnabled : 1;                             		// 0x0254 (0x0004) [0x0000000000004001] [0x00000004] ( CPF_Edit | CPF_Config )
	unsigned long                                      bFrictionDistanceScalingEnabled : 1;              		// 0x0254 (0x0004) [0x0000000000004001] [0x00000008] ( CPF_Edit | CPF_Config )
	unsigned long                                      bAdhesionEnabled : 1;                             		// 0x0254 (0x0004) [0x0000000000004001] [0x00000010] ( CPF_Edit | CPF_Config )
	unsigned long                                      bAdhesionDuringCam : 1;                           		// 0x0254 (0x0004) [0x0000000000004001] [0x00000020] ( CPF_Edit | CPF_Config )
	unsigned long                                      bZoomSnapEnabled : 1;                             		// 0x0254 (0x0004) [0x0000000000004001] [0x00000040] ( CPF_Edit | CPF_Config )
	unsigned long                                      bScaleFireAnimByFireRate : 1;                     		// 0x0254 (0x0004) [0x0000000000004001] [0x00000080] ( CPF_Edit | CPF_Config )
	unsigned long                                      bDisableTracers : 1;                              		// 0x0254 (0x0004) [0x0000000000004001] [0x00000100] ( CPF_Edit | CPF_Config )
	unsigned long                                      bOverrideAnimsets : 1;                            		// 0x0254 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned char                                      weaponType;                                       		// 0x0258 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FireMode;                                         		// 0x0259 (0x0001) [0x0000000000004001]              ( CPF_Edit | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float GetDamageFromItem ( class UBioItemWeaponRanged* Item );
	float GetHeatPerShotFromItem ( class UBioItemWeaponRanged* Item );
	float GetRateOfFireFromItem ( class UBioItemWeaponRanged* Item );
	void Initialize ( int sophistication, int ManufacturerID );
	float GetDamagePerSecondValue ( class UBioItemWeaponRanged* Item );
	float GetHeatsinkEfficiencyValue ( class UBioItemWeaponRanged* Item );
};

// Class SFXGame.BioAFComponent
// 0x0010 (0x0070 - 0x0060)
class UBioAFComponent : public UObject
{
public:
	class AActor*                                      Owner;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	class AActor*                                      Instigator;                                       		// 0x0068 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioActive
// 0x0005 (0x0075 - 0x0070)
class UBioActive : public UBioAFComponent
{
public:
	unsigned long                                      m_bBeingShutdown : 1;                             		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bUpdateOnShutdown : 1;                          		// 0x0070 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      m_InitalizationEventType;                         		// 0x0074 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventValidSuperMode ( unsigned char eMode );
	struct SFXName eventGetEventTypeName ( );
	void Initialize ( class AActor* oOwner );
	void InitializeInternal ( );
};

// Class SFXGame.BioActiveFall
// 0x0003 (0x0078 - 0x0075)
class UBioActiveFall : public UBioActive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventValidSuperMode ( unsigned char eMode );
	void InitializeInternal ( );
};

// Class SFXGame.BioActiveGrenade
// 0x005F (0x00D4 - 0x0075)
class UBioActiveGrenade : public UBioActive
{
public:
	struct FVector                                     m_vTarget;                                        		// 0x0078 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vVelocity;                                      		// 0x0084 (0x000C) [0x0000000000000000]              
	class ABioGrenadeProjectileFrisbee*                m_stuckGrenade;                                   		// 0x0090 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_oBallisticGrenadeTarget;                        		// 0x0098 (0x0008) [0x0000000000000000]              
	float                                              m_fSwitchToBallisticGrenadeTime;                  		// 0x00A0 (0x0004) [0x0000000000000000]              
	float                                              m_fBallisticGrenadeSpeed;                         		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              m_fSwitchToBallisticGrenadeDuration;              		// 0x00A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_fStickyGrenadeTraceDistance;                    		// 0x00AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_fBallisticGrenadeSpeedIncreaseRate;             		// 0x00B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_fBallisticGrenadeSpeedMaximum;                  		// 0x00B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_fBallisticGrenadeSpeedMinimum;                  		// 0x00B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_fBallisticArcTimeDelta;                         		// 0x00BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_fBallisticArcFloor;                             		// 0x00C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_fBallisticGrenadePitchOffset;                   		// 0x00C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                m_nBallisticArcPointsPerTrace;                    		// 0x00C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      m_bCanThrowGrenade : 1;                           		// 0x00CC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bStartedThrow : 1;                              		// 0x00CC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bWaitingOnLeanOut : 1;                          		// 0x00CC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bRequestedCoverLean : 1;                        		// 0x00CC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_isBallisticGrenadeEnabled : 1;                  		// 0x00CC (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      m_isLockedActionStateRequired : 1;                		// 0x00CC (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned char                                      m_state;                                          		// 0x00D0 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eGrenadeThrowAnimationState;                    		// 0x00D1 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_animationPlaybackState;                         		// 0x00D2 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eInitialCoverAction;                            		// 0x00D3 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	unsigned char GUIState ( );
	struct SFXName eventGetEventTypeName ( );
	bool eventValidSuperMode ( unsigned char eMode );
	void InitializeInternal ( );
};

// Class SFXGame.BioActiveMount
// 0x0003 (0x0078 - 0x0075)
class UBioActiveMount : public UBioActive
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventValidSuperMode ( unsigned char eMode );
	void InitializeInternal ( );
};

// Class SFXGame.BioActivePower
// 0x00AD (0x0122 - 0x0075)
class UBioActivePower : public UBioActive
{
public:
	struct FVector                                     m_vCastingStartLocation;                          		// 0x0078 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vCasterVelocity;                                		// 0x0084 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vLocationToAimAt;                               		// 0x0090 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UBioPower*                                   m_oPower;                                         		// 0x009C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioPowerScript*                             m_oPowerScript;                                   		// 0x00A4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class APawn*                                       m_oCaster;                                        		// 0x00AC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioPawn*                                    m_oCasterAsBioPawn;                               		// 0x00B4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioEpicPawnBehavior*                        m_oCasterBehavior;                                		// 0x00BC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UAnimSet*                                    m_oAnimSet;                                       		// 0x00C4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioGameProperty*                            m_oDisableAIProperty;                             		// 0x00CC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_nmAnimSet;                                      		// 0x00D4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_oTargetToAimAt;                                 		// 0x00DC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioVisualEffect*                            m_oCachedBeamEffect;                              		// 0x00E4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCastingTimeRemaining;                          		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fUseTimeRemaining;                              		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCasterStability;                               		// 0x00F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMaxWaitTimeForAnimation;                       		// 0x00F8 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fCurrentWaitTimeForAnimation;                   		// 0x00FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCastingStartTime;                              		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCastingBeamTime;                               		// 0x0104 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMaxWaitTimeForCoverLean;                       		// 0x0108 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fCurrentWaitTimeForCoverLean;                   		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLeanDelayTimer;                                		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLeanDelayTime;                                 		// 0x0114 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fLeanDelayVarianceTime;                         		// 0x0118 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bCasterIsPlayer : 1;                            		// 0x011C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bCasterIsHenchman : 1;                          		// 0x011C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bPlayerOrderedPowerUse : 1;                     		// 0x011C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bResetAnimationNode : 1;                        		// 0x011C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bPlayCastingAnimation : 1;                      		// 0x011C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bPlayReleaseAnimation : 1;                      		// 0x011C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bPlayUsingAnimation : 1;                        		// 0x011C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bCancelAnimations : 1;                          		// 0x011C (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      m_bBlendInPowerAnimations : 1;                    		// 0x011C (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      m_bBlendOutPowerAnimations : 1;                   		// 0x011C (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      m_bWaitingForAnimationToStart : 1;                		// 0x011C (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      m_bWaitingOnLeanOut : 1;                          		// 0x011C (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      m_bSkipPowerCooldown : 1;                         		// 0x011C (0x0004) [0x0000000000006000] [0x00001000] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bSetFocusWhenFinished : 1;                      		// 0x011C (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      m_bAnimationReadyForPowerRelease : 1;             		// 0x011C (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      m_bCastingAnimationAvailable : 1;                 		// 0x011C (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      m_bReleaseAnimationAvailable : 1;                 		// 0x011C (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      m_bUsingAnimationAvailable : 1;                   		// 0x011C (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      m_bShowPowerAiming : 1;                           		// 0x011C (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      m_bCancelling : 1;                                		// 0x011C (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      m_bEnablePowerCooldown : 1;                       		// 0x011C (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      m_bShowPowerImpactText : 1;                       		// 0x011C (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      m_bDisplayingCastingBeam : 1;                     		// 0x011C (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      m_bRequestedCoverLean : 1;                        		// 0x011C (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned char                                      m_ePowerState;                                    		// 0x0120 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_eInitialCoverAction;                            		// 0x0121 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void RecordDebugAimingInfo ( struct FVector const& vStartLocation1, struct FVector const& vEndLocation1, struct FVector const& vStartLocation2, struct FVector const& vEndLocation2 );
	void RecordDebugInfo ( );
	void GetImpactLocation ( class AActor* oActor, struct FVector* vLocation, struct FVector* vNormal, struct SFXName* nmBoneName );
	void GetConeLocationForAI ( struct FVector* vLocation, struct FRotator* rRotation );
	void GetConeLocationForPlayer ( struct FVector* vLocation, struct FRotator* rRotation );
	void GetConeLocation ( struct FVector* vLocation, struct FRotator* rRotation );
	void GetReleaseLocationForAI ( unsigned long bUseBeamSpecialHandling, struct FVector* vLocation, struct FVector* vNormal, class AActor** oActorAtReleaseLocation );
	void GetReleaseLocationForPlayer ( struct FVector* vLocation, struct FVector* vNormal, class AActor** oActorAtReleaseLocation );
	void GetReleaseLocation ( unsigned long bUseBeamSpecialHandling, struct FVector* vLocation, struct FVector* vNormal, class AActor** oActorAtReleaseLocation );
	void GetProjectileLocation ( struct FVector* vLocation, struct FVector* vTargetLocation );
	bool CreatePowerScript ( );
	void UpdateBeamVFX ( unsigned char eResource, float fDeltaTime );
	void DisplayBeamVFX ( unsigned char eResource, struct FVector const& vStartLocation, struct FVector const& vDestination );
	void StopPowerVFX ( unsigned char eResource, unsigned long bAllowVFXToFinish );
	void DisplayPowerVFX ( unsigned char eResource );
	void GetAnimationAvailability ( );
	void UnloadAnimSet ( );
	bool LoadAnimSet ( );
	bool DoImpact ( class AActor* oActor, int* nImpactedCount );
	bool ReleaseDualPower ( );
	bool ReleaseVerticalCylinderPower ( struct FVector const& vLocation, struct FVector const& vNormal );
	bool ReleaseConePower ( struct FVector const& vLocation, struct FRotator const& rRotation );
	bool ReleaseImpactVolumePower ( );
	bool ReleaseRadiusPower ( struct FVector const& vLocation, struct FVector const& vNormal, class AActor* oActorAtReleaseLocation, unsigned long bIncludeCaster );
	bool ReleaseProjectilePower ( );
	bool EndUsingPhase ( );
	bool StartUsingPhase ( );
	bool EndReleasePhase ( );
	bool StartReleasePhase ( );
	bool EndCastingPhase ( unsigned long bAllowVFXToFinish );
	bool StartCastingPhase ( );
	void InitializeInternal ( );
	void SetTargetLocation ( struct FVector const& vLocation );
	void SetTargetActor ( class AActor* oTarget );
	bool CancelPower ( unsigned long bOnlyCancelIfCasting );
	void AnimationReadyForPowerRelease ( );
};

// Class SFXGame.BioActiveSelectWeapon
// 0x0037 (0x00AC - 0x0075)
class UBioActiveSelectWeapon : public UBioActive
{
public:
	class UBioEquipment*                               m_oEquipment;                                     		// 0x0078 (0x0008) [0x0000000000000000]              
	class UBioPawnBehavior*                            m_oPawnBehavior;                                  		// 0x0080 (0x0008) [0x0000000000000000]              
	class USkelControlLimb*                            m_oWeaponIKControl;                               		// 0x0088 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_nmWeaponNode;                                   		// 0x0090 (0x0008) [0x0000000000000000]              
	class UBioAnimNodeBlendWeaponEquip*                m_oSelectWeaponAnimNode;                          		// 0x0098 (0x0008) [0x0000000000000000]              
	float                                              m_fDelay;                                         		// 0x00A0 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bHolsterCurrentWeapon : 1;                      		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bDrawCurrentWeapon : 1;                         		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bCycleNextWeapon : 1;                           		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_isWeaponHolstered : 1;                          		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_isWeaponDrawn : 1;                              		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_isFadingOutDrawAnim : 1;                        		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bHasActiveTicked : 1;                           		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bHasAnimTicked : 1;                             		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned char                                      m_eWeaponToSwitchTo;                              		// 0x00A8 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_state;                                          		// 0x00A9 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_previousState;                                  		// 0x00AA (0x0001) [0x0000000000000000]              
	unsigned char                                      m_ePendingActionState;                            		// 0x00AB (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool StartActive ( );
	void FinishDrawAnim ( );
	void FadeOutDrawAnim ( );
	void SwapDrawAnim ( );
	void FinishHolsterAnim ( );
	void FadeOutHolsterAnim ( );
	void SwapHolsterAnim ( );
	bool eventValidSuperMode ( unsigned char eMode );
};

// Class SFXGame.BioActiveShootBase
// 0x000B (0x0080 - 0x0075)
class UBioActiveShootBase : public UBioActive
{
public:
	class ABioWeaponRanged*                            m_weapon;                                         		// 0x0078 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioActiveShoot
// 0x001C (0x009C - 0x0080)
class UBioActiveShoot : public UBioActiveShootBase
{
public:
	class ABioPawn*                                    m_oOwnerPawn;                                     		// 0x0080 (0x0008) [0x0000000000000000]              
	float                                              m_fAnimRate;                                      		// 0x0088 (0x0004) [0x0000000000000000]              
	float                                              m_fLeanDelayTimer;                                		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLeanDelayTime;                                 		// 0x0090 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fLeanDelayVarianceTime;                         		// 0x0094 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bStartedInCover : 1;                            		// 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_isLoopingFireAnimationRateVariable : 1;         		// 0x0098 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      m_isFiring : 1;                                   		// 0x0098 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bIsBlocked : 1;                                 		// 0x0098 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bIgnoreEndingConditions : 1;                      		// 0x0098 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct SFXName eventGetEventTypeName ( );
	bool eventValidSuperMode ( unsigned char eMode );
	void InitializeInternal ( );
};

// Class SFXGame.BioActiveShootVehicle
// 0x0004 (0x0084 - 0x0080)
class UBioActiveShootVehicle : public UBioActiveShootBase
{
public:
	int                                                m_nWeaponIndex;                                   		// 0x0080 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void InitializeInternal ( );
};

// Class SFXGame.BioActiveShootVehicleCannon
// 0x0000 (0x0084 - 0x0084)
class UBioActiveShootVehicleCannon : public UBioActiveShootVehicle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void InitializeInternal ( );
};

// Class SFXGame.BioActiveShootVehicleMachineGun
// 0x0000 (0x0084 - 0x0084)
class UBioActiveShootVehicleMachineGun : public UBioActiveShootVehicle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void InitializeInternal ( );
};

// Class SFXGame.BioActiveUseArtPlaceable
// 0x0013 (0x0088 - 0x0075)
class UBioActiveUseArtPlaceable : public UBioActive
{
public:
	class UBioReactiveUseArtPlaceable*                 Reactive;                                         		// 0x0078 (0x0008) [0x0000000000000000]              
	float                                              m_fDelay;                                         		// 0x0080 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bDone : 1;                                      		// 0x0084 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool DisplayProgress ( );
	float GetProgress ( );
	bool eventValidSuperMode ( unsigned char eMode );
	void InitializeInternal ( );
};

// Class SFXGame.BioReactive
// 0x0004 (0x0074 - 0x0070)
class UBioReactive : public UBioAFComponent
{
public:
	unsigned long                                      m_bActivated : 1;                                 		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bDataInitialized : 1;                           		// 0x0070 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Initialize ( class AActor* oOwner, class AActor* oInstigator );
	void InitializeInternal ( );
};

// Class SFXGame.BioReactiveUseArtPlaceable
// 0x0024 (0x0098 - 0x0074)
class UBioReactiveUseArtPlaceable : public UBioReactive
{
public:
	struct SFXName                                     m_nmSkillToGoto;                                  		// 0x0074 (0x0008) [0x0000000000000000]              
	class UBioActiveUseArtPlaceable*                   Active;                                           		// 0x007C (0x0008) [0x0000000000000000]              
	float                                              m_fCostToUse;                                     		// 0x0084 (0x0004) [0x0000000000000000]              
	float                                              m_fFullSkillTime;                                 		// 0x0088 (0x0004) [0x0000000000000000]              
	float                                              m_fSkillTimeDone;                                 		// 0x008C (0x0004) [0x0000000000000000]              
	float                                              fCount;                                           		// 0x0090 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bTransitionIntialized : 1;                      		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDone : 1;                                        		// 0x0094 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void InitializeInternal ( );
};

// Class SFXGame.BioSuperMode
// 0x005F (0x00BF - 0x0060)
class UBioSuperMode : public UObject
{
public:
	struct SFXName                                     m_aSophistication2DAColumnName[ 0x7 ];            		// 0x0060 (0x0038) [0x0000000000000000]              
	class AActor*                                      Owner;                                            		// 0x0098 (0x0008) [0x0000000000001000]              ( CPF_Native )
	float                                              m_fMovingThreshold;                               		// 0x00A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_fRotMovingThreshold;                            		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_fRotInterpThreshold;                            		// 0x00A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                m_nRangeRow;                                      		// 0x00AC (0x0004) [0x0000000000000000]              
	float                                              m_fElevationThreshold;                            		// 0x00B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_fSuppressionTimeThreshold;                      		// 0x00B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      m_bUpdateReticule : 1;                            		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bIsActivated : 1;                               		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bTargetRequired : 1;                            		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bIgnoreReticuleResetOnce : 1;                   		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned char                                      m_eSuperModeType;                                 		// 0x00BC (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eReticuleStatsIndex;                            		// 0x00BD (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      m_eRangeInfoStatus;                               		// 0x00BE (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ResetReticule ( );
};

// Class SFXGame.BioActorFactory
// 0x0008 (0x0094 - 0x008C)
class UBioActorFactory : public UActorFactory
{
public:
	class UBioActorType*                               m_oActorType;                                     		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSpawnPoint
// 0x0018 (0x029C - 0x0284)
class ABioSpawnPoint : public AActor
{
public:
	class UBioActorType*                               m_oActorType;                                     		// 0x0284 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     m_nmSpawnedActorTag;                              		// 0x028C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioActorFactory*                            m_pFactory;                                       		// 0x0294 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSpawnPointVehicle
// 0x000C (0x02A8 - 0x029C)
class ABioSpawnPointVehicle : public ABioSpawnPoint
{
public:
	class UBio2DA*                                     m_pGarage2DA;                                     		// 0x029C (0x0008) [0x0000000000000000]              
	int                                                m_nSpawnIndex;                                    		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioActorType
// 0x006C (0x00D8 - 0x006C)
class UBioActorType : public UBioBaseComponent
{
public:
	FString                                            ActorGameName;                                    		// 0x006C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct SFXName>                             m_aPowers;                                        		// 0x007C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      m_clsActor;                                       		// 0x008C (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      AIController;                                     		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBio2DA*                                     m_CharacterIcons;                                 		// 0x009C (0x0008) [0x0000000000000000]              
	int                                                m_nTreasureType;                                  		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ActorGameNameStrRef;                              		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPhysicsDamageRelativeVelocityThreshold;        		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPhysicsDamageScalar;                           		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPhysicsDamageImpulseScalar;                    		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPhysicsDamageMinThreshold;                     		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPhysicsDamageMaxAllowedPerHit;                 		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nPhysicsLevel;                                  		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fUseRange;                                      		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nRequiredScanLevel;                             		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nTargetTipText;                                 		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nCharHeadId;                                    		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bIsGrenadeObstruction : 1;                      		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bGenerateTreasure : 1;                          		// 0x00D4 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      m_bMin1Health : 1;                                		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bIsAffectedByBioRadialImpulse : 1;              		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bBlockBioRadialImpulse : 1;                     		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      m_bTargetable : 1;                                		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      m_bCombatTargetable : 1;                          		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      m_bDefaultActionPossibleOverridden : 1;           		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      m_bIsThorianControlled : 1;                       		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      m_bPlotProtected : 1;                             		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      m_bSuppressDisintegration : 1;                    		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool IsDisintegrationSuppressed ( );
	bool IsPlotProtected ( );
	int GetSquadName ( );
	int GetSquadIcon ( unsigned long bIsDead );
};

// Class SFXGame.BioInteractiveActorType
// 0x0000 (0x00D8 - 0x00D8)
class UBioInteractiveActorType : public UBioActorType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioArtPlaceableType
// 0x006B (0x0143 - 0x00D8)
class UBioArtPlaceableType : public UBioInteractiveActorType
{
public:
	TArray<struct FCoverInformation>                   m_aCoverSlots;                                    		// 0x00D8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UBioBaseAppearancePlaceable*                 m_oApperance;                                     		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     m_nmDestroyedState;                               		// 0x00F0 (0x0008) [0x0000000000000000]              
	struct SFXName                                     m_nmDamagedState;                                 		// 0x00F8 (0x0008) [0x0000000000000000]              
	struct SFXName                                     DefaultStartingState;                             		// 0x0100 (0x0008) [0x0000000000000000]              
	struct SFXName                                     OnUseSucceed;                                     		// 0x0108 (0x0008) [0x0000000000000000]              
	struct SFXName                                     OnUseFail;                                        		// 0x0110 (0x0008) [0x0000000000000000]              
	struct SFXName                                     DefaultInertState;                                		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioArtPlaceableRoles*                       m_RoleData;                                       		// 0x0120 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioDamageType*                              m_pImpulseDamageType;                             		// 0x0128 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              m_fHealth;                                        		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDamagePerUnitImpulse;                          		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_isCover : 1;                                    		// 0x0138 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bAlwaysReceiveImpulse : 1;                      		// 0x0138 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bDamageOnImpulse : 1;                           		// 0x0138 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bPlayerOnly : 1;                                  		// 0x0138 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bPhysicsAffectable : 1;                         		// 0x0138 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      m_bWakeOnLevelStart : 1;                          		// 0x0138 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      m_bPhysicsAffectableOnDestroyed : 1;              		// 0x0138 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      m_bPhysicsFixedAnimated : 1;                      		// 0x0138 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      m_bIsContainer : 1;                               		// 0x0138 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      m_bCanForceOpen : 1;                              		// 0x0138 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      m_bAllowRoleCustomization : 1;                    		// 0x0138 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      m_bIsStatic : 1;                                  		// 0x0138 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      m_bIsMovable : 1;                                 		// 0x0138 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      m_bIsDeletable : 1;                               		// 0x0138 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned char                                      m_eUseCase;                                       		// 0x013C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_StartingState;                                  		// 0x013D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_InertState;                                     		// 0x013E (0x0001) [0x0000000000000000]              
	unsigned char                                      m_State0;                                         		// 0x013F (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_State1;                                         		// 0x0140 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_SkillDifficulty;                                		// 0x0141 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eRole;                                          		// 0x0142 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ApplyRoleToBehavior ( class UBioArtPlaceableBehavior* oBehave );
	void AllowRoleCustomization ( unsigned long bYes );
	void ApplyRole ( int nNewRole, class UBioArtPlaceableBehavior* oBehave );
};

// Class SFXGame.BioArtPlaceableInertType
// 0x0001 (0x0144 - 0x0143)
class UBioArtPlaceableInertType : public UBioArtPlaceableType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioPawnType
// 0x0158 (0x0230 - 0x00D8)
class UBioPawnType : public UBioInteractiveActorType
{
public:
	struct FParticleSystemSpec                         m_aParticleSystemSpec[ 0x5 ];                     		// 0x00D8 (0x008C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FSoundSpec                                  m_aSoundSpec[ 0x3 ];                              		// 0x0164 (0x0024) [0x0000000000000001]              ( CPF_Edit )
	class UBio_Appr_Character*                         m_oAppearance;                                    		// 0x0188 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBio_Appr_Character_Settings*                m_oAppearanceSettings;                            		// 0x0190 (0x0008) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UBioMorphFace*                               m_oMorphFace;                                     		// 0x0198 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     m_nmSightType;                                    		// 0x01A0 (0x0008) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	struct SFXName                                     m_nmHearingType;                                  		// 0x01A8 (0x0008) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	class UBioCreatureSoundSet*                        m_pSndSetVOPkg;                                   		// 0x01B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UFaceFXAnimSet*                              m_pSndSetFaceFXPkg;                               		// 0x01B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   m_oRollingIdle;                                   		// 0x01C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   m_oRollingStartMoving;                            		// 0x01C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     m_nmGrenadeSocket;                                		// 0x01D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             m_vfxDepartuerEffect;                             		// 0x01D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             m_vfxArivalEffect;                                		// 0x01E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioMaterialOverride*                        m_oMaterialOverrides;                             		// 0x01E8 (0x0008) [0x0000000004420009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	float                                              m_fPowerUsePercent;                               		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nMinAutoLODLevel;                               		// 0x01F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlyingPitchMin;                                   		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlyingPitchMax;                                   		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchTiltDegrees;                                 		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RollTiltDegrees;                                  		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TiltInterpSpeed;                                  		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPhysicsRecoverSpeedThreshold;                  		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPhysicsSettleDownTime;                         		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPhysicsDeathSpeedThreshold;                    		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDeathAnimationMagnitudeThreshold;              		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPhysicsThreshold;                              		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPhysicsThresholdRegenerationRate;              		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fAINoiseMag;                                    		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bIsArmorOverridden : 1;                         		// 0x0228 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bPawnHideWithCameraCollision : 1;               		// 0x0228 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bVelocityTilt : 1;                                		// 0x0228 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAllowHeadshots : 1;                              		// 0x0228 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bCanBeBumped : 1;                               		// 0x0228 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      m_bTerminateRagdollOnDeath : 1;                   		// 0x0228 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      m_bShouldGrantExperienceOnKill : 1;               		// 0x0228 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      m_bCanBePhysicsImpacted : 1;                      		// 0x0228 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned char                                      m_eReportMethod;                                  		// 0x022C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eDefaultClassification;                         		// 0x022D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eUseRollingInPhysicsMode;                       		// 0x022E (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_StartingPhysicsMode;                            		// 0x022F (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioPawnChallengeScaledType
// 0x0045 (0x0275 - 0x0230)
class UBioPawnChallengeScaledType : public UBioPawnType
{
public:
	struct SFXName                                     m_aRankNames[ 0x4 ];                              		// 0x0230 (0x0020) [0x0000000000000002]              ( CPF_Const )
	class UBio2DA*                                     m_tblEquipment;                                   		// 0x0250 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBio2DA*                                     m_tblChallenge;                                   		// 0x0258 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UBio2DA*                                     m_tblAttributes;                                  		// 0x0260 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBio2DA*                                     m_tblTalents;                                     		// 0x0268 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      m_bEnsureXModIntegrity : 1;                       		// 0x0270 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned char                                      m_eRank;                                          		// 0x0274 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	unsigned char GetBioPawnChallengeRank ( );
	int ComputeRankedChallengeLevel ( int effectiveChallengeLevel );
};

// Class SFXGame.BioVehicleBaseType
// 0x0014 (0x00EC - 0x00D8)
class UBioVehicleBaseType : public UBioInteractiveActorType
{
public:
	class UBioAppearanceVehicle*                       m_oAppearance;                                    		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioAppearanceVehicleSettings*               m_oAppearanceSettings;                            		// 0x00E0 (0x0008) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      m_bMovementEnabled : 1;                           		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioStageType
// 0x0018 (0x00F0 - 0x00D8)
class UBioStageType : public UBioActorType
{
public:
	TArray<struct FBioStageCamera>                     m_CameraList;                                     		// 0x00D8 (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	class USkeletalMesh*                               m_Mesh;                                           		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioArtPlaceableRoles
// 0x0030 (0x0090 - 0x0060)
class UBioArtPlaceableRoles : public UObject
{
public:
	struct FArtPlaceableRole                           oDefaults;                                        		// 0x0060 (0x0020) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	TArray<struct FArtPlaceableRole>                   aRoles;                                           		// 0x0080 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAiController
// 0x0149 (0x0619 - 0x04D0)
class ABioAiController : public AAIController
{
public:
	TArray<struct SFXName>                             AILogFilter;                                      		// 0x04D0 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<class UBioSeqData*>                         m_aoActionFrameworkQueue;                         		// 0x04E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class UBioSeqData*>                         m_aoDelayedActionCompleteEvents;                  		// 0x04F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FCoverRecord                                CurrentCoverSlot;                                 		// 0x0500 (0x0014) [0x0000000000000000]              
	struct FVector                                     MovePoint;                                        		// 0x0514 (0x000C) [0x0000000000000000]              
	struct FVector                                     vMoveTarget;                                      		// 0x0520 (0x000C) [0x0000000000000000]              
	struct FVector                                     FollowTimeout_LastLoc;                            		// 0x052C (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vLastBumpTargetPosition;                        		// 0x0538 (0x000C) [0x0000000000000000]              
	class AFileLog*                                    AILogFile;                                        		// 0x0544 (0x0008) [0x0000000000000000]              
	class ABioPawn*                                    MyBP;                                             		// 0x054C (0x0008) [0x0000000000000000]              
	class UBioPawnBehavior*                            MyBPBehavior;                                     		// 0x0554 (0x0008) [0x0000000000000000]              
	class AActor*                                      MoveGoal;                                         		// 0x055C (0x0008) [0x0000000000000000]              
	class ABioAiController*                            OldController;                                    		// 0x0564 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     DefaultState;                                     		// 0x056C (0x0008) [0x0000000000000000]              
	struct SFXName                                     m_nPauseActionPrevState;                          		// 0x0574 (0x0008) [0x0000000000000000]              
	class ABioDEBUGMarker*                             DBGMarker;                                        		// 0x057C (0x0008) [0x0000000000000000]              
	class ABioDEBUGMarker*                             DBGErrorMarker;                                   		// 0x0584 (0x0008) [0x0000000000000000]              
	struct SFXName                                     nmPauseControllerState;                           		// 0x058C (0x0008) [0x0000000000000000]              
	struct SFXName                                     m_nmLastState;                                    		// 0x0594 (0x0008) [0x0000000000000000]              
	class UBioSeqData*                                 m_oSeqDataCache;                                  		// 0x059C (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class ABioPawn*                                    m_oBioPawnCache;                                  		// 0x05A4 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UBioSeqData*                                 m_oSeqDataTEMP;                                   		// 0x05AC (0x0008) [0x0000000004002001]              ( CPF_Edit | CPF_Transient | CPF_EditInline )
	class UBioGrenadeInterfaceAI*                      m_grenadeInterface;                               		// 0x05B4 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              MoveOffset;                                       		// 0x05BC (0x0004) [0x0000000000000000]              
	float                                              FollowTimeout_Time;                               		// 0x05C0 (0x0004) [0x0000000000000000]              
	float                                              CombatModePenalty;                                		// 0x05C4 (0x0004) [0x0000000000000000]              
	float                                              m_fActivateTime;                                  		// 0x05C8 (0x0004) [0x0000000000000000]              
	float                                              m_fAbortTargetPercent;                            		// 0x05CC (0x0004) [0x0000000000000000]              
	float                                              m_fMinTargetTargetPercent;                        		// 0x05D0 (0x0004) [0x0000000000000000]              
	float                                              m_fMinCriticalTargetPercent;                      		// 0x05D4 (0x0004) [0x0000000000000000]              
	float                                              m_fFireTimeOut;                                   		// 0x05D8 (0x0004) [0x0000000000000000]              
	float                                              m_AIWeaponTargetStepoutBiases;                    		// 0x05DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_AIPowerTargetStepoutBiases;                     		// 0x05E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nCurrentResourceMask;                           		// 0x05E4 (0x0004) [0x0000000000000000]              
	int                                                m_nFriendResourceMask;                            		// 0x05E8 (0x0004) [0x0000000000000000]              
	int                                                m_nBehaviorResourceMask;                          		// 0x05EC (0x0004) [0x0000000000000000]              
	int                                                m_nStateResourceMask;                             		// 0x05F0 (0x0004) [0x0000000000000000]              
	int                                                m_nActionResourceMask;                            		// 0x05F4 (0x0004) [0x0000000000000000]              
	float                                              m_fStartFireDelay;                                		// 0x05F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPartyCoverSearchRadius;                        		// 0x05FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMobTargetMoveTolerance;                        		// 0x0600 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fSquadTickTimer;                                		// 0x0604 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLastSteeringMoveAbortTime;                     		// 0x0608 (0x0004) [0x0000000000000000]              
	float                                              m_fDefaultMoveOffset;                             		// 0x060C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fFiringArcAngle;                                		// 0x0610 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bAILogging : 1;                                   		// 0x0614 (0x0004) [0x0000000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	unsigned long                                      bAILogToWindow : 1;                               		// 0x0614 (0x0004) [0x0000000000004001] [0x00000002] ( CPF_Edit | CPF_Config )
	unsigned long                                      bReachedMoveGoal : 1;                             		// 0x0614 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bWithinRangeOfTarget : 1;                       		// 0x0614 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bCanResumeSteeringMovement : 1;                 		// 0x0614 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bOverrideSquadAI : 1;                           		// 0x0614 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bWantsToSprint : 1;                               		// 0x0614 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bDebugDumpActionQueue : 1;                        		// 0x0614 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bWasShooting : 1;                               		// 0x0614 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      m_bWasThrowGrenade : 1;                           		// 0x0614 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      m_bStartedFiring : 1;                             		// 0x0614 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      m_bAllActionsClearing : 1;                        		// 0x0614 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      m_bDesignerClearAllActionsDisplay : 1;            		// 0x0614 (0x0004) [0x0000000000004000] [0x00001000] ( CPF_Config )
	unsigned long                                      m_bPawnTeleportOnFailure : 1;                     		// 0x0614 (0x0004) [0x0000000000004000] [0x00002000] ( CPF_Config )
	unsigned char                                      m_eLastSawTarget;                                 		// 0x0618 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool IsTargetInFiringArc ( class AActor* pTarget );
	bool HasLOSToTarget ( class AActor* pTarget, float* fTimeOfHit );
	bool DoesGameModeAllowMovement ( );
	bool ShouldCancelMove ( );
	void eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector const& StartFireLoc );
	bool GetAimLocation ( struct FVector* AimLocation );
	void eventUnPossess ( );
	void eventPossess ( class APawn* NewPawn, unsigned long bVehicleTransition );
	void eventAILog_Internal ( FString const& LogText, struct SFXName LogCategory, unsigned long bForce );
	void Initialize ( );
	void eventOnHacked ( );
	void eventOnProximityAlarm ( class AActor* oTarget, int nRelationship );
	void eventOnSquadSeen ( class AActor* oSquad );
	void eventOnActionComplete_Movement ( struct SFXName nmAction, int nReason, class AActor* oTarget, struct FVector const& vLocation );
	void eventOnActionComplete_Combat ( struct SFXName nmAction, struct SFXName nmTechnique, int nReason, class AActor* oLastTarget );
	void eventOnDamaged ( class AController* oInstigator, float fDamage );
	void eventOnCastAt ( class APawn* oAttacker, struct SFXName nmPower );
	void eventOnAttacked ( class APawn* oAttacker, struct SFXName nmWeapon );
	void eventOnAbilityDisabled ( int nEnableType, struct SFXName nmSubType );
	void eventOnAbilityEnabled ( int nEnableType, struct SFXName nmSubType );
	void eventOnNoCombatAction ( );
	void eventOnDeath ( class AController* oKiller );
	class UClass* GetSaveObjectClass ( );
	bool CanUseSteeringMovement ( );
	void eventPostPollMove ( );
	bool eventCanMount ( );
	void eventDoneWeaponSelection ( unsigned char Weapon );
	void eventDoneGrenadeThrow ( );
	bool eventCanPullTrigger ( float fDeltaT, class AActor* oTarget, struct FVector const& vTargetLocation );
	void eventFiringPullTrigger ( );
	void eventActionComplete_None ( struct SFXName Action, int nReason );
	void eventHearNoise ( float Loudness, class AActor* NoiseMaker, struct FVector const& vNoiseLocation, struct SFXName NoiseType );
	void eventNotifyCoverDisabled ( class AActor* Link, int SlotIdx, unsigned long bAdjacentIdx );
	void CancelCover ( int nReason );
	bool eventIsEngagedWithCover ( );
	bool IsTakingCover ( );
	void eventOnDisengageWithCover ( class AActor* oCoverObj );
	void eventOnEngagedWithCover ( class AActor* oCoverObj );
	bool FindNearestOpenLocation ( struct FVector const& vStartLocation, class APawn* oTarget, struct FVector* vFoundLocation );
	bool LeaderCanITeleport ( struct FVector const& vOldLocation, struct FVector const& vNewLocation );
	bool HandleTeleport ( struct FVector const& vLoc, unsigned long bFindNearestOpenLocation, unsigned long bForceTeleport, class APawn* oTarget );
	bool TeleportToLeader ( float DistanceBack );
	void EndRestFormation ( );
	void BeginRestFormation ( );
	class AActor* GetLastObjectInRouteCache ( class AActor* oMoveTarget );
	class AActor* GetNextPathNode ( );
	void ClearRouteCache ( );
	void DropRouteCache ( );
	void eventUpdateFollowerMarkerPosition ( int SquadId );
	bool IsAttackTargetValid ( class APawn* oAttackTarget, unsigned long bTestShooting, unsigned long bTestExposed );
	bool HandleSteeringMovementFailed ( );
	float GetMoveOffset ( );
	void eventGetFollowTargets ( class APawn** oFollow, struct FVector* vMoveTo );
	void eventLeaderChanged ( class APawn* OldLeader, class APawn* NewLeader );
	bool ComputeGroundLevel ( unsigned long drawFail, unsigned long drawSussess, struct FVector* vPoint );
	void DebugGroundHeight ( struct FVector const& vLoc );
	bool eventIsControllerPaused ( );
	void eventUnPauseController ( );
	void eventPauseController ( );
	void eventClearSomeActions_Queue ( FString const& sClearLabel );
	void eventClearSomeActions_State ( FString const& sClearLabel );
	void ClearAllActions ( FString const& sClearLabel );
	void AdjustFocus ( );
	void AdjustGroundSpeed ( );
	void eventOnCancelAction ( );
	void RestoreAI ( );
	void ChangeAI ( class UClass* NewAIClass, unsigned long bCacheOldController );
	void eventPostBeginPlay ( );
	void eventTick ( float DeltaTime );
	bool eventPlayerActivate ( class AActor* Target_ );
	void AddMoveToTag ( struct SFXName MoveToTag, float PointTolerance, unsigned long bWalking, unsigned long bHead );
	bool IsMetaActionInProgress ( );
	bool eventNotifyBump ( class AActor* Other, struct FVector const& HitNormal );
	bool eventGetNextPredictedMoveLocation ( struct FVector* out_vLoc );
	void eventLookAtPawn ( class ABioPawn* oLookTarget, int nRank );
	void eventOnLeftPlaypen ( class ANavigationPoint* oNavPoint );
	void eventonStopFollowerHoldPosition ( );
	void eventonStartFollowerHoldPosition ( class ABioSquadHoldMarker* oHoldMarker );
	void eventOnLeavingStasis ( );
	void eventOnEnteringStasis ( );
	void ExtendFiringTimeOut ( float fTime );
	void OnStreamingLevelLeavingStasis ( );
	void OnStreamingLevelEnteringStasis ( );
	void UpdateGenericTacticalMovement ( unsigned long bMoving );
	class UBioEpicPawnBehavior* GetPawnBehavior ( class APawn* oPawn );
	void BioSetAdjustLocation ( struct FVector const& vAdjustLoc );
	void CancelCapability ( class UBioCapability* oCapability );
	float GetCapabilityPowerBuildUp ( class UBioCapability* oCapability );
	float GetCapabilityImpactRadius ( class UBioCapability* oCapability );
	bool GetCapabilityIsEnabled ( class UBioCapability* oCapability );
	float GetCapabilityCoolDownTimeRemaining ( class UBioCapability* oCapability );
	class UBioSeqData* AddCapability ( class UBioCapability* oCapability, float fReqStabilityRatio, float fAbortStabilityRatio, float fTimeOut, class APawn* oTarget, struct FVector const& vTarget );
	class UBioSeqData* DoCapability ( class UBioCapability* oCapability, float fReqStabilityRatio, float fAbortStabilityRatio, float fTimeOut, class APawn* oTarget, struct FVector const& vTarget );
	void MobTarget ( class AActor* oTarget, float fMoveTolerance );
	bool AdjustSteeringMoveSpeed ( struct FVector const& vSteering );
	bool GetSteeringVector ( struct FVector* vSteering );
	void SteeringMovement ( );
	class AActor* GetTarget ( );
	bool ExploreMode ( float fDelaySeconds );
	bool ReadyMode ( float fDelaySeconds );
	bool UnlockTarget ( unsigned long bSwitchActionState );
	bool LockTarget ( class AActor* oTarget );
	class UBioSeqData* AddTempLookAt ( class AActor* oTarget, struct FVector const& vPoint, struct FVector const& vRelitivePoint );
	class UBioSeqData* AddUseArtPlaceable ( class ABioArtPlaceable* oAP );
	class UBioSeqData* AddUsePower ( struct SFXName nmPower, class AActor* oTarget, unsigned long bOrderedByPlayer, float fTimeOut, struct FVector const& vTarget );
	unsigned char SwitchWeaponTypeToRangedItemType ( unsigned char nSwitchType );
	unsigned char RangedItemTypeToSwitchWeaponType ( unsigned char nWeaponType );
	unsigned char GetSelectedWeaponSwitchType ( );
	bool GetSelectedWeapon ( unsigned char* out_Type );
	class UBioSeqData* AddSelectWeapon ( unsigned char NewWeapon );
	class UBioSeqData* AddThrowGrenade ( class APawn* pTarget, struct FVector const& vTarget, int nGrenadeType );
	class UBioSeqData* AddStopFiring ( );
	class UBioSeqData* AddStartFiring ( class AActor* pTarget, float fReqStabilityRatio, float fAbortStabilityRatio, float fTimeOut, unsigned long bIgnoreLOS );
	class UBioSeqData* PushUseCover ( struct FCoverRecord const& oCoverInfo );
	class UBioSeqData* PushDoWorldInteraction ( class ABioWp_ActionStation* ActionStation, TArray<class UBioActivityTiming*> const& Timings_ );
	class UBioSeqData* PushPlayAnimation ( TArray<class UAnimSet*> const& AnimationSets, TArray<struct SFXName> const& AnimName, unsigned long Looping, unsigned long Random );
	class UBioSeqData* PushMobTarget ( class AActor* MoveToObject, float PointTolerance );
	class UBioSeqData* PushMoveAndAttack ( class AActor* MoveToObject, unsigned long bWalking, class UBioCapability* oCapability, float fReqStab, float fAbortStab, float fTimeOut, class AActor* oAttackTarget, unsigned long bUseMobMovement );
	class UBioSeqData* PushRandomWalk ( int MaxWalkDist_, float DelayAfterWalk_ );
	class UBioSeqData* PushFollowSquadLeader ( );
	class UBioSeqData* PushMoveToPointList ( float fTolerance, unsigned long bWalking, TArray<struct FVector>* aMoveToLocations );
	class UBioSeqData* PushMoveToPoint ( struct FVector const& vLoc, float PointTolerance, unsigned long bWalking, unsigned long bRequiresPrecisionMovement );
	class UBioSeqData* PushMoveToObject ( class AActor* MoveToObject, float PointTolerance, unsigned long bWalking, unsigned long bRequiresPrecisionMovement );
	void ResumeWalking ( );
	class UBioSeqData* PushWalkWaypointSet ( class ABioWaypointSet* oWaypointSet, unsigned char eWalkType, unsigned long bWalking, float fMoveTolerance, int nNextWaypoint, unsigned long bCounting_Up );
	class UBioSeqData* AddDelay ( float DelayTime );
	class UBioSeqData* PushDelay ( float DelayTime );
	bool IsOnPathNetwork ( class APawn* oTarget );
	bool DirectWalkCheck ( class AActor* pTarget, struct FVector* vTarget );
	void PrecisionMoveTo ( struct FVector const& vLoc, struct FRotator const& rRot );
	bool WaitForActionToComplete ( class UBioSeqData* oSeqData );
	void ClearFriendActionResource ( );
	void SetFriendActionResource ( int nResource );
	bool ClearActionResource ( unsigned char ActionTYP );
	bool ReserveActionResource ( unsigned char ActionTYP, int nResource );
	bool CheckActionResource ( int nResource );
	bool DoingCombatTransition ( );
	bool CanUsePowers ( );
	bool CanUseGrenades ( );
	bool CanUseWeapons ( );
	bool CanUseStack ( );
	bool CanUseQueue ( );
	void QueueCompletionEvent ( class UBioSeqData* oCompletedAction );
	void HandleCompletionEvent ( class UBioSeqData* oCompletedAction );
	void eventActionStarving ( class UClass* cSeqClass );
	bool ClearActionQueue ( );
	bool HasActions ( );
	void BioVINCE_MapName_Hench_Teleport ( float X, float Y );
	void BioVINCE_MapName_Hench_FailToPath ( float X, float Y );
	void BioOnPawnActionStateChanged ( );
};

// Class SFXGame.BioAI_Ambient
// 0x0013 (0x062C - 0x0619)
class ABioAI_Ambient : public ABioAiController
{
public:
	struct FVector                                     m_vRepulsor;                                      		// 0x061C (0x000C) [0x0000000000000000]              
	float                                              m_fTickTimer;                                     		// 0x0628 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool DoesGameModeAllowMovement ( );
	void eventTick ( float DeltaTime );
	void eventHearNoise ( float Loudness, class AActor* NoiseMaker, struct FVector const& vNoiseLocation, struct SFXName NoiseType );
	void Initialize ( );
	bool AdjustSteeringMoveSpeed ( struct FVector const& vSteering );
	bool GetSteeringVector ( struct FVector* vSteering );
};

// Class SFXGame.BioAI_Sneaky
// 0x0000 (0x062C - 0x062C)
class ABioAI_Sneaky : public ABioAI_Ambient
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool GetSteeringVector ( struct FVector* vSteering );
};

// Class SFXGame.BioAI_Core
// 0x0033 (0x064C - 0x0619)
class ABioAI_Core : public ABioAiController
{
public:
	float                                              m_fDelayNoAction;                                 		// 0x061C (0x0004) [0x0000000000000000]              
	float                                              m_fDelayStartAction;                              		// 0x0620 (0x0004) [0x0000000000000000]              
	float                                              m_fCoverSearchRadius;                             		// 0x0624 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMinCoverRange;                                 		// 0x0628 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fIdealDistance;                                 		// 0x062C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSlowRange;                                     		// 0x0630 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDeadRange;                                     		// 0x0634 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSeparationDistance;                            		// 0x0638 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCloseRangeSpeed;                               		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_iTicksUntilEvaluateCombatActions;               		// 0x0640 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fRunThreshold;                                  		// 0x0644 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bShouldCohere : 1;                              		// 0x0648 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bShouldSeparate : 1;                            		// 0x0648 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bShouldPreserveMomentum : 1;                    		// 0x0648 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bTargetOutsidePlaypen : 1;                      		// 0x0648 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bAllowWeaponSwitch : 1;                         		// 0x0648 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bUseCoverWithNoLOS : 1;                         		// 0x0648 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      m_bAlwaysReevaluateCover : 1;                     		// 0x0648 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      m_bShouldUseSteeringMovement : 1;                 		// 0x0648 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      m_bShouldEvaluateCombatActions : 1;               		// 0x0648 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool RespondToBump ( class AActor* Other, struct FVector const& HitNormal );
	bool WantsToRun ( float fDistance );
	void SetMovementSpeed ( );
	void SetMoveTimer ( struct FVector* vMove );
	void MoveTowardLocation ( struct FVector const& vLocation, float fOffset );
	void ReturnToPlaypen ( );
	unsigned char GetTargetDifficulty ( class AActor* oTarget );
	bool IsAttackTargetValid ( class APawn* oAttackTarget, unsigned long bTestShooting, unsigned long bTestExposed );
	float GetHealthPercentage ( class APawn* oTestPawn );
	void eventGetFollowTargets ( class APawn** oFollow, struct FVector* vMoveTo );
	class AActor* GetTarget ( );
	void SetTarget ( class AActor* oTarget );
	bool eventIsCoverPositionValid ( struct FVector const& vLocation, struct FRotator const& rRotation, int* nRank );
	void eventonStopFollowerHoldPosition ( );
	void eventonStartFollowerHoldPosition ( class ABioSquadHoldMarker* oHoldMarker );
	void eventOnLeftPlaypen ( class ANavigationPoint* oNavPoint );
	void Initialize ( );
	void eventOnLastManStanding ( );
	void eventOnProximityAlarm ( class AActor* oTarget, int nRelationship );
	void eventOnSquadSeen ( class AActor* oSquad );
	void eventOnActionComplete_Movement ( struct SFXName nmAction, int nReason, class AActor* oTarget, struct FVector const& vLocation );
	void eventOnActionComplete_Combat ( struct SFXName nmAction, struct SFXName nmTechnique, int nReason, class AActor* oLastTarget );
	void eventOnDamaged ( class AController* oInstigator, float fDamage );
	void onDamagedInCover ( class AController* oInstigator, float fDamage );
	void eventHearNoise ( float Loudness, class AActor* NoiseMaker, struct FVector const& vNoiseLocation, struct SFXName NoiseType );
	void eventOnCastAt ( class APawn* oAttacker, struct SFXName nmPower );
	void eventOnAttacked ( class APawn* oAttacker, struct SFXName nmWeapon );
	void eventOnAbilityDisabled ( int nEnableType, struct SFXName nmSubType );
	void eventOnAbilityEnabled ( int nEnableType, struct SFXName nmSubType );
	void eventOnNoCombatAction ( );
	bool ReactToAction ( class APawn* oInstigator, struct SFXName nmAction );
	bool EvaluateCapabilities ( class APawn* oTarget, unsigned long bLOS );
	bool EvaluateAttackCapabilities ( class APawn* oTarget );
	bool EvaluateDefensiveCapabilities ( );
	class APawn* PickNewTarget ( unsigned long bLOSRequired );
	bool EvaluateTargets ( );
	bool EvaluateCover ( class APawn* oTarget, unsigned long bLOS );
	struct FVector GetCoverLocation ( );
	struct FVector eventGetCoverBiasPoint ( );
	bool ShouldUseCover ( );
	void EvaluateSteeringMovement ( );
	bool EvaluateMovement ( class APawn* oTarget, unsigned long bLOS );
	void EvaluateCombatActions ( );
	void eventTick ( float DeltaTime );
	bool AdjustSteeringMoveSpeed ( struct FVector const& vSteering );
	bool GetSteeringVector ( struct FVector* vSteering );
	struct FVector GetTargetPosition ( class APawn* oTarget );
	bool CheckReEvaluateCover ( unsigned long bLOS );
	bool FindBestCover ( struct FVector const& vLocation, struct FCoverRecord* out_CoverRecord );
};

// Class SFXGame.BioAI_Drone
// 0x0004 (0x0650 - 0x064C)
class ABioAI_Drone : public ABioAI_Core
{
public:
	float                                              m_fIdealHeight;                                   		// 0x064C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool GetSteeringVector ( struct FVector* vSteering );
};

// Class SFXGame.BioAI_SarenFlyer
// 0x0000 (0x0650 - 0x0650)
class ABioAI_SarenFlyer : public ABioAI_Drone
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventOnLeftPlaypen ( class ANavigationPoint* oNavPoint );
	bool GetSteeringVector ( struct FVector* vSteering );
};

// Class SFXGame.BioAI_Henchman
// 0x000C (0x0658 - 0x064C)
class ABioAI_Henchman : public ABioAI_Core
{
public:
	float                                              m_fTickTimer;                                     		// 0x064C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fNextTimeForReachableCheck;                     		// 0x0650 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_Bumped : 1;                                     		// 0x0654 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool DoesGameModeAllowMovement ( );
	bool CanUseSteeringMovement ( );
	bool CanUseStack ( );
	bool CanUseQueue ( );
	void CancelHoldPosition ( );
	bool RespondToBump ( class AActor* Other, struct FVector const& HitNormal );
	bool eventNotifyBump ( class AActor* Other, struct FVector const& HitNormal );
	bool WantsToRun ( float fDistance );
	void eventOnActionComplete_Combat ( struct SFXName nmAction, struct SFXName nmTechnique, int nReason, class AActor* oLastTarget );
	void eventOnDamaged ( class AController* oInstigator, float fDamage );
	bool HandleSteeringMovementFailed ( );
	float GetMoveOffset ( );
	void eventGetFollowTargets ( class APawn** oFollow, struct FVector* vMoveTo );
	void eventOnProximityAlarm ( class AActor* oTarget, int nRelationship );
	void Initialize ( );
	void eventTick ( float DeltaTime );
	class UBioGamerProfile* GetPlayerProfile ( );
	class ABioPlayerSquad* GetPlayerSquad ( );
	bool ReactToAction ( class APawn* oInstigator, struct SFXName nmAction );
	int GetOutOfCombatCoverRank ( struct FVector const& vPos );
	bool eventIsCoverPositionValid ( struct FVector const& vLocation, struct FRotator const& rRotation, int* nRank );
	struct FVector GetCoverLocation ( );
	bool ShouldUseCover ( );
	bool IsWithinTetherRange ( );
	bool EvaluateTargets ( );
	bool EvaluateAttackCapabilities ( class APawn* oTarget );
	bool EvaluateDefensiveCapabilities ( );
	bool EvaluateCapabilities ( class APawn* oTarget, unsigned long bLOS );
	void EvaluateCombatActions ( );
	bool IsCoverPositionValid_Native ( struct FVector const& vLocation, struct FRotator const& rRotation, int* nRank );
	bool AdjustSteeringMoveSpeed ( struct FVector const& vSteering );
	bool GetSteeringVector ( struct FVector* vSteering );
};

// Class SFXGame.BioAI_Hopper
// 0x0004 (0x0650 - 0x064C)
class ABioAI_Hopper : public ABioAI_Core
{
public:
	unsigned long                                      bHopping : 1;                                     		// 0x064C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHearNoise ( float Loudness, class AActor* NoiseMaker, struct FVector const& vNoiseLocation, struct SFXName NoiseType );
	void eventOnSquadSeen ( class AActor* oSquad );
	void eventOnActionComplete_Movement ( struct SFXName nmAction, int nReason, class AActor* oTarget, struct FVector const& vLocation );
	void eventOnActionComplete_Combat ( struct SFXName nmAction, struct SFXName nmTechnique, int nReason, class AActor* oLastTarget );
	void eventOnDamaged ( class AController* oInstigator, float fDamage );
	bool EvaluateMovement ( class APawn* oTarget, unsigned long bLOS );
	bool EvaluateCapabilities ( class APawn* oTarget, unsigned long bLOS );
	bool Hop ( class APawn* oTarget, float fMoveDelay );
	class ABioWP_Hopper* FindHopperNode ( class APawn* pSource, class APawn* pTarget );
};

// Class SFXGame.BioAI_SarenBase
// 0x003C (0x0688 - 0x064C)
class ABioAI_SarenBase : public ABioAI_Core
{
public:
	TArray<class ANavigationPoint*>                    EvalNodes;                                        		// 0x064C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<class ANavigationPoint*>                    NodesWithLOS;                                     		// 0x065C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<float>                                      DebugScores;                                      		// 0x066C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                CurrentEvalIdx;                                   		// 0x067C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NodesPerFrame;                                    		// 0x0680 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              AngleWeight;                                      		// 0x0684 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DebugDraw_Saren ( class ABioHUD* HUD );
	void RefreshDebugWeights ( unsigned long bEvalRocketPoints );
};

// Class SFXGame.BioAI_SarenFlyerEND
// 0x0080 (0x0708 - 0x0688)
class ABioAI_SarenFlyerEND : public ABioAI_SarenBase
{
public:
	TArray<float>                                      LastSelectedTimes;                                		// 0x0688 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct SFXName                                     BarragePointName;                                 		// 0x0698 (0x0008) [0x0000000000000000]              
	class ABioWP_AirPoint*                             FlightTarget;                                     		// 0x06A0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioSeqData_MoveToObject*                    MoveData;                                         		// 0x06A8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              PlayerFacingHalfAngle;                            		// 0x06B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SelectedNavDecayDuration;                         		// 0x06B4 (0x0004) [0x0000000000000000]              
	float                                              MeshOscillationHeight;                            		// 0x06B8 (0x0004) [0x0000000000000000]              
	float                                              MeshOscillationSpeed;                             		// 0x06BC (0x0004) [0x0000000000000000]              
	float                                              MeshOscillationInterpSpeed;                       		// 0x06C0 (0x0004) [0x0000000000000000]              
	float                                              MinMoveDistance;                                  		// 0x06C4 (0x0004) [0x0000000000000000]              
	float                                              SteeringMoveTimeout;                              		// 0x06C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              StartedMoveTime;                                  		// 0x06CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MoveTimeout;                                      		// 0x06D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              HoldDuration;                                     		// 0x06D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastShieldBoostTime;                              		// 0x06D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ShieldBoostInterval;                              		// 0x06DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastGrenadeTime;                                  		// 0x06E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              GrenadeInterval;                                  		// 0x06E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastRocketTime;                                   		// 0x06E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RocketInterval;                                   		// 0x06EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NumBarrages;                                      		// 0x06F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumBarragesDone;                                  		// 0x06F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BarrageHealthThreshold;                           		// 0x06F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                RocketsFired;                                     		// 0x06FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RocketsPerBarrage;                                		// 0x0700 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUsedDamping : 1;                                 		// 0x0704 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bCanDoBarrage : 1;                                		// 0x0704 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UpdateBarrageLOS ( );
	bool AdjustSteeringMoveSpeed ( struct FVector const& vSteering );
	bool GetSteeringVector ( struct FVector* vSteering );
	bool EvaluateCapabilities ( class APawn* PawnTarget, unsigned long bLOS );
	void OnDamaged ( class AController* DamageInstigator, float Damage );
	void PeriodicMoveCheck ( );
	void RefreshDebugWeights ( unsigned long bEvalRocketPoints );
	void DebugDraw_Saren ( class ABioHUD* HUD );
	class ABioWP_AirPoint* SelectMoveTarget ( unsigned long bEvalRocketPoints, TArray<class ABioWP_AirPoint*>* Nodes );
	float WeightByTime ( class ANavigationPoint* N );
	float WeightByPlayerFacing ( class AActor* Player, class ANavigationPoint* N );
	float WeightByProximity ( float Distance );
	float WeightByDistance ( float Distance );
	void SelectNewMoveGoal ( );
	void CollectNodes ( );
	void PawnDied ( class APawn* inPawn );
	void Initialize ( );
};

// Class SFXGame.BioAI_SarenHopperEND
// 0x0088 (0x0710 - 0x0688)
class ABioAI_SarenHopperEND : public ABioAI_SarenBase
{
public:
	TArray<float>                                      LastSelectedTimes;                                		// 0x0688 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<struct SFXName>                             BeamPowers;                                       		// 0x0698 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ExcludeFilter__Delegate;                        		// 0x06A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct SFXName                                     BarragePointName;                                 		// 0x06B8 (0x0008) [0x0000000000000000]              
	float                                              IdealDistance;                                    		// 0x06C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinMoveDistance;                                  		// 0x06C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SelectedNavDecayDuration;                         		// 0x06C8 (0x0004) [0x0000000000000000]              
	float                                              PlayerFacingHalfAngle;                            		// 0x06CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PawnAccelRate;                                    		// 0x06D0 (0x0004) [0x0000000000000000]              
	float                                              PawnHealthPct;                                    		// 0x06D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HopOnDamageChance;                                		// 0x06D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              WaitTime;                                         		// 0x06DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              HoldDuration;                                     		// 0x06E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastHopTime;                                      		// 0x06E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BeamInterval;                                     		// 0x06E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastBeamTime;                                     		// 0x06EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastCarnageTime;                                  		// 0x06F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CarnageInterval;                                  		// 0x06F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SimpleCarnageHealthThreshold;                     		// 0x06F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LastCarnageBarrageTime;                           		// 0x06FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BarrageInterval;                                  		// 0x0700 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                CarnageShotsFired;                                		// 0x0704 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ShotsPerBarrage;                                  		// 0x0708 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bExcludeFloorNodes : 1;                           		// 0x070C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UpdateBarrageLOS ( );
	void PeriodicMoveCheck ( );
	void OnActionComplete_Movement ( struct SFXName nmAction, int nReason, class AActor* oTarget, struct FVector const& vLocation );
	void OnDamaged ( class AController* DamageInstigator, float Damage );
	void EvaluateCombatActions ( );
	void RefreshDebugWeights ( unsigned long bEvalRocketPoints );
	class ABioWP_Hopper* SelectMoveTarget ( struct FScriptDelegate ExcludeFunc, unsigned long bEvalRocketPoints, TArray<class ABioWP_Hopper*>* Nodes );
	bool ExcludeNonFloorNodes ( class ANavigationPoint* NavPoint );
	bool ExcludeFloorNodes ( class ANavigationPoint* NavPoint );
	float WeightByTime ( class ANavigationPoint* N );
	float WeightByPlayerFacing ( class AActor* Player, class ANavigationPoint* N );
	float WeightByProximity ( float Distance );
	float WeightByDistance ( float Distance );
	void CollectNodes ( );
	void PawnDied ( class APawn* inPawn );
	void Initialize ( );
	bool ExcludeFilter ( class ANavigationPoint* NavPoint );
};

// Class SFXGame.BioAnimCheckBlendOut
// 0x0020 (0x0080 - 0x0060)
class UBioAnimCheckBlendOut : public UObject
{
public:
	struct FBioAnimCheckBlendOutPath                   PathsLL;                                          		// 0x0060 (0x0018) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UAnimNode*                                   Parent;                                           		// 0x0078 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendBase
// 0x001F (0x011C - 0x00FD)
class UBioAnimNodeBlendBase : public UAnimNodeBlendBase
{
public:
	float                                              m_fBlendTime;                                     		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              m_fRemainingTime;                                 		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              m_fTotalBlendTime;                                		// 0x0108 (0x0004) [0x0000000000000000]              
	float                                              m_fTargetWeight;                                  		// 0x010C (0x0004) [0x0000000000000000]              
	int                                                m_nLastChild;                                     		// 0x0110 (0x0004) [0x0000000000000000]              
	int                                                m_nTargetChild;                                   		// 0x0114 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIsBlending : 1;                                		// 0x0118 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bTriggerTimeBlend : 1;                          		// 0x0118 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bBlendDirect : 1;                               		// 0x0118 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bShowSlider : 1;                                		// 0x0118 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetChildAnimTime ( class UAnimNode* oChild, float fTime );
};

// Class SFXGame.BioAnimNodeBlendAdditive
// 0x0000 (0x011C - 0x011C)
class UBioAnimNodeBlendAdditive : public UBioAnimNodeBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendAdditiveAim
// 0x000C (0x0128 - 0x011C)
class UBioAnimNodeBlendAdditiveAim : public UBioAnimNodeBlendAdditive
{
public:
	float                                              BlendInDuration;                                  		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutDuration;                                 		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsCoverAiming : 1;                               		// 0x0124 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendAdditiveCover
// 0x0008 (0x0124 - 0x011C)
class UBioAnimNodeBlendAdditiveCover : public UBioAnimNodeBlendAdditive
{
public:
	float                                              BlendInDuration;                                  		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutDuration;                                 		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendAdditiveDamage
// 0x001C (0x0138 - 0x011C)
class UBioAnimNodeBlendAdditiveDamage : public UBioAnimNodeBlendAdditive
{
public:
	struct FVector                                     m_vDamageDir;                                     		// 0x011C (0x000C) [0x0000000000000000]              
	int                                                DamageNodeIndex;                                  		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDamageThreshold;                               		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nDamageIndex;                                   		// 0x0130 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bLastDamageNode : 1;                              		// 0x0134 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bProcessDamage : 1;                               		// 0x0134 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendAdditivePower
// 0x0009 (0x0125 - 0x011C)
class UBioAnimNodeBlendAdditivePower : public UBioAnimNodeBlendAdditive
{
public:
	float                                              BlendInDuration;                                  		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutDuration;                                 		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eCurrentAnimNode;                               		// 0x0124 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool GetActivePower ( class UBioActivePower** oActivePower );
};

// Class SFXGame.BioAnimNodeBlendAdditiveWeaponEquip
// 0x0028 (0x0144 - 0x011C)
class UBioAnimNodeBlendAdditiveWeaponEquip : public UBioAnimNodeBlendAdditive
{
public:
	FString                                            m_sStartEventName;                                		// 0x011C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	FString                                            m_sEndEventName;                                  		// 0x012C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              BlendInDuration;                                  		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutDuration;                                 		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeCameraShake
// 0x001C (0x0138 - 0x011C)
class UBioAnimNodeCameraShake : public UBioAnimNodeBlendAdditive
{
public:
	class UBioCameraShake*                             m_cameraShake;                                    		// 0x011C (0x0008) [0x0000000000000000]              
	float                                              m_intensity;                                      		// 0x0124 (0x0004) [0x0000000000000000]              
	float                                              m_time;                                           		// 0x0128 (0x0004) [0x0000000000000000]              
	float                                              m_fadeInTime;                                     		// 0x012C (0x0004) [0x0000000000000000]              
	float                                              m_fadeOutTime;                                    		// 0x0130 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_IsPlaying : 1;                                  		// 0x0134 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_isLoopingForever : 1;                           		// 0x0134 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_isFadingIn : 1;                                 		// 0x0134 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_hasFadeOut : 1;                                 		// 0x0134 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_isFadingOut : 1;                                		// 0x0134 (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendByAim
// 0x0045 (0x0161 - 0x011C)
class UBioAnimNodeBlendByAim : public UBioAnimNodeBlendBase
{
public:
	struct FVector                                     m_vFixedRotation;                                 		// 0x011C (0x000C) [0x0000000000000000]              
	float                                              PitchLimitDegrees;                                		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              YawTwistLimitDegrees;                             		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              YawTurnTriggerDegrees;                            		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HoldTime;                                         		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_AimBlendOutDuration;                            		// 0x0138 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_AimBlendInDuration;                             		// 0x013C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_fYawRate;                                       		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPitchRate;                                     		// 0x0144 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeToUpdate;                                  		// 0x0148 (0x0004) [0x0000000000000000]              
	float                                              m_fYaw;                                           		// 0x014C (0x0004) [0x0000000000000000]              
	float                                              m_fPitch;                                         		// 0x0150 (0x0004) [0x0000000000000000]              
	float                                              m_fTargetYaw;                                     		// 0x0154 (0x0004) [0x0000000000000000]              
	float                                              m_RemainingBlendDuration;                         		// 0x0158 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_BlendedOut : 1;                                 		// 0x015C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      PreviewSliderAxis;                                		// 0x0160 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendByDamage
// 0x0008 (0x0124 - 0x011C)
class UBioAnimNodeBlendByDamage : public UBioAnimNodeBlendBase
{
public:
	int                                                m_nLastDamageIndex;                               		// 0x011C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bAdditiveMode : 1;                                		// 0x0120 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendByDeath
// 0x0050 (0x016C - 0x011C)
class UBioAnimNodeBlendByDeath : public UBioAnimNodeBlendBase
{
public:
	struct SFXName                                     Head;                                             		// 0x011C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     LeftArm;                                          		// 0x0124 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     RightArm;                                         		// 0x012C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     LeftLeg;                                          		// 0x0134 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     RightLeg;                                         		// 0x013C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     DeathEventName;                                   		// 0x0144 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nHeadRoot;                                      		// 0x014C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_nLeftArmRoot;                                   		// 0x0150 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_nRightArmRoot;                                  		// 0x0154 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_nLeftLegRoot;                                   		// 0x0158 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_nRightLegRoot;                                  		// 0x015C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              m_fTimeToRagdoll;                                 		// 0x0160 (0x0004) [0x0000000000000000]              
	float                                              m_fCurrentTime;                                   		// 0x0164 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bEventTriggered : 1;                            		// 0x0168 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendByIncline
// 0x0014 (0x0130 - 0x011C)
class UBioAnimNodeBlendByIncline : public UBioAnimNodeBlendBase
{
public:
	float                                              BlendDuration;                                    		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxInclineUpAngle;                                		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxInclineDownAngle;                              		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInclineAngle;                                  		// 0x0128 (0x0004) [0x0000000000000000]              
	unsigned long                                      bForceLevelReferenceAngle : 1;                    		// 0x012C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendByLean
// 0x0018 (0x0134 - 0x011C)
class UBioAnimNodeBlendByLean : public UBioAnimNodeBlendBase
{
public:
	float                                              BlendDuration;                                    		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendAcrossDuration;                              		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxLeanAngle;                                     		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fLeanAngle;                                     		// 0x0128 (0x0004) [0x0000000000000000]              
	float                                              m_fLastLeanAngle;                                 		// 0x012C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bSwitchingLean : 1;                             		// 0x0130 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendCombatAction
// 0x0004 (0x0120 - 0x011C)
class UBioAnimNodeBlendCombatAction : public UBioAnimNodeBlendBase
{
public:
	int                                                m_nCurrentCombatState;                            		// 0x011C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendDirStart
// 0x0010 (0x012C - 0x011C)
class UBioAnimNodeBlendDirStart : public UBioAnimNodeBlendBase
{
public:
	float                                              m_fStartHeading;                                  		// 0x011C (0x0004) [0x0000000000000000]              
	float                                              LeftStartTime;                                    		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RightStartTime;                                   		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bIsStarting : 1;                                		// 0x0128 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendDirectional
// 0x0008 (0x0124 - 0x011C)
class UBioAnimNodeBlendDirectional : public UBioAnimNodeBlendBase
{
public:
	float                                              BlendSpeed;                                       		// 0x011C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DirAngle;                                         		// 0x0120 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendFall
// 0x0008 (0x0124 - 0x011C)
class UBioAnimNodeBlendFall : public UBioAnimNodeBlendBase
{
public:
	float                                              JumpDistance;                                     		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bIsFalling : 1;                                 		// 0x0120 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bMovePawn : 1;                                  		// 0x0120 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bUseFarFallAnims : 1;                           		// 0x0120 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendGetUp
// 0x0000 (0x011C - 0x011C)
class UBioAnimNodeBlendGetUp : public UBioAnimNodeBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendMoveStop
// 0x0000 (0x011C - 0x011C)
class UBioAnimNodeBlendMoveStop : public UBioAnimNodeBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendMultiAdditive
// 0x004C (0x0168 - 0x011C)
class UBioAnimNodeBlendMultiAdditive : public UBioAnimNodeBlendBase
{
public:
	struct FMap_Mirror                                 m_mapActivateTimes;                               		// 0x011C (0x0048) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                m_nNumAdditiveChildren;                           		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendPoseAndGestures
// 0x002C (0x0194 - 0x0168)
class UBioAnimNodeBlendPoseAndGestures : public UBioAnimNodeBlendMultiAdditive
{
public:
	TArray<struct SFXName>                             m_aChildAnimsets;                                 		// 0x0168 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FBioChildPinData>                    m_aChildPinData;                                  		// 0x0178 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioGestureLangOverride*                     m_pLangOverride;                                  		// 0x0188 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bGesturePlaying : 1;                            		// 0x0190 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bTriedOverride : 1;                             		// 0x0190 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendPose
// 0x0024 (0x0140 - 0x011C)
class UBioAnimNodeBlendPose : public UBioAnimNodeBlendBase
{
public:
	TArray<struct SFXName>                             m_aChildAnimsets;                                 		// 0x011C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioGestureLangOverride*                     m_pLangOverride;                                  		// 0x012C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fTransEndTime;                                  		// 0x0134 (0x0004) [0x0000000000000000]              
	float                                              m_fEndBlendDuration;                              		// 0x0138 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bTransitioning : 1;                             		// 0x013C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bTriedOverride : 1;                             		// 0x013C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendScalar
// 0x0048 (0x0164 - 0x011C)
class UBioAnimNodeBlendScalar : public UBioAnimNodeBlendBase
{
public:
	TArray<struct FBioScalarBlendParams>               m_aChildBlendParams;                              		// 0x011C (0x0010) [0x0000000004420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	TArray<struct FBioScalarPrecomputedValues>         m_aChildPrecomputes;                              		// 0x012C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioAnimNodeBlendScalarBehavior*             m_oBehavior;                                      		// 0x013C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              m_fBlendPctPerSecond;                             		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fBlendSpanTime;                                 		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fRangeMin;                                      		// 0x014C (0x0004) [0x0000000000000000]              
	float                                              m_fRangeMax;                                      		// 0x0150 (0x0004) [0x0000000000000000]              
	float                                              m_fUnitsPerSecond;                                		// 0x0154 (0x0004) [0x0000000000000000]              
	float                                              m_fCurrentScalar;                                 		// 0x0158 (0x0004) [0x0000000000000000]              
	float                                              m_fTargetScalar;                                  		// 0x015C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bBlendInstant : 1;                              		// 0x0160 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bUseBlendSpanTime : 1;                          		// 0x0160 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendSkidTurn
// 0x0020 (0x013C - 0x011C)
class UBioAnimNodeBlendSkidTurn : public UBioAnimNodeBlendBase
{
public:
	float                                              m_fSkidHeading;                                   		// 0x011C (0x0004) [0x0000000000000000]              
	float                                              RightNearAngle;                                   		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RightFarAngle;                                    		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeftNearAngle;                                    		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeftFarAngle;                                     		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeftStartTime;                                    		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RightStartTime;                                   		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bIsSkidding : 1;                                		// 0x0138 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bFinishSkidStarted : 1;                         		// 0x0138 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendSpeed
// 0x002D (0x0149 - 0x011C)
class UBioAnimNodeBlendSpeed : public UBioAnimNodeBlendBase
{
public:
	float                                              BlendTimeToIdle;                                  		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendTimeFromIdle;                                		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendTimeMoving;                                  		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WalkSpeed;                                        		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RunSpeed;                                         		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WalkRateScaled;                                   		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RunRateScaled;                                    		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fStartSpeed;                                    		// 0x0138 (0x0004) [0x0000000000000000]              
	float                                              m_fCurrentSpeed;                                  		// 0x013C (0x0004) [0x0000000000000000]              
	float                                              m_fStartCheckTime;                                		// 0x0140 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIsStarting : 1;                                		// 0x0144 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bIsStarted : 1;                                 		// 0x0144 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      SpeedType;                                        		// 0x0148 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendState
// 0x001C (0x0138 - 0x011C)
class UBioAnimNodeBlendState : public UBioAnimNodeBlendBase
{
public:
	TArray<struct FBioAnimBlendParams>                 m_aChildBlendParams;                              		// 0x011C (0x0010) [0x0000000004420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	class UBioAnimNodeBlendStateBehavior*              m_oBehavior;                                      		// 0x012C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                m_nActiveChild;                                   		// 0x0134 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendTurn
// 0x0000 (0x011C - 0x011C)
class UBioAnimNodeBlendTurn : public UBioAnimNodeBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendWeaponEquip
// 0x0010 (0x012C - 0x011C)
class UBioAnimNodeBlendWeaponEquip : public UBioAnimNodeBlendBase
{
public:
	float                                              m_HolsterToDrawBlendDuration;                     		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_noneToDrawBlendDuration;                        		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_noneToHolsterBlendDuration;                     		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_toNoneBlendDuration;                            		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeCombatMode
// 0x0015 (0x0131 - 0x011C)
class UBioAnimNodeCombatMode : public UBioAnimNodeBlendBase
{
public:
	float                                              m_blendIntoTransitionDuration;                    		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_blendOutOfTransitionDuration;                   		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_blendFromNonCombatToCombatDuration;             		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_blendFromCombatToNonCombatDuration;             		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_isInitialStateDetermined : 1;                   		// 0x012C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      m_currentState;                                   		// 0x0130 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendByAction
// 0x03CD (0x04E9 - 0x011C)
class UBioAnimNodeBlendByAction : public UAnimNodeBlendList
{
public:
	struct FBlendTime                                  m_aBlendTimeFromPostureNode[ 0xB ];               		// 0x011C (0x0058) [0x0000000000000001]              ( CPF_Edit )
	struct FBlendTime                                  m_aBlendTimeFromMountNode[ 0xB ];                 		// 0x0174 (0x0058) [0x0000000000000001]              ( CPF_Edit )
	struct FBlendTime                                  m_aBlendTimeFromHesitateNode[ 0xB ];              		// 0x01CC (0x0058) [0x0000000000000001]              ( CPF_Edit )
	struct FBlendTime                                  m_aBlendTimeFromFallNode[ 0xB ];                  		// 0x0224 (0x0058) [0x0000000000000001]              ( CPF_Edit )
	struct FBlendTime                                  m_aBlendTimeFromBioticNode[ 0xB ];                		// 0x027C (0x0058) [0x0000000000000001]              ( CPF_Edit )
	struct FBlendTime                                  m_aBlendTimeFromDeathNode[ 0xB ];                 		// 0x02D4 (0x0058) [0x0000000000000001]              ( CPF_Edit )
	struct FBlendTime                                  m_aBlendTimeFromDieNode[ 0xB ];                   		// 0x032C (0x0058) [0x0000000000000001]              ( CPF_Edit )
	struct FBlendTime                                  m_aBlendTimeFromTechNode[ 0xB ];                  		// 0x0384 (0x0058) [0x0000000000000001]              ( CPF_Edit )
	struct FBlendTime                                  m_aBlendTimeFromMatineeNode[ 0xB ];               		// 0x03DC (0x0058) [0x0000000000000001]              ( CPF_Edit )
	struct FBlendTime                                  m_aBlendTimeFromGetUpNode[ 0xB ];                 		// 0x0434 (0x0058) [0x0000000000000001]              ( CPF_Edit )
	struct FBlendTime                                  m_aBlendTimeFromGestures[ 0xB ];                  		// 0x048C (0x0058) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bHesitateAvailable : 1;                         		// 0x04E4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bFallingAvailable : 1;                          		// 0x04E4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned char                                      m_eCurrentAnimNode;                               		// 0x04E8 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendByAnimationStateTracking
// 0x0028 (0x0144 - 0x011C)
class UBioAnimNodeBlendByAnimationStateTracking : public UAnimNodeBlendList
{
public:
	TArray<struct FBioAnimationNode>                   m_aStateList;                                     		// 0x011C (0x0010) [0x0000000004420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	struct SFXName                                     m_nmStateToTrack;                                 		// 0x012C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     m_nmLastState;                                    		// 0x0134 (0x0008) [0x0000000000000000]              
	int                                                m_nCurrentChild;                                  		// 0x013C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bAutoTransitionOnEndAnim : 1;                   		// 0x0140 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendByCustomAnim
// 0x0000 (0x0110 - 0x0110)
class UBioAnimNodeBlendByCustomAnim : public UAnimNodeBlend
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendByFireSequence
// 0x004C (0x0168 - 0x011C)
class UBioAnimNodeBlendByFireSequence : public UAnimNodeBlendList
{
public:
	TArray<class UAnimNodeSequence*>                   CachedAnimSeqStart;                               		// 0x011C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<class UAnimNodeSequence*>                   CachedAnimSeqLoop;                                		// 0x012C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<class UAnimNodeSequence*>                   CachedAnimSeqEnd;                                 		// 0x013C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     FlashLocation;                                    		// 0x014C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_blendDuration;                                  		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                QueuedTransition;                                 		// 0x015C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                FlashCount;                                       		// 0x0160 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      CacheUpdated : 1;                                 		// 0x0164 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float eventGetPlayRate ( class UAnimNodeSequence* Seq, int ShotsPerCycle );
};

// Class SFXGame.BioAnimNodeBlendByMount
// 0x001F (0x011C - 0x00FD)
class UBioAnimNodeBlendByMount : public UAnimNodeBlendBase
{
public:
	struct SFXName                                     MountEventName;                                   		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightHigh;                                       		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightMid;                                        		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightLow;                                        		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RateLow;                                          		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bEventTriggered : 1;                            		// 0x0118 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendByPosture
// 0x0004 (0x0114 - 0x0110)
class UBioAnimNodeBlendByPosture : public UAnimNodeBlend
{
public:
	float                                              BlendDuration;                                    		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendByPower
// 0x0011 (0x012D - 0x011C)
class UBioAnimNodeBlendByPower : public UAnimNodeBlendList
{
public:
	class UAnimNodeSequence*                           m_oAnimNodeSequence;                              		// 0x011C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fUsingDuration;                                 		// 0x0124 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fOriginalRate;                                  		// 0x0128 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_eCurrentAnimNode;                               		// 0x012C (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool GetActivePower ( class UBioActivePower** oActivePower );
	void Reset ( );
};

// Class SFXGame.BioAnimNodeBlendByTargetingPercentage
// 0x0004 (0x0114 - 0x0110)
class UBioAnimNodeBlendByTargetingPercentage : public UAnimNodeBlend
{
public:
	float                                              m_fRate;                                          		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendByWeaponAction
// 0x0005 (0x0121 - 0x011C)
class UBioAnimNodeBlendByWeaponAction : public UAnimNodeBlendList
{
public:
	unsigned long                                      m_isInitialStateDetermined : 1;                   		// 0x011C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned char                                      m_eCurrentAnimNode;                               		// 0x0120 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void PlayCurrentChildAnimation ( );
};

// Class SFXGame.BioAnimNodeBlendPerBone
// 0x0029 (0x016D - 0x0144)
class UBioAnimNodeBlendPerBone : public UAnimNodeBlendPerBone
{
public:
	TArray<struct SFXName>                             BioBranchStartBoneName;                           		// 0x0144 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct SFXName                                     BlendName;                                        		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              OverblendFactor;                                  		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeInTime;                                       		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutTime;                                      		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bNotifiedBlendComplete : 1;                     		// 0x0168 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bBoneSwitchOn : 1;                              		// 0x0168 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      BlendType;                                        		// 0x016C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendScalarBehavior
// 0x0010 (0x0070 - 0x0060)
class UBioAnimNodeBlendScalarBehavior : public UObject
{
public:
	TArray<struct FBioAnimScalarNodeBehaviorDef>       m_aNodeDefinitions;                               		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendScalarHoppingBehavior
// 0x0001 (0x0071 - 0x0070)
class UBioAnimNodeBlendScalarHoppingBehavior : public UBioAnimNodeBlendScalarBehavior
{
public:
	unsigned char                                      HoppingBehavior;                                  		// 0x0070 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendScalarMovementBehavior
// 0x0008 (0x0078 - 0x0070)
class UBioAnimNodeBlendScalarMovementBehavior : public UBioAnimNodeBlendScalarBehavior
{
public:
	unsigned long                                      bUseSprint : 1;                                   		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseSnapshotSpeed : 1;                            		// 0x0070 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseSnapshotStartSpeed : 1;                       		// 0x0070 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseLocalSpace : 1;                               		// 0x0070 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      MovementBehavior;                                 		// 0x0074 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MoveAxis;                                         		// 0x0075 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AxisDir;                                          		// 0x0076 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AxisDirMode;                                      		// 0x0077 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendSpeed2
// 0x0024 (0x0140 - 0x011C)
class UBioAnimNodeBlendSpeed2 : public UAnimNodeBlendList
{
public:
	struct SFXName                                     WalkSyncGroupName;                                		// 0x011C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     RunSyncGroupName;                                 		// 0x0124 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendTime;                                        		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WalkSpeed;                                        		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RunSpeed;                                         		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WalkRateScaled;                                   		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RunRateScaled;                                    		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendStateBehavior
// 0x0014 (0x0074 - 0x0060)
class UBioAnimNodeBlendStateBehavior : public UObject
{
public:
	TArray<struct FBioAnimStateNodeBehaviorDef>        m_aNodeDefinitions;                               		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fQueryPlayTime;                                 		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendStateActionBehavior
// 0x0005 (0x0079 - 0x0074)
class UBioAnimNodeBlendStateActionBehavior : public UBioAnimNodeBlendStateBehavior
{
public:
	unsigned long                                      m_bPlayedRecoverAnim : 1;                         		// 0x0074 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      ActionBehavior;                                   		// 0x0078 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendStateCombatBehavior
// 0x0005 (0x0079 - 0x0074)
class UBioAnimNodeBlendStateCombatBehavior : public UBioAnimNodeBlendStateBehavior
{
public:
	unsigned long                                      bUseCoverAnimState : 1;                           		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOnlyDuringWeaponSwitch : 1;                      		// 0x0074 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOnlyDuringNoOffensiveAction : 1;                 		// 0x0074 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      CombatBehavior;                                   		// 0x0078 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendStateHoppingBehavior
// 0x0005 (0x0079 - 0x0074)
class UBioAnimNodeBlendStateHoppingBehavior : public UBioAnimNodeBlendStateBehavior
{
public:
	unsigned long                                      m_bPlayedAnim : 1;                                		// 0x0074 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      HoppingBehavior;                                  		// 0x0078 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendStateMovementBehavior
// 0x0023 (0x0097 - 0x0074)
class UBioAnimNodeBlendStateMovementBehavior : public UBioAnimNodeBlendStateBehavior
{
public:
	float                                              BlendDownPerc;                                    		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleByValue;                                     		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WalkRate;                                         		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RunRate;                                          		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendResetWeight;                                 		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fStartCheckTime;                                		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                m_nLastPhys;                                      		// 0x008C (0x0004) [0x0000000000000000]              
	unsigned long                                      bUseSprint : 1;                                   		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseSnapshotSpeed : 1;                            		// 0x0090 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseSnapshotStartSpeed : 1;                       		// 0x0090 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseDirStartControl : 1;                          		// 0x0090 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bIsStarted : 1;                                 		// 0x0090 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bInTakeoff : 1;                                 		// 0x0090 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bInLanding : 1;                                 		// 0x0090 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bPlayedAnim : 1;                                		// 0x0090 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bRootMotionOn : 1;                              		// 0x0090 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned char                                      MovementBehavior;                                 		// 0x0094 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AxisDir;                                          		// 0x0095 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AxisDirMode;                                      		// 0x0096 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeCover2Actions
// 0x0038 (0x0154 - 0x011C)
class UBioAnimNodeCover2Actions : public UAnimNodeBlendList
{
public:
	class UBioAnimCheckBlendOut*                       BlendOut;                                         		// 0x011C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              Default2LeanBlendDuration;                        		// 0x0124 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Lean2DefaultBlendDuration;                        		// 0x0128 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Default2PopupBlendDuration;                       		// 0x012C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Popup2DefaultBlendDuration;                       		// 0x0130 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Default2PeekBlendDuration;                        		// 0x0134 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Peek2DefaultBlendDuration;                        		// 0x0138 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Default2PartialLeanBlendDuration;                 		// 0x013C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PartialLean2DefaultBlendDuration;                 		// 0x0140 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Default2PartialPopUpBlendDuration;                		// 0x0144 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PartialPopUp2DefaultBlendDuration;                		// 0x0148 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Default2AimbackBlendDuration;                     		// 0x014C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Aimback2DefaultBlendDuration;                     		// 0x0150 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeCover2Transition
// 0x0023 (0x013F - 0x011C)
class UBioAnimNodeCover2Transition : public UAnimNodeBlendList
{
public:
	class UBioAnimCheckBlendOut*                       BlendOut;                                         		// 0x011C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              Intro2BodyBlendDuration;                          		// 0x0124 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Body2OutroBlendDuration;                          		// 0x0128 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Intro2OutroBlendDuration;                         		// 0x012C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Outro2IntroBlendDuration;                         		// 0x0130 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      IntroIsBlocking : 1;                              		// 0x0134 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      OutroIsBlocking : 1;                              		// 0x0134 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bStopInputOnBlockingTransitions : 1;              		// 0x0134 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bRequestedBlendOut : 1;                           		// 0x0134 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bCanceledBlendOut : 1;                            		// 0x0134 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bSkipIntro : 1;                                   		// 0x0134 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bBlocking : 1;                                    		// 0x0134 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned char                                      IntroRootMotionMode;                              		// 0x0138 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      IntroRootRotationMode;                            		// 0x0139 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      OutroRootMotionMode;                              		// 0x013A (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      OutroRootRotationMode;                            		// 0x013B (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      CurrentState;                                     		// 0x013C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      RootMotionMode;                                   		// 0x013D (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      RootRotationMode;                                 		// 0x013E (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventIgnorePlayerInput ( class ABioPawn* pPawn, unsigned long bIgnore );
};

// Class SFXGame.BioAnimNodeCover2Type
// 0x0001 (0x011D - 0x011C)
class UBioAnimNodeCover2Type : public UAnimNodeBlendList
{
public:
	unsigned char                                      LastCoverAction;                                  		// 0x011C (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeFrame
// 0x0017 (0x00FC - 0x00E5)
class UBioAnimNodeFrame : public UAnimNode
{
public:
	TArray<struct FBoneAtom>                           m_FrameBoneData;                                  		// 0x00E8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      m_bIsFrameDataValid : 1;                          		// 0x00F8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bCaptureOnRelevant : 1;                         		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void CaptureAnimFrame ( );
};

// Class SFXGame.BioAnimNodeRandom
// 0x0008 (0x0140 - 0x0138)
class UBioAnimNodeRandom : public UAnimNodeRandom
{
public:
	int                                                nChildOnActive;                                   		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceChildOnActive : 1;                          		// 0x013C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeSequence
// 0x0042 (0x017C - 0x013A)
class UBioAnimNodeSequence : public UAnimNodeSequence
{
public:
	FPointer                                           m_pDFCurTimeProp;                                 		// 0x013C (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	FPointer                                           m_pDFRateProp;                                    		// 0x0144 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	FPointer                                           m_pDFSeqLenProp;                                  		// 0x014C (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FVector                                     m_vTotalTranslation;                              		// 0x0154 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     DF_CurrentTime;                                   		// 0x0160 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     DF_Rate;                                          		// 0x0168 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     DF_SequenceLength;                                		// 0x0170 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRandomizeStartTime : 1;                          		// 0x0178 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeSequenceByBoneRotation
// 0x001B (0x0155 - 0x013A)
class UBioAnimNodeSequenceByBoneRotation : public UAnimNodeSequence
{
public:
	TArray<struct FAnimByRotation>                     AnimList;                                         		// 0x013C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct SFXName                                     BoneName;                                         		// 0x014C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneAxis;                                         		// 0x0154 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNotifyEvent
// 0x000C (0x006C - 0x0060)
class UBioAnimNotifyEvent : public UAnimNotify
{
public:
	struct SFXName                                     EventName;                                        		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      IsGlobal : 1;                                     		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNotifySound
// 0x0010 (0x0070 - 0x0060)
class UBioAnimNotifySound : public UAnimNotify
{
public:
	FString                                            SoundName;                                        		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNotifyVFX
// 0x0008 (0x0068 - 0x0060)
class UBioAnimNotifyVFX : public UAnimNotify
{
public:
	struct SFXName                                     m_nmVisualEffectLabel;                            		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioArtPlaceableBlendByTransition
// 0x0014 (0x0124 - 0x0110)
class UBioArtPlaceableBlendByTransition : public UAnimNodeBlend
{
public:
	class UAnimNodeSequence*                           aTransition;                                      		// 0x0110 (0x0008) [0x0000000000000000]              
	class UAnimNodeSequence*                           aState;                                           		// 0x0118 (0x0008) [0x0000000000000000]              
	unsigned long                                      bTransitioning : 1;                               		// 0x0120 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bTransitionAllowed : 1;                           		// 0x0120 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void GotoToState ( struct SFXName LoopAnim );
	void TransitionToState ( struct SFXName TransAnim, struct SFXName LoopAnim );
};

// Class SFXGame.BioGestureAnimSetMgr
// 0x0050 (0x00B0 - 0x0060)
class UBioGestureAnimSetMgr : public UObject
{
public:
	struct FMap_Mirror                                 m_mapAnimSetRefCount;                             		// 0x0060 (0x0048) [0x0000000000001000]              ( CPF_Native )
	class UBioGestureRuntimeData*                      m_pRuntimeData;                                   		// 0x00A8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSkelControlAdditiveLookAt
// 0x0008 (0x0150 - 0x0148)
class UBioSkelControlAdditiveLookAt : public USkelControlLookAt
{
public:
	float                                              MaxAngleUpDown;                                   		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSeparateUpDownLimit : 1;                         		// 0x014C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioPawnLookAtController
// 0x0072 (0x01C2 - 0x0150)
class UBioPawnLookAtController : public UBioSkelControlAdditiveLookAt
{
public:
	struct FMatrix                                     m_mControlledRefPose;                             		// 0x0150 (0x0040) [0x0000000000002000]              ( CPF_Transient )
	FPointer                                           mc_pDefinition;                                   		// 0x0190 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class AActor*                                      m_pTargetActor;                                   		// 0x0198 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USkeletalMeshComponent*                      m_pTargetMesh;                                    		// 0x01A0 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                m_nTargetBoneIndex;                               		// 0x01A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fDelayTimer;                                    		// 0x01AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nRootAnimBoneIndex;                             		// 0x01B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPrevAngVelocity;                               		// 0x01B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLimitZoneAngle;                                		// 0x01B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bDoAdditive : 1;                                		// 0x01BC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bAnimFirst : 1;                                 		// 0x01BC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bResetTargetLocation : 1;                       		// 0x01BC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bDisabling : 1;                                 		// 0x01BC (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_RootAnimBoneLookAtInverted : 1;                 		// 0x01BC (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_RootAnimBoneUpInverted : 1;                     		// 0x01BC (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bTargetReached : 1;                             		// 0x01BC (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bRootBoneYawOnly : 1;                           		// 0x01BC (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned char                                      m_RootAnimBoneLookAtAxis;                         		// 0x01C0 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_RootAnimBoneUpAxis;                             		// 0x01C1 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSkelControl_TurretConstrained
// 0x0032 (0x0134 - 0x0102)
class UBioSkelControl_TurretConstrained : public USkelControlSingleBone
{
public:
	struct FTurretConstraintData                       MaxAngle;                                         		// 0x0104 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FTurretConstraintData                       MinAngle;                                         		// 0x0110 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    DesiredBoneRotation;                              		// 0x011C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              LagDegreesPerSecond;                              		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fLagScale;                                      		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bConstrainPitch : 1;                              		// 0x0130 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bConstrainYaw : 1;                                		// 0x0130 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bConstrainRoll : 1;                               		// 0x0130 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bInvertPitch : 1;                                 		// 0x0130 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bInvertYaw : 1;                                   		// 0x0130 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bInvertRoll : 1;                                  		// 0x0130 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXAnimNodeSequenceEyeFixup
// 0x004A (0x0184 - 0x013A)
class USFXAnimNodeSequenceEyeFixup : public UAnimNodeSequence
{
public:
	TArray<struct FBoneAtom>                           EyeBoneDeltas;                                    		// 0x013C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<unsigned char>                              EyeBoneIndices;                                   		// 0x014C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<struct SFXName>                             EyeBoneNames;                                     		// 0x015C (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	TArray<float>                                      DebugDeltas;                                      		// 0x016C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              EyeRotationThreshold;                             		// 0x017C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned long                                      bEnableEyeFixup : 1;                              		// 0x0180 (0x0004) [0x0000000000024000] [0x00000001] ( CPF_Config | CPF_EditConst )
	unsigned long                                      bPoseCached : 1;                                  		// 0x0180 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetPosition ( float NewTime, unsigned long bFireNotifies );
	void StopAnim ( );
	void PlayAnim ( unsigned long bLoop, float InRate, float StartTime );
	void SetAnim ( struct SFXName Sequence );
};

// Class SFXGame.BioBaseAppearance
// 0x003D (0x00A9 - 0x006C)
class UBioBaseAppearance : public UBioBaseComponent
{
public:
	TArray<struct SFXName>                             m_aTargetZone;                                    		// 0x006C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct SFXName                                     m_nmPhysicsImpactBone;                            		// 0x007C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioShieldView*                              m_oShieldView;                                    		// 0x0084 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioDeathVFX*                                m_pDeathVFX;                                      		// 0x008C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBioDeathVFXControl*                         m_pDeathVFXControl;                               		// 0x0094 (0x0008) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              m_fNotifyRBCollisionThreshold;                    		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fVFXScale;                                      		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bNotifyRBCollision : 1;                         		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bIsTargetZoneEnabled : 1;                       		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      m_eReportMethod;                                  		// 0x00A8 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class USkeletalMesh* GetModelByName ( FString const& S );
	bool GetTargetZoneName ( int nIndex, struct SFXName* nmZoneName );
	bool GetTargetZoneLocation ( int nIndex, class USkeletalMeshComponent* oMeshComponent, struct FVector* vLocation );
};

// Class SFXGame.BioAppearanceItem
// 0x0003 (0x00AC - 0x00A9)
class UBioAppearanceItem : public UBioBaseAppearance
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAppearanceItemEquippable
// 0x0000 (0x00AC - 0x00AC)
class UBioAppearanceItemEquippable : public UBioAppearanceItem
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAppearanceItemSophisticated
// 0x0014 (0x00C0 - 0x00AC)
class UBioAppearanceItemSophisticated : public UBioAppearanceItemEquippable
{
public:
	TArray<struct FBioAppearanceItemSophisticatedVariant> m_variants;                                       		// 0x00AC (0x0010) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                m_previewVariantLabel;                            		// 0x00BC (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UPhysicsAsset* GetPhysicsAsset ( int Variant );
	class UAnimTree* GetAnimationTree ( int Variant );
	class UAnimSet* GetAnimationSet ( int Variant );
	void ApplyMaterials ( int Variant, class USkeletalMeshComponent* SkeletalMeshComponent );
	class USkeletalMesh* GetSkeletalMesh ( int Variant );
};

// Class SFXGame.BioAppearanceItemWeapon
// 0x0018 (0x00D8 - 0x00C0)
class UBioAppearanceItemWeapon : public UBioAppearanceItemSophisticated
{
public:
	TArray<struct FBioAppearanceItemWeaponVFXSpec>     m_vfxSpecs;                                       		// 0x00C0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UAnimSet*                                    m_oPawnWeaponAnimations;                          		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAppearanceVehicle
// 0x0267 (0x0310 - 0x00A9)
class UBioAppearanceVehicle : public UBioBaseAppearance
{
public:
	struct FBioVehicleSoundEntityStateInfo             m_VehicleStart;                                   		// 0x00AC (0x0020) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBioVehicleSoundEntityStateInfo             m_VehicleStop;                                    		// 0x00CC (0x0020) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBioVehicleSoundEntityStateInfo             m_VehicleThrusterStart;                           		// 0x00EC (0x0020) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBioVehicleSoundEntityStateInfo             m_VehicleThrusterStop;                            		// 0x010C (0x0020) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBioVehicleSoundEntityStateInfo             m_VehicleInAcceleration;                          		// 0x012C (0x0020) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBioVehicleSoundEntityStateInfo             m_VehicleInDeceleration;                          		// 0x014C (0x0020) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBioVehicleSoundEntityStateInfo             m_VehicleSpringsSoftActivated;                    		// 0x016C (0x0020) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBioVehicleSoundEntityStateInfo             m_VehicleSpringsSoftDeactivated;                  		// 0x018C (0x0020) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBioVehicleSoundEntityStateInfo             m_VehicleSpringsMedActivated;                     		// 0x01AC (0x0020) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBioVehicleSoundEntityStateInfo             m_VehicleSpringsMedDeactivated;                   		// 0x01CC (0x0020) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBioVehicleSoundEntityStateInfo             m_VehicleSpringsHardActivated;                    		// 0x01EC (0x0020) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBioVehicleSoundEntityStateInfo             m_VehicleSpringsHardDeactivated;                  		// 0x020C (0x0020) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FBioVehicleAttachmentInfo>           m_aAttachment;                                    		// 0x022C (0x0010) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray<struct FBioVehicleTurretInfo>               m_aTurrets;                                       		// 0x023C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FBioVehicleThrusterInfo>             m_aThrusters;                                     		// 0x024C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<class UBioVFXAppearanceVehicleThruster*>    m_aThrusterVFX;                                   		// 0x025C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct SFXName>                             m_aWeaponItemLabel;                               		// 0x026C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<class UMaterialInterface*>                  m_aMaterials;                                     		// 0x027C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UBioAppearanceVehicleSettings*               m_oSettings;                                      		// 0x028C (0x0008) [0x00000000040A2009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UAnimSet*                                    m_oVehicleAnimSet;                                		// 0x0294 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAnimTree*                                   m_oVehicleAnimTree;                               		// 0x029C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicsAsset*                               m_oPhysicsAsset;                                  		// 0x02A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     m_nmPhysicsBone;                                  		// 0x02AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   m_oVehicleSoundCue;                               		// 0x02B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMorphTargetSet*                             m_oDamageMorphSet;                                		// 0x02BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     m_oDamageNodeWeight;                              		// 0x02C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             m_oDamageVFXTemplate;                             		// 0x02CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     m_nmCameraHook;                                   		// 0x02D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVehicleTrackSet*                         TrackSet;                                         		// 0x02DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               m_oVehicleModelMesh;                              		// 0x02E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nThrusterVFXIndex;                              		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSuspensionSoundContactForceThresholdSoft;      		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSuspensionSoundContactForceThresholdMedium;    		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fSuspensionSoundContactForceThresholdHard;      		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDamageVFXStartThresholdPercent;                		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCameraFollowDistance;                          		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCameraFollowHeight;                            		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fVehicleScale;                                  		// 0x0308 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fUnitWheelRadius;                               		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioBaseAppearancePlaceable
// 0x00F3 (0x019C - 0x00A9)
class UBioBaseAppearancePlaceable : public UBioBaseAppearance
{
public:
	TArray<struct SFXName>                             MaterialVariationList;                            		// 0x00AC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<class UAnimSet*>                            AnimSets;                                         		// 0x00BC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FAudioAPLStatePair>                  m_AudioStates;                                    		// 0x00CC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FVisualEffectAttachment>             VisualEffects;                                    		// 0x00DC (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	TArray<struct FVisualEffectAttachment>             VFXOnInstigator;                                  		// 0x00EC (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	FString                                            sThumbnailLabel;                                  		// 0x00FC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            sMenuLabel;                                       		// 0x010C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      pNewActorClass;                                   		// 0x011C (0x0008) [0x0000000000000000]              
	struct FVector                                     m_vTargetLocationOffset;                          		// 0x0124 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     PackageName;                                      		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     PlaceablePrefix;                                  		// 0x0138 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicsAsset*                               PhysicsAsset;                                     		// 0x0140 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicsAsset*                               DestroyedPhysicsAsset;                            		// 0x0148 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioFSM*                                     FSM;                                              		// 0x0150 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SoundCue;                                         		// 0x0158 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 m_oStaticMesh;                                    		// 0x0160 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 m_oDestroyedStaticMesh;                           		// 0x0168 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               m_oSkeletalMesh;                                  		// 0x0170 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               m_oDestroyedSkeletalMesh;                         		// 0x0178 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             oAudioComponent;                                  		// 0x0180 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAnimTree*                                   AnimationTree;                                    		// 0x0188 (0x0008) [0x0000000000000000]              
	int                                                MaterialPerVariation;                             		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nInstigatorVFXOffset;                             		// 0x0194 (0x0004) [0x0000000000000000]              
	float                                              Scale;                                            		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.Bio_Appr_Container
// 0x0000 (0x019C - 0x019C)
class UBio_Appr_Container : public UBioBaseAppearancePlaceable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.Bio_Appr_Door
// 0x0000 (0x019C - 0x019C)
class UBio_Appr_Door : public UBioBaseAppearancePlaceable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.Bio_Appr_Inert
// 0x0000 (0x019C - 0x019C)
class UBio_Appr_Inert : public UBioBaseAppearancePlaceable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.Bio_Appr_Useable
// 0x0000 (0x019C - 0x019C)
class UBio_Appr_Useable : public UBioBaseAppearancePlaceable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.Bio_Appr_Character
// 0x00E2 (0x018B - 0x00A9)
class UBio_Appr_Character : public UBioBaseAppearance
{
public:
	TArray<class UBio_Appr_Character_Head*>            Head;                                             		// 0x00AC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<class UBioVISFootstep*>                     Footsteps;                                        		// 0x00BC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FFootStepAttachment>                 m_FootStepAttachments;                            		// 0x00CC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FLookAtBoneDef>                      m_aLookBoneDefs;                                  		// 0x00DC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     m_vFootstepLineCheckOffset;                       		// 0x00EC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vProceduralCameraPosition;                        		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    rProceduralCameraRotation;                        		// 0x0104 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vCameraFocusPoint;                                		// 0x0110 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UBio_Appr_Character_Body*                    Body;                                             		// 0x011C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     BloodColor;                                       		// 0x0124 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBio_Appr_Character_Settings*                m_oSettings;                                      		// 0x012C (0x0008) [0x00000000040A2009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_EditConst | CPF_Component | CPF_EditInline )
	struct SFXName                                     CreatureSpeed;                                    		// 0x0134 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             LifetimeCrust;                                    		// 0x013C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioLookAtDefinition*                        m_LookAtDefinition;                               		// 0x0144 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    m_pDefaultGesturesPoseSet;                        		// 0x014C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     m_nmDefaultGesturesPoseAnim;                      		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioDynamicAnimSet*                          m_pCookedDefGestPoseSet;                          		// 0x015C (0x0008) [0x0000000000000000]              
	class UFaceFXAsset*                                DefaultFaceFXAsset;                               		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              LifetimeMaterialFadeDuration;                     		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCullFootstepDistance;                          		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFov;                                             		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fNearClip;                                        		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDOFFocusInnerRadius;                             		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDOFFocusDistance;                                		// 0x0180 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      HideEquipedItems : 1;                             		// 0x0184 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      CanStrafe : 1;                                    		// 0x0184 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLoopSingleFootstep : 1;                          		// 0x0184 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bCullFootsteps : 1;                             		// 0x0184 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      ModelType;                                        		// 0x0188 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_ItemRaceType;                                   		// 0x0189 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_TalentRaceType;                                 		// 0x018A (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.Bio_Appr_Character_Body
// 0x01D9 (0x0282 - 0x00A9)
class UBio_Appr_Character_Body : public UBioBaseAppearance
{
public:
	struct FWeaponAnimSpec                             m_weaponAnimSpecs[ 0x4 ];                         		// 0x00AC (0x0070) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	TArray<struct FArmorTypes>                         Armor;                                            		// 0x011C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	FString                                            AppearancePrefix;                                 		// 0x012C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<class UAnimSet*>                            AnimSets;                                         		// 0x013C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	FString                                            AudioAppearancePrefix;                            		// 0x014C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FOverrideAnimTreeTemplate                   AnimTreeTemplates[ 0x7 ];                         		// 0x015C (0x0054) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vCrouchedWeaponOffset;                          		// 0x01B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vCrouchedLeanLeftWeaponOffset;                  		// 0x01BC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vCrouchedLeanRightWeaponOffset;                 		// 0x01C8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vStandingWeaponOffset;                          		// 0x01D4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vStandingLeanLeftWeaponOffset;                  		// 0x01E0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     m_vStandingLeanRightWeaponOffset;                 		// 0x01EC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UBio2DA*                                     m_oMaterialVariationTranslationTable;             		// 0x01F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBio_Appr_Character_HeadGear*                m_oHeadGearAppearance;                            		// 0x0200 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBio_Appr_Character_Body_Settings*           m_oSettings;                                      		// 0x0208 (0x0008) [0x00000000040A2009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_EditConst | CPF_Component | CPF_EditInline )
	struct SFXName                                     RagdollRecoverBone;                               		// 0x0210 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     RagdollRecoverDirSwapBone;                        		// 0x0218 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollisionHeight;                                  		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollisionRadius;                                  		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollisionCrouchHeight;                            		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollisionReadyHeight;                             		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Scale;                                            		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BaseEyeHeight;                                    		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InclineUpMoveMod;                                 		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InclineDownMoveMod;                               		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SkidTurnThreshold;                                		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PawnMoveStopDecelTime;                            		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageArc_Front;                                  		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageArc_Rear;                                   		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamagePct_Front;                                  		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamagePct_Left;                                   		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamagePct_Right;                                  		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LookAtRotationMinHoldTime;                        		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LookAtRotationMaxHoldTime;                        		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LookAtRotationMaxHoldAngle;                       		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LookAtSpeedDEBUG;                                 		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RagdollRecoverPhysBlendTime;                      		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeshAdjRate;                                      		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ManualMeshAdj;                                    		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsCrawler : 1;                                   		// 0x0278 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSuppressCrawlerRoll : 1;                         		// 0x0278 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseAutoGeneratedHitCollision : 1;                		// 0x0278 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEnableStartAnims : 1;                            		// 0x0278 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bEnableSkidAnims : 1;                             		// 0x0278 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bEnableStopAnims : 1;                             		// 0x0278 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bAllowStartAnimInCombat : 1;                      		// 0x0278 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bAllowSkidAnimInCombat : 1;                       		// 0x0278 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bAllowStopAnimInCombat : 1;                       		// 0x0278 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bEnableMountRootMotion : 1;                       		// 0x0278 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bEnableStartRootMotion : 1;                       		// 0x0278 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bEnableStopRootMotion : 1;                        		// 0x0278 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bEnableExploreDeathAnim : 1;                      		// 0x0278 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bEnableCombatDeathAnim : 1;                       		// 0x0278 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bEnableLookAtTargeting : 1;                       		// 0x0278 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bUseWallSlideSpeedAdjust : 1;                     		// 0x0278 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bEnableRagdollRecovery : 1;                       		// 0x0278 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bInvertRagdollRecoverBoneAxis : 1;                		// 0x0278 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bRecoverDirSwap : 1;                              		// 0x0278 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bInvertRagdollRecoverDirSwapBoneAxis : 1;         		// 0x0278 (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      bHACKIsGethArmature : 1;                          		// 0x0278 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bEnableMeshAdj : 1;                               		// 0x0278 (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      bUseManualAdj : 1;                                		// 0x0278 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      m_bCanHop : 1;                                    		// 0x0278 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      m_bCanLeanWeaponFire : 1;                         		// 0x0278 (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      m_bCanPortArms : 1;                               		// 0x0278 (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      m_bCanCrouch : 1;                                 		// 0x0278 (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      m_bCanWalk : 1;                                   		// 0x0278 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      m_bCanMount : 1;                                  		// 0x0278 (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned long                                      m_bCanFly : 1;                                    		// 0x0278 (0x0004) [0x0000000000000001] [0x20000000] ( CPF_Edit )
	unsigned long                                      m_bCanLand : 1;                                   		// 0x0278 (0x0004) [0x0000000000000001] [0x40000000] ( CPF_Edit )
	unsigned long                                      m_bSuppressPitch : 1;                             		// 0x0278 (0x0004) [0x0000000000000001] [0x80000000] ( CPF_Edit )
	unsigned long                                      m_bGlideInExploration : 1;                        		// 0x027C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      RagdollRecoverBoneAxis;                           		// 0x0280 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RagdollRecoverDirSwapBoneAxis;                    		// 0x0281 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool GetMaterial ( int ArmorType, int ModelVar, int MaterialVar, TArray<class UMaterialInterface*>* Materials );
	bool IsValidVariation ( int ArmorType, int ModelVar, int MaterialVar );
	class UPhysicsAsset* GetPhysics ( int ArmorType, int ModelVar );
	FString GetPhysics_Name ( int ArmorType, int ModelVar );
	class USkeletalMesh* GetModel ( int ArmorType, int ModelVar );
};

// Class SFXGame.Bio_Appr_Character_Hair
// 0x0023 (0x00CC - 0x00A9)
class UBio_Appr_Character_Hair : public UBioBaseAppearance
{
public:
	TArray<class UMaterialInterface*>                  m_aMaterials;                                     		// 0x00AC (0x0010) [0x0000000000400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink )
	class UBio_Appr_Character_Hair_Settings*           m_oSettings;                                      		// 0x00BC (0x0008) [0x00000000040A2009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_EditConst | CPF_Component | CPF_EditInline )
	class USkeletalMesh*                               m_oModelMesh;                                     		// 0x00C4 (0x0008) [0x0000000000000009]              ( CPF_Edit | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class USkeletalMesh* GetModel ( );
};

// Class SFXGame.Bio_Appr_Character_Head
// 0x0097 (0x0140 - 0x00A9)
class UBio_Appr_Character_Head : public UBioBaseAppearance
{
public:
	TArray<struct FBioCharacterHeadAppearanceMaterialConfig> m_aMaterialConfig;                                		// 0x00AC (0x0010) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	FString                                            MorphConstraints;                                 		// 0x00BC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<class UAnimSet*>                            AnimSets;                                         		// 0x00CC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<class UBio_Appr_Character_Hair*>            m_aHairAppearance;                                		// 0x00DC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FBioWrinkleConfig>                   TextureOverrides;                                 		// 0x00EC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UBio_Appr_Character_Head_Settings*           m_oSettings;                                      		// 0x00FC (0x0008) [0x00000000040A2009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UPhysicsAsset*                               PhysicsAsset;                                     		// 0x0104 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  WrinkleNormalMap;                                 		// 0x010C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  WrinkleNormalMask;                                		// 0x0114 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  WrinkleNormalMask01;                              		// 0x011C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UFaceFXAsset*                                DefaultFaceFXAsset;                               		// 0x0124 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          m_oPortraitMaterial;                              		// 0x012C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               m_oModelMesh;                                     		// 0x0134 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      HeadTrack : 1;                                    		// 0x013C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UseWrinkles : 1;                                  		// 0x013C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class USkeletalMesh* GetModel ( );
};

// Class SFXGame.Bio_Appr_Character_HeadGear
// 0x00E0 (0x0189 - 0x00A9)
class UBio_Appr_Character_HeadGear : public UBioBaseAppearance
{
public:
	struct FBioHeadGearAppearanceArmorSpec             m_aArmorSpec[ 0x5 ];                              		// 0x00AC (0x008C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FBioFacePlateMeshSpec>               m_aFacePlateMeshSpec;                             		// 0x0138 (0x0010) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray<class UMaterialInterface*>                  m_apFacePlateMaterial;                            		// 0x0148 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<class USkeletalMesh*>                       m_apVisorMesh;                                    		// 0x0158 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<class UMaterialInterface*>                  m_apVisorMaterial;                                		// 0x0168 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct SFXName                                     m_nmPrefix;                                       		// 0x0178 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBio_Appr_Character_HeadGear_Settings*       m_oSettings;                                      		// 0x0180 (0x0008) [0x00000000040A2009]              ( CPF_Edit | CPF_ExportObject | CPF_Transient | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned char                                      m_eArmorType;                                     		// 0x0188 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioBaseInterface
// 0x0008 (0x0068 - 0x0060)
class UBioBaseInterface : public UObject
{
public:
	class UBioActorBehavior*                           m_pBioActorBehavior;                              		// 0x0060 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioInterface_Appearance
// 0x0014 (0x007C - 0x0068)
class UBioInterface_Appearance : public UBioBaseInterface
{
public:
	class AActor*                                      pActor;                                           		// 0x0068 (0x0008) [0x0000000000000000]              
	class UBioMorphFace*                               m_oMorphFace;                                     		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bEnableMorphFaces : 1;                          		// 0x0078 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      m_bForceRunTimeUpdates : 1;                       		// 0x0078 (0x0004) [0x0000000000006000] [0x00000002] ( CPF_Transient | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UClass* GetSaveObjectClass ( );
	void ResetToDefaults ( );
	bool UpdateAppearance ( unsigned long bForceUpdate );
};

// Class SFXGame.BioInterfaceAppearanceVehicle
// 0x0010 (0x008C - 0x007C)
class UBioInterfaceAppearanceVehicle : public UBioInterface_Appearance
{
public:
	TArray<struct FBioVehicleTurretRunTimeInfo>        m_aTurretRuntimeInfo;                             		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ResetToDefaults ( );
	bool UpdateAppearance ( unsigned long bForceUpdate );
};

// Class SFXGame.BioInterface_Appearance_ArtPlaceable
// 0x0000 (0x007C - 0x007C)
class UBioInterface_Appearance_ArtPlaceable : public UBioInterface_Appearance
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool UpdateAppearance ( unsigned long bForceUpdate );
};

// Class SFXGame.BioInterface_Appearance_Pawn
// 0x0088 (0x0104 - 0x007C)
class UBioInterface_Appearance_Pawn : public UBioInterface_Appearance
{
public:
	struct FBioPawnHeadGearVisibility                  m_headGearVisibilityOverride;                     		// 0x007C (0x001C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FBioPawnHeadGearVisibility                  m_headGearVisibilityRunTimeOverride;              		// 0x0098 (0x001C) [0x0000000000000000]              
	struct FBioPawnHeadGearVisibility                  m_cachedHeadGearVisibility;                       		// 0x00B4 (0x001C) [0x0000000000000000]              
	class UBio_Appr_Character_Settings*                m_oSettings;                                      		// 0x00D0 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct SFXName                                     CreatureSpeedOverride;                            		// 0x00D8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct SFXName                                     m_nmCreatureSpeed;                                		// 0x00E0 (0x0008) [0x0000000000000000]              
	struct SFXName                                     m_nmBloodColor;                                   		// 0x00E8 (0x0008) [0x0000000000000000]              
	class UBio2DA*                                     m_oCreatureSpeedsTable;                           		// 0x00F0 (0x0008) [0x0000000000000000]              
	class UBioMaterialOverride*                        m_pMaterialParameters;                            		// 0x00F8 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      m_bHeadGearVisiblePreference : 1;                 		// 0x0100 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float GetDefaultCollisionReadyHeight ( );
	float GetDefaultCollisionCrouchHeight ( );
	float GetDefaultCollisionRadius ( );
	float GetDefaultCollisionHeight ( );
	void SetCreatureSpeed ( struct SFXName NewSpeedOverride );
	void GetCreatureSpeeds ( struct FCreatureSpeeds* SpeedsRecord );
	bool UpdateAppearance ( unsigned long bForceUpdate );
	void ExtractResources ( class ABioPawn* Pawn, class UBio_Appr_Character* Appearance );
};

// Class SFXGame.BioArtPlaceable
// 0x0184 (0x0408 - 0x0284)
class ABioArtPlaceable : public AActor
{
public:
	struct FMap_Mirror                                 m_mAttachedNavPoints;                             		// 0x0284 (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct FMultiMap_Mirror                            m_maoBlockedReachSpecs;                           		// 0x02CC (0x0048) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray<struct FCoverLinkRecord>                    m_aDisabledCoverLinks;                            		// 0x0314 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FCoverSlot>                          Slots;                                            		// 0x0324 (0x0010) [0x0000000004420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	TArray<class AController*>                         Claims;                                           		// 0x0334 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class ABioVisualEffect*>                    VisualEffects;                                    		// 0x0344 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<class ABioBaseSquad*>                       m_aoSquads;                                       		// 0x0354 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UBioArtPlaceableBehavior*                    m_oBehavior;                                      		// 0x0364 (0x0008) [0x0000000004020001]              ( CPF_Edit | CPF_EditConst | CPF_EditInline )
	class UAudioComponent*                             PlacablesSounds;                                  		// 0x036C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMeshComponent*                              DestroyedMesh;                                    		// 0x0374 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMeshComponent*                              PlaceableMesh;                                    		// 0x037C (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMeshComponent*                              CoverMesh;                                        		// 0x0384 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ABioArtPlaceable*                            m_oNextArtPlaceableLink;                          		// 0x038C (0x0008) [0x0000000000000002]              ( CPF_Const )
	class ABioPawn*                                    m_oLastInstigator;                                		// 0x0394 (0x0008) [0x0000000000000000]              
	class ULightEnvironmentComponent*                  m_pLightEnvComponent;                             		// 0x039C (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct SFXName                                     m_nmMatineeNodeName;                              		// 0x03A4 (0x0008) [0x0000000000000000]              
	class ABioArtPlaceable*                            NextPlaceable;                                    		// 0x03AC (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UBioFSMComponent*                            FSM;                                              		// 0x03B4 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioCoverInterface*                          m_oTempInterface;                                 		// 0x03BC (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class ABioDEBUGMarker*                             m_oDbgMarker;                                     		// 0x03C4 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                m_nNumParticipants;                               		// 0x03CC (0x0004) [0x0000000000000000]              
	float                                              StandHeight;                                      		// 0x03D0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MidHeight;                                        		// 0x03D4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LowHeight;                                        		// 0x03D8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AlignDist;                                        		// 0x03DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              m_fNextProxCheck;                                 		// 0x03E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCorpseCleanupFirstAttemptTime;                 		// 0x03E4 (0x0004) [0x0000000000006002]              ( CPF_Const | CPF_Transient | CPF_Config )
	float                                              m_fCorpseCleanupAttemptRetryTime;                 		// 0x03E8 (0x0004) [0x0000000000006002]              ( CPF_Const | CPF_Transient | CPF_Config )
	int                                                m_nMaxCorpseVisibilityCleanupAttempts;            		// 0x03EC (0x0004) [0x0000000000006002]              ( CPF_Const | CPF_Transient | CPF_Config )
	float                                              m_fMaxCorpseCleanupDistanceThreshold;             		// 0x03F0 (0x0004) [0x0000000000006002]              ( CPF_Const | CPF_Transient | CPF_Config )
	float                                              m_fMaxCorpseCleanupScreenSizeThreshold;           		// 0x03F4 (0x0004) [0x0000000000006002]              ( CPF_Const | CPF_Transient | CPF_Config )
	int                                                m_nCorpseCleanupAttempts;                         		// 0x03F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nTickCount;                                     		// 0x03FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMaxRelevancyDistance;                          		// 0x0400 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bDisregardLineTestsFromBasedActor : 1;          		// 0x0404 (0x0004) [0x0000000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	unsigned long                                      m_bFirstFrameMove : 1;                            		// 0x0404 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bDisabled : 1;                                    		// 0x0404 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bClaimAllSlots : 1;                               		// 0x0404 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bDebugCover : 1;                                  		// 0x0404 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      m_bCanCleanupCorpse : 1;                          		// 0x0404 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      m_bAlwaysTick : 1;                                		// 0x0404 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventDestroyedCleanupTimer ( );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventSetAnimWeights ( TArray<struct FAnimSlotInfo> const& SlotInfos );
	void eventSetAnimPosition ( struct SFXName SlotName, int ChannelIndex, struct SFXName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	class UClass* GetSaveObjectClass ( );
	void eventOnSkillGameCanceled ( class ABioPawn* oUsingPawn );
	void eventOnSkillGameSucceeded ( class ABioPawn* oUsingPawn );
	void eventOnSkillGameFailed ( class ABioPawn* oUsingPawn );
	void eventAbortReactive ( struct SFXName nmToState );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void eventEncroachedBy ( class AActor* Other );
	void eventRanInto ( class AActor* Other );
	void BioBeginPlay ( );
	bool IsDynamicCover ( );
	void InitializeForPlay ( );
	void MAT_FinishAnimControl ( );
	void MAT_SetAnimWeights ( TArray<struct FAnimSlotInfo> const& SlotInfos );
	void MAT_SetAnimPosition ( struct SFXName SlotName, int ChannelIndex, struct SFXName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void MAT_BeginAnimControl ( TArray<class UAnimSet*> const& InAnimSets );
	void EjectUsersOfAPCover ( );
	void RemoveFromSquadCover ( );
	void AddToSquadCover ( class ABioBaseSquad* oSquad );
	bool BioDoProximityCheck ( );
	void DoTreasureTransfer ( class ABioPawn* pOther );
	void TermRagdoll ( );
	void InitRagdoll ( );
	struct FRotator GetSlotRotation ( int SlotIdx );
	struct FVector GetSlotLocation ( int SlotIdx );
	int DecBlocked ( int SlotIdx );
	int IncBlocked ( int SlotIdx );
	int GetAiCoverSpots ( );
	class AController* GetSlotClaimedBy ( int SlotIdx );
	bool GetSlotClaimed ( int SlotIdx, class AController* oCtrl );
	bool GetSlotEnabled ( int SlotIdx );
	unsigned char GetSlotType ( int SlotIdx );
	void UnClaim ( class AController* OldClaim, int SlotIdx, unsigned long bUnclaimAll );
	bool Claim ( class AController* NewClaim, int SlotIdx );
	int GetStepFlags ( int SlotIdx );
	struct FCoverSlot eventGetCoverSlot ( int nIdx );
	void UpdateWpPointPosition ( );
	void SetActionStationWP ( class ANavigationPoint* oWP, struct SFXName nmSocket );
};

// Class SFXGame.BioArtPlaceableShield
// 0x0000 (0x0408 - 0x0408)
class ABioArtPlaceableShield : public ABioArtPlaceable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventTick ( float fTimeDelta );
};

// Class SFXGame.BioContainer
// 0x0000 (0x0408 - 0x0408)
class ABioContainer : public ABioArtPlaceable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioDoor
// 0x0010 (0x0418 - 0x0408)
class ABioDoor : public ABioArtPlaceable
{
public:
	class APawn*                                       m_oPlayerWithinDoorProximity;                     		// 0x0408 (0x0008) [0x0000000000000000]              
	float                                              m_fFarCloseDistance;                              		// 0x0410 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bSaveStateWhenPlayerEntered : 1;                		// 0x0414 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float CalcDistanceFromDoorPlane ( struct FVector* vWorldLocation );
	bool BioDoProximityCheck ( );
};

// Class SFXGame.BioArtPlaceableCoverInterface
// 0x0008 (0x0070 - 0x0068)
class UBioArtPlaceableCoverInterface : public UBioCoverInterface
{
public:
	class ABioArtPlaceable*                            m_oArtPlaceable;                                  		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool GetSlot ( int SlotIdx, struct FCoverSlot* Slot );
	int DecBlocked ( int SlotIdx );
	int IncBlocked ( int SlotIdx );
	class AController* GetSlotClaimedBy ( int SlotIdx );
	bool GetSlotClaimed ( int SlotIdx, class AController* oCtrl );
	bool GetSlotEnabled ( int SlotIdx );
	unsigned char GetSlotType ( int SlotIdx );
	int GetStepFlags ( int SlotIdx );
	void UnClaim ( class AController* OldClaim, int SlotIdx, unsigned long bUnclaimAll );
	bool Claim ( class AController* NewClaim, int SlotIdx );
	int GetSlotCount ( );
	struct FRotator GetSlotRotation ( int nSlotID );
	struct FVector GetSlotLocation ( int nSlotID );
	class AActor* GetCoverObject ( );
	void Reset ( );
	void InitFromActor ( class AActor* oAct );
	bool IsValid ( );
};

// Class SFXGame.BioAPCoverMeshComponent
// 0x0000 (0x0318 - 0x0318)
class UBioAPCoverMeshComponent : public UCoverMeshComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAttributes
// 0x0004 (0x0070 - 0x006C)
class UBioAttributes : public UBioBaseComponent
{
public:
	unsigned long                                      m_bIsInitialized : 1;                             		// 0x006C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	FString IntToString ( struct FBioComplexIntStructAttribute* attribute );
	int GetBaseIntValue ( struct FBioComplexIntStructAttribute* attribute );
	void SetBaseIntValue ( int baseValue, struct FBioComplexIntStructAttribute* attribute );
	int GetCurrentIntValue ( struct FBioComplexIntStructAttribute* attribute );
	FString FloatToString ( struct FBioComplexFloatStructAttribute* attribute );
	float GetBaseFloatValue ( struct FBioComplexFloatStructAttribute* attribute );
	void SetBaseFloatValue ( float baseValue, struct FBioComplexFloatStructAttribute* attribute );
	float GetCurrentFloatValue ( struct FBioComplexFloatStructAttribute* attribute );
	void ClearStringAttribute ( struct SFXName nmAttribute, int nIndexOfAttributeInArray );
	void RemoveFloatAttributeBaseOverrideModifier ( struct SFXName attribute, int nIndexOfOverride, int nIndexOfAttributeInArray );
	void RemoveIntAttributeBaseOverrideModifier ( struct SFXName attribute, int nIndexOfOverride, int nIndexOfAttributeInArray );
	void RemoveFloatAttributeModifier ( struct SFXName attribute, unsigned char modType, float fValue, int nIndexOfAttributeInArray );
	void RemoveIntAttributeModifier ( struct SFXName attribute, unsigned char modType, int nValue, int nIndexOfAttributeInArray );
	int AddFloatAttributeBaseOverrideModifier ( struct SFXName attribute, float Value, int nIndexOfAttributeInArray );
	int AddIntAttributeBaseOverrideModifier ( struct SFXName attribute, int Value, int nIndexOfAttributeInArray );
	void AddFloatAttributeModifier ( struct SFXName attribute, unsigned char modType, float fValue, int nIndexOfAttributeInArray );
	void AddIntAttributeModifier ( struct SFXName attribute, unsigned char modType, int nValue, int nIndexOfAttributeInArray );
	void SetNameAttribute ( struct SFXName attribute, struct SFXName nmValue, int nIndexOfAttributeInArray );
	void SetBoolAttribute ( struct SFXName attribute, unsigned long bValue, int nIndexOfAttributeInArray );
	void SetEnumAttribute ( struct SFXName nmAttributeName, FString const& sValue, int nIndexOfAttributeInArray );
	void SetStringAttribute ( struct SFXName attribute, FString const& sValue, int nIndexOfAttributeInArray );
	void SetByteAttribute ( struct SFXName attribute, unsigned char cValue, int nIndexOfAttributeInArray );
	void SetFloatAttribute ( struct SFXName attribute, float fValue, int nIndexOfAttributeInArray );
	void SetIntAttribute ( struct SFXName attribute, int nValue, int nIndexOfAttributeInArray );
	void EnsureInitialized ( );
};

// Class SFXGame.BioAttributesDamage
// 0x02A6 (0x0316 - 0x0070)
class UBioAttributesDamage : public UBioAttributes
{
public:
	struct FBioComplexIntStructAttribute               m_pAntiThorianCount;                              		// 0x0070 (0x0088) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_pPhasicFactor;                                  		// 0x00F8 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_pToxicFactor;                                   		// 0x0160 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_pStabilityFactor;                               		// 0x01C8 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_pOrganicDamageFactor;                           		// 0x0230 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_pInorganicDamageFactor;                         		// 0x0298 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fInitialPhasicFactor;                           		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInitialToxicFactor;                            		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInitialStabilityFactor;                        		// 0x0308 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nInitialAntiThorianCount;                       		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bHasImpulseOnDeath : 1;                         		// 0x0310 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bHasImpulse : 1;                                		// 0x0310 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bIgnorePhysicsThreshold : 1;                    		// 0x0310 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bDamagesMySquad : 1;                            		// 0x0310 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bIsEMP : 1;                                     		// 0x0310 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      m_bIgnoresShields : 1;                            		// 0x0310 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      m_bDamagesHealth : 1;                             		// 0x0310 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      m_bIgnoresDamageResistance : 1;                   		// 0x0310 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      m_bSuppressDeathCapabilities : 1;                 		// 0x0310 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned char                                      m_eExplosionFalloff;                              		// 0x0314 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_nWeaponType;                                    		// 0x0315 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetWeaponDamageType ( unsigned char nWeaponType );
};

// Class SFXGame.BioAttributesEpicPawn
// 0x0328 (0x0398 - 0x0070)
class UBioAttributesEpicPawn : public UBioAttributes
{
public:
	struct FBioComplexIntStructAttribute               m_ScanLevel;                                      		// 0x0070 (0x0088) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_HealthMax;                                      		// 0x00F8 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_HealthRegenRate;                                		// 0x0160 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_BioticMultiplier;                               		// 0x01C8 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_TechMultiplier;                                 		// 0x0230 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_PowerCooldownMultiplier;                        		// 0x0298 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_RadarRange;                                     		// 0x0300 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_FirstName;                                      		// 0x0368 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBio2DA*                                     m_PrimaryAttributeLookupTable;                    		// 0x0378 (0x0008) [0x0000000000000000]              
	float                                              m_HealthCurrent;                                  		// 0x0380 (0x0004) [0x0000000000000000]              
	float                                              m_ShieldCurrent;                                  		// 0x0384 (0x0004) [0x0000000000000000]              
	int                                                m_LastName;                                       		// 0x0388 (0x0004) [0x0000000000000000]              
	float                                              m_initialRadarRange;                              		// 0x038C (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_initialHealthRegenRate;                         		// 0x0390 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	unsigned long                                      m_HealthAffectedByImmunity : 1;                   		// 0x0394 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_ShieldsAffectedByShieldIncrease : 1;            		// 0x0394 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_MatriarchZen : 1;                               		// 0x0394 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	FString GetName ( );
	FString GetDesignedName ( );
	void RemoveFloatAttributeBaseOverrideModifier ( struct SFXName attribute, int nIndexOfOverride, int nIndexOfAttributeInArray );
	int AddFloatAttributeBaseOverrideModifier ( struct SFXName attribute, float Value, int nIndexOfAttributeInArray );
	void RemoveFloatAttributeModifier ( struct SFXName attribute, unsigned char modType, float fValue, int nIndexOfAttributeInArray );
	void AddFloatAttributeModifier ( struct SFXName attribute, unsigned char modType, float fValue, int nIndexOfAttributeInArray );
	void SetFloatAttribute ( struct SFXName attribute, float fValue, int nIndexOfAttributeInArray );
};

// Class SFXGame.BioAttributesPawn
// 0x0B1E (0x0EB6 - 0x0398)
class UBioAttributesPawn : public UBioAttributesEpicPawn
{
public:
	struct FBioComplexIntStructAttribute               m_Stamina;                                        		// 0x0398 (0x0088) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexIntStructAttribute               m_Focus;                                          		// 0x0420 (0x0088) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexIntStructAttribute               m_Precision;                                      		// 0x04A8 (0x0088) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexIntStructAttribute               m_Coordination;                                   		// 0x0530 (0x0088) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexIntStructAttribute               m_HazardLevel;                                    		// 0x05B8 (0x0088) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_StabilityMax;                                   		// 0x0640 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_StabilityRegenRate;                             		// 0x06A8 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_StabilityCrouchBonus;                           		// 0x0710 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_StabilityCombatModeModifier;                    		// 0x0778 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_DamageDurationMult;                             		// 0x07E0 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_ResistanceSuppression;                          		// 0x0848 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_ResistanceBiotic;                               		// 0x08B0 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_Visibility;                                     		// 0x0918 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_Audibility;                                     		// 0x0980 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_SkillElectronics;                               		// 0x09E8 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_SkillDecryption;                                		// 0x0A50 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_HealthPerLevel;                                 		// 0x0AB8 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_ThreatMultiplier;                               		// 0x0B20 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_Blindness;                                      		// 0x0B88 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_Deafness;                                       		// 0x0BF0 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_ExperienceMultiplier;                           		// 0x0C58 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_CreditsMultiplier;                              		// 0x0CC0 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_SalvageMultiplier;                              		// 0x0D28 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_MediGelMultiplier;                              		// 0x0D90 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_PhysicsResistance;                              		// 0x0DF8 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_XPLevel;                                        		// 0x0E60 (0x0004) [0x0000000000000000]              
	float                                              m_StabilityCurrent;                               		// 0x0E64 (0x0004) [0x0000000000000000]              
	float                                              m_StabilityModifier;                              		// 0x0E68 (0x0004) [0x0000000000000000]              
	float                                              m_ToxicCurrent;                                   		// 0x0E6C (0x0004) [0x0000000000000000]              
	int                                                m_initialStamina;                                 		// 0x0E70 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	int                                                m_initialFocus;                                   		// 0x0E74 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	int                                                m_initialPrecision;                               		// 0x0E78 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	int                                                m_initialCoordination;                            		// 0x0E7C (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_initialStabilityCrouchBonus;                    		// 0x0E80 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_initialStabilityCombatModeModifier;             		// 0x0E84 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_initialResistanceSuppression;                   		// 0x0E88 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_initialResistanceBiotic;                        		// 0x0E8C (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_initialVisibility;                              		// 0x0E90 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_initialAudibility;                              		// 0x0E94 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_initialSkillElectronics;                        		// 0x0E98 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_initialSkillDecryption;                         		// 0x0E9C (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_initialHealthPerLevel;                          		// 0x0EA0 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_initialThreatMultiplier;                        		// 0x0EA4 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_initialBlindness;                               		// 0x0EA8 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_initialDeafness;                                		// 0x0EAC (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	unsigned long                                      m_EquipPistol : 1;                                		// 0x0EB0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_EquipAssault : 1;                               		// 0x0EB0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_EquipShotgun : 1;                               		// 0x0EB0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_EquipSniper : 1;                                		// 0x0EB0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_EquipArmorLight : 1;                            		// 0x0EB0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_EquipArmorMedium : 1;                           		// 0x0EB0 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_EquipArmorHeavy : 1;                            		// 0x0EB0 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_EquipBioAmp : 1;                                		// 0x0EB0 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_EquipOmniTool : 1;                              		// 0x0EB0 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned char                                      m_Gender;                                         		// 0x0EB4 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_Race;                                           		// 0x0EB5 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void RemoveFloatAttributeModifier ( struct SFXName attribute, unsigned char modType, float fValue, int nIndexOfAttributeInArray );
	void RemoveIntAttributeModifier ( struct SFXName attribute, unsigned char modType, int nValue, int nIndexOfAttributeInArray );
	void AddFloatAttributeModifier ( struct SFXName attribute, unsigned char modType, float fValue, int nIndexOfAttributeInArray );
	void AddIntAttributeModifier ( struct SFXName attribute, unsigned char modType, int nValue, int nIndexOfAttributeInArray );
	void SetFloatAttribute ( struct SFXName attribute, float fValue, int nIndexOfAttributeInArray );
	void SetIntAttribute ( struct SFXName attribute, int nValue, int nIndexOfAttributeInArray );
};

// Class SFXGame.BioAttributesPawnParty
// 0x0239 (0x10EF - 0x0EB6)
class UBioAttributesPawnParty : public UBioAttributesPawn
{
public:
	struct FBioComplexIntStructAttribute               m_IsProficientPistol;                             		// 0x0EB8 (0x0088) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexIntStructAttribute               m_IsProficientRifle;                              		// 0x0F40 (0x0088) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexIntStructAttribute               m_IsProficientShotgun;                            		// 0x0FC8 (0x0088) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexIntStructAttribute               m_IsProficientSniper;                             		// 0x1050 (0x0088) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_Experience;                                     		// 0x10D8 (0x0004) [0x0000000000000000]              
	int                                                m_TalentPoints;                                   		// 0x10DC (0x0004) [0x0000000000000000]              
	int                                                m_TalentPoolPoints;                               		// 0x10E0 (0x0004) [0x0000000000000000]              
	int                                                m_LocalizedClassName;                             		// 0x10E4 (0x0004) [0x0000000000000000]              
	int                                                m_AutoLevelUpTemplateID;                          		// 0x10E8 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_AttributePrimary;                               		// 0x10EC (0x0001) [0x0000000000000000]              
	unsigned char                                      m_AttributeSecondary;                             		// 0x10ED (0x0001) [0x0000000000000000]              
	unsigned char                                      m_ClassBase;                                      		// 0x10EE (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int GetParagon ( );
	int GetRenegade ( );
	bool SetMainAttributes ( int primary, int secondary, int tertiary );
};

// Class SFXGame.BioAttributesPawnPlayer
// 0x01C8 (0x12B7 - 0x10EF)
class UBioAttributesPawnPlayer : public UBioAttributesPawnParty
{
public:
	struct FBioComplexFloatStructAttribute             m_SkillCharm;                                     		// 0x10F0 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_SkillIntimidate;                                		// 0x1158 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_SkillHaggle;                                    		// 0x11C0 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_SkillSalesman;                                  		// 0x1228 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_FaceCode;                                       		// 0x1290 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_SpecializationBonusID;                          		// 0x12A0 (0x0004) [0x0000000000000000]              
	float                                              MINIMUM_SKILL_HAGGLE;                             		// 0x12A4 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              MAXIMUM_SKILL_HAGGLE;                             		// 0x12A8 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              MINIMUM_SKILL_SALESMAN;                           		// 0x12AC (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              MAXIMUM_SKILL_SALESMAN;                           		// 0x12B0 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	unsigned char                                      m_SpectreRank;                                    		// 0x12B4 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_BackgroundOrigin;                               		// 0x12B5 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_BackgroundNotoriety;                            		// 0x12B6 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAttributesPawnVehicle
// 0x0040 (0x03D8 - 0x0398)
class UBioAttributesPawnVehicle : public UBioAttributesEpicPawn
{
public:
	float                                              m_RunOverVelocityThreshold;                       		// 0x0398 (0x0004) [0x0000000000000000]              
	float                                              m_RunOverImpulseBase;                             		// 0x039C (0x0004) [0x0000000000000000]              
	float                                              m_RunOverDamageBase;                              		// 0x03A0 (0x0004) [0x0000000000000000]              
	float                                              m_fAINoiseThrusters;                              		// 0x03A4 (0x0004) [0x0000000000000000]              
	float                                              m_fAINoiseEngineMin;                              		// 0x03A8 (0x0004) [0x0000000000000000]              
	float                                              m_fAINoiseEngineMax;                              		// 0x03AC (0x0004) [0x0000000000000000]              
	float                                              m_fAINoiseCollisionMax;                           		// 0x03B0 (0x0004) [0x0000000000000000]              
	float                                              m_initialHealth;                                  		// 0x03B4 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_initialRunOverVelocityThreshold;                		// 0x03B8 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_initialRunOverImpulseBase;                      		// 0x03BC (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_initialRunOverDamageBase;                       		// 0x03C0 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_initialAINoiseThrusters;                        		// 0x03C4 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_initialAINoiseEngineMin;                        		// 0x03C8 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_initialAINoiseEngineMax;                        		// 0x03CC (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_initialAINoiseCollisionMax;                     		// 0x03D0 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	int                                                m_ConfigVehicleName;                              		// 0x03D4 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAttributesItem
// 0x0089 (0x00F9 - 0x0070)
class UBioAttributesItem : public UBioAttributes
{
public:
	struct FBioComplexFloatStructAttribute             m_BaseItemPrice;                                  		// 0x0070 (0x0068) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	FString                                            m_Label;                                          		// 0x00D8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                m_Name;                                           		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_Description;                                    		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_ShopGuiItemPictureID;                           		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_IsExpanded : 1;                                 		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_InstantChange : 1;                              		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned char                                      m_RaceType;                                       		// 0x00F8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventDescribeAttributes ( );
};

// Class SFXGame.BioAttributesItemSophisticated
// 0x000B (0x0104 - 0x00F9)
class UBioAttributesItemSophisticated : public UBioAttributesItem
{
public:
	int                                                m_appearanceVariant;                              		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                m_MaterialParameterBlockIndex;                    		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventDescribeAttributes ( );
};

// Class SFXGame.BioAttributesItemEquippable
// 0x0000 (0x0104 - 0x0104)
class UBioAttributesItemEquippable : public UBioAttributesItemSophisticated
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventDescribeAttributes ( );
};

// Class SFXGame.BioAttributesItemBioAmp
// 0x0144 (0x0248 - 0x0104)
class UBioAttributesItemBioAmp : public UBioAttributesItemEquippable
{
public:
	struct FBioComplexFloatStructAttribute             m_Telekinetics;                                   		// 0x0104 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_SpatialDistortion;                              		// 0x016C (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_Kinetics;                                       		// 0x01D4 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fInitialTelekinetics;                           		// 0x023C (0x0004) [0x0000000000000000]              
	float                                              m_fInitialSpatialDistortion;                      		// 0x0240 (0x0004) [0x0000000000000000]              
	float                                              m_fInitialKinetics;                               		// 0x0244 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAttributesItemXModdable
// 0x0000 (0x0104 - 0x0104)
class UBioAttributesItemXModdable : public UBioAttributesItemEquippable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAttributesItemArmor
// 0x056C (0x0670 - 0x0104)
class UBioAttributesItemArmor : public UBioAttributesItemXModdable
{
public:
	struct FBioComplexIntStructAttribute               m_weightVisualOverride;                           		// 0x0104 (0x0088) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexIntStructAttribute               m_modelVariant;                                   		// 0x018C (0x0088) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexIntStructAttribute               m_materialConfig;                                 		// 0x0214 (0x0088) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexIntStructAttribute               m_headGearModelVariant;                           		// 0x029C (0x0088) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexIntStructAttribute               m_headGearMaterialConfig;                         		// 0x0324 (0x0088) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexIntStructAttribute               m_visor;                                          		// 0x03AC (0x0088) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexIntStructAttribute               m_facePlate;                                      		// 0x0434 (0x0088) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_ResistanceDamage;                               		// 0x04BC (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_ResistanceTech;                                 		// 0x0524 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_StabilityMovementPenalty;                       		// 0x058C (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_ResistanceToxic;                                		// 0x05F4 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_MaterialFlags;                                  		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInitialResistanceDamage;                       		// 0x0660 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_fInitialResistanceTech;                         		// 0x0664 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_fInitialStabilityMovementPenalty;               		// 0x0668 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_fInitialResistanceToxic;                        		// 0x066C (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventDescribeAttributes ( );
};

// Class SFXGame.BioAttributesItemGrenade
// 0x025C (0x0360 - 0x0104)
class UBioAttributesItemGrenade : public UBioAttributesItemXModdable
{
public:
	struct FBioComplexFloatStructAttribute             m_Damage;                                         		// 0x0104 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_Impulse;                                        		// 0x016C (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_radius;                                         		// 0x01D4 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_DamageMultiplierWhenBlocked;                    		// 0x023C (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_ImpulseMultiplierWhenBlocked;                   		// 0x02A4 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sVisualImpactSet;                               		// 0x030C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sMesh;                                          		// 0x031C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sPhysicsAsset;                                  		// 0x032C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sDeathVFX;                                      		// 0x033C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioItemGrenade*                             m_oGrenadeItem;                                   		// 0x034C (0x0008) [0x0000000000000000]              
	float                                              m_fInitialDamage;                                 		// 0x0354 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInitialImpulse;                                		// 0x0358 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInitialRadius;                                 		// 0x035C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ClearStringAttribute ( struct SFXName nmAttribute, int nIndexOfAttributeInArray );
	void SetStringAttribute ( struct SFXName attribute, FString const& sValue, int nIndexOfAttributeInArray );
};

// Class SFXGame.BioAttributesItemOmniTool
// 0x0144 (0x0248 - 0x0104)
class UBioAttributesItemOmniTool : public UBioAttributesItemXModdable
{
public:
	struct FBioComplexFloatStructAttribute             m_Electronics;                                    		// 0x0104 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_Decryption;                                     		// 0x016C (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_Medical;                                        		// 0x01D4 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fInitialElectronics;                            		// 0x023C (0x0004) [0x0000000000000000]              
	float                                              m_fInitialDecryption;                             		// 0x0240 (0x0004) [0x0000000000000000]              
	float                                              m_fInitialMedical;                                		// 0x0244 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAttributesItemWeapon
// 0x021C (0x0320 - 0x0104)
class UBioAttributesItemWeapon : public UBioAttributesItemXModdable
{
public:
	struct FBioComplexFloatStructAttribute             m_Damage;                                         		// 0x0104 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_DrawTimeMultiplier;                             		// 0x016C (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_WeaponFireNoise;                                		// 0x01D4 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_ProjectileImpactNoise;                          		// 0x023C (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_ShotPhysicsImpulse;                             		// 0x02A4 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_SoundSetIndex;                                  		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_initialWeaponFireNoise;                         		// 0x0310 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_initialProjectileImpactNoise;                   		// 0x0314 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              m_initialShotPhysicsImpulse;                      		// 0x0318 (0x0004) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	unsigned long                                      m_DualWield : 1;                                  		// 0x031C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventDescribeAttributes ( );
};

// Class SFXGame.BioAttributesItemWeaponMelee
// 0x0000 (0x0320 - 0x0320)
class UBioAttributesItemWeaponMelee : public UBioAttributesItemWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventDescribeAttributes ( );
};

// Class SFXGame.BioAttributesItemWeaponRanged
// 0x0AD5 (0x0DF5 - 0x0320)
class UBioAttributesItemWeaponRanged : public UBioAttributesItemWeapon
{
public:
	struct FBioComplexIntStructAttribute               m_pExplosionEnabled;                              		// 0x0320 (0x0088) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexIntStructAttribute               m_pImpactDelayEnabled;                            		// 0x03A8 (0x0088) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexIntStructAttribute               m_ProjectilesFired;                               		// 0x0430 (0x0088) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexIntStructAttribute               m_vfxType;                                        		// 0x04B8 (0x0088) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_Kickback;                                       		// 0x0540 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_RoundsPerSec;                                   		// 0x05A8 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_DriftAngleMax;                                  		// 0x0610 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_ProjectilesSpreadAngle;                         		// 0x0678 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_TrackingPenalty;                                		// 0x06E0 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_DriftAngleMin;                                  		// 0x0748 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_TargetIndicatorFixedDistance;                   		// 0x07B0 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_SelHalfAngleFar;                                		// 0x0818 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_SelHalfAngleClose;                              		// 0x0880 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_SelRangeFar;                                    		// 0x08E8 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_SelRangeClose;                                  		// 0x0950 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_HeatPerShot;                                    		// 0x09B8 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_HeatMax;                                        		// 0x0A20 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_HeatLossRate;                                   		// 0x0A88 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_HeatLossRateWhileOverheated;                    		// 0x0AF0 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_HeatMin;                                        		// 0x0B58 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_MagneticLockHalfAngleFarZoom;                   		// 0x0BC0 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_MagneticLockHalfAngleCloseZoom;                 		// 0x0C28 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_MagneticLockRangeFarZoom;                       		// 0x0C90 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_MagneticLockRangeCloseZoom;                     		// 0x0CF8 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct SFXName                                     m_nmPowerToUse;                                   		// 0x0D60 (0x0008) [0x0000000000000000]              
	float                                              m_minZoomFOV;                                     		// 0x0D68 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_maxZoomFOV;                                     		// 0x0D6C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_zoomRate;                                       		// 0x0D70 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_zoomCameraOffsetX;                              		// 0x0D74 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_zoomCameraOffsetY;                              		// 0x0D78 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_zoomCameraOffsetZ;                              		// 0x0D7C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_zoomKickbackDuration;                           		// 0x0D80 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_zoomSettleDuration;                             		// 0x0D84 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fExplosionRadius;                               		// 0x0D88 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fExplosionMomentum;                             		// 0x0D8C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_nMaxTargetZones;                                		// 0x0D90 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDamagePerExplosion;                            		// 0x0D94 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fImpactOriginOffsetAlongNegatedNormal;          		// 0x0D98 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fImpactDelayProjectileSpeed;                    		// 0x0D9C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fWeaponRecoilImpulse;                           		// 0x0DA0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_VFXLevel;                                       		// 0x0DA4 (0x0004) [0x0000000000000000]              
	int                                                m_nPowerCount;                                    		// 0x0DA8 (0x0004) [0x0000000000000000]              
	float                                              TEMP_CONFIG_m_DriftAngleMin;                      		// 0x0DAC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              TEMP_CONFIG_m_ImpactJumpPerShot;                  		// 0x0DB0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              TEMP_CONFIG_m_ImpactRollStepSizeMax;              		// 0x0DB4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              TEMP_CONFIG_m_DriftAngleMax;                      		// 0x0DB8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              TEMP_CONFIG_m_ImpactAngle;                        		// 0x0DBC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              TEMP_CONFIG_m_ImpactTrackingSpeed;                		// 0x0DC0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              TEMP_CONFIG_m_Kickback;                           		// 0x0DC4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              TEMP_CONFIG_m_TrackingPenalty;                    		// 0x0DC8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              TEMP_CONFIG_m_SelHalfAngleClose;                  		// 0x0DCC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              TEMP_CONFIG_m_SelHalfAngleFar;                    		// 0x0DD0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              TEMP_CONFIG_m_SelRangeClose;                      		// 0x0DD4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              TEMP_CONFIG_m_SelRangeFar;                        		// 0x0DD8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              TEMP_CONFIG_m_HeatPerShot;                        		// 0x0DDC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              TEMP_CONFIG_m_HeatMax;                            		// 0x0DE0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              TEMP_CONFIG_m_HeatLossRate;                       		// 0x0DE4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              TEMP_CONFIG_m_HeatLossRateWhileOverheated;        		// 0x0DE8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              TEMP_CONFIG_m_HeatMin;                            		// 0x0DEC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned long                                      m_FullAuto : 1;                                   		// 0x0DF0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_SupressionFire : 1;                             		// 0x0DF0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_isSecondaryMuzzleFlashEnabled : 1;              		// 0x0DF0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_hasFired : 1;                                   		// 0x0DF0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      m_ePowerMode;                                     		// 0x0DF4 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventDescribeAttributes ( );
};

// Class SFXGame.BioAttributesItemXMod
// 0x0000 (0x0104 - 0x0104)
class UBioAttributesItemXMod : public UBioAttributesItemSophisticated
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventDescribeAttributes ( );
};

// Class SFXGame.BioAttributesShield
// 0x014C (0x01BC - 0x0070)
class UBioAttributesShield : public UBioAttributes
{
public:
	struct FBioComplexFloatStructAttribute             m_ShieldMax;                                      		// 0x0070 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_ShieldRegenDelay;                               		// 0x00D8 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_ShieldRegenRate;                                		// 0x0140 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_DamageCapacity;                                 		// 0x01A8 (0x0004) [0x0000000000000000]              
	float                                              m_fInitialShieldMax;                              		// 0x01AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInitialShieldRegenDelay;                       		// 0x01B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInitialShieldRegenRate;                        		// 0x01B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_IsRechargeable : 1;                             		// 0x01B8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void RemoveFloatAttributeBaseOverrideModifier ( struct SFXName attribute, int nIndexOfOverride, int nIndexOfAttributeInArray );
	int AddFloatAttributeBaseOverrideModifier ( struct SFXName attribute, float Value, int nIndexOfAttributeInArray );
	void RemoveFloatAttributeModifier ( struct SFXName attribute, unsigned char modType, float fValue, int nIndexOfAttributeInArray );
	void AddFloatAttributeModifier ( struct SFXName attribute, unsigned char modType, float fValue, int nIndexOfAttributeInArray );
	void SetFloatAttribute ( struct SFXName attribute, float fValue, int nIndexOfAttributeInArray );
};

// Class SFXGame.BioPower
// 0x06AD (0x071D - 0x0070)
class UBioPower : public UBioAttributes
{
public:
	struct FBioComplexFloatStructAttribute             m_CastingTime;                                    		// 0x0070 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_TravelSpeed;                                    		// 0x00D8 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_Kickback;                                       		// 0x0140 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_CooldownTime;                                   		// 0x01A8 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_CylinderRadius;                                 		// 0x0210 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_MinimumRange;                                   		// 0x0278 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_MaximumRange;                                   		// 0x02E0 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_ImpactRadius;                                   		// 0x0348 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_UseDuration;                                    		// 0x03B0 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_EffectDuration;                                 		// 0x0418 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_VFXIntensity;                                   		// 0x0480 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_ImpactVolumeLength;                             		// 0x04E8 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_ImpactVolumeHalfAngle;                          		// 0x0550 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_BuildUpTimeout;                                 		// 0x05B8 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioComplexFloatStructAttribute             m_RequiredResource;                               		// 0x0620 (0x0068) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FBioPowerParam>                      m_aAdditionalParams;                              		// 0x0688 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<unsigned char>                              m_aRangedWeaponTypes;                             		// 0x0698 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<unsigned char>                              m_aMeleeWeaponTypes;                              		// 0x06A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class AActor*>                              m_aImpactedActors;                                		// 0x06B8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct SFXName                                     m_nmPower;                                        		// 0x06C8 (0x0008) [0x0000000000000000]              
	class UBioPowerVFXAppearance*                      m_VFXAppearance;                                  		// 0x06D0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_nmLinkedPower;                                  		// 0x06D8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_nmPlayerLinkedPower;                            		// 0x06E0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBio2DA*                                     m_oPowerList;                                     		// 0x06E8 (0x0008) [0x0000000000000000]              
	float                                              m_fCapabilityRank;                                		// 0x06F0 (0x0004) [0x0000000000000000]              
	float                                              m_fBestRangeConst;                                		// 0x06F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fAreaAttackThresholdConst;                      		// 0x06F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nID;                                            		// 0x06FC (0x0004) [0x0000000000000000]              
	int                                                m_nIcon;                                          		// 0x0700 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fTotalCooldownTime;                             		// 0x0704 (0x0004) [0x0000000000000000]              
	float                                              m_fCooldownRemaining;                             		// 0x0708 (0x0004) [0x0000000000000000]              
	int                                                m_nEnabled;                                       		// 0x070C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nSuppressedCount;                               		// 0x0710 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bNeedsRangedWeapon : 1;                         		// 0x0714 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bNeedsMeleeWeapon : 1;                          		// 0x0714 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bStopOnFirstHit : 1;                            		// 0x0714 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bGroundBasedPower : 1;                          		// 0x0714 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bBlockedByObjects : 1;                          		// 0x0714 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bCancelling : 1;                                		// 0x0714 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned char                                      m_eDualType;                                      		// 0x0718 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_eAimType;                                       		// 0x0719 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eDiscipline;                                    		// 0x071A (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eRequiredResourceType;                          		// 0x071B (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eHUDType;                                       		// 0x071C (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventAddParameter ( struct SFXName nmParameter );
	bool LoadPlayerLinkedPower ( );
	bool LoadHUDType ( );
	bool LoadDiscipline ( );
	bool LoadRequiredResourceType ( );
	void CancelDualPowerInternal ( );
	bool LoadAimType ( );
	bool LoadDualPowerInfo ( );
	bool LoadRequiredWeaponType ( );
	void RemoveParameter ( struct SFXName nmParameter );
	bool LoadAdditionalParams ( );
	bool AutoMapPower ( );
	bool IsRequiredResourceAvailable ( );
	bool IsRequiredWeaponEquipped ( );
	bool GetDescription ( FString* sDescription );
	bool GetImpactText ( int* srImpactText );
	bool GetDisplayName ( FString* sDisplayName );
	int GetPowerIcon ( );
	float GetImpactNoise ( );
	float GetReleaseNoise ( );
	void CancelDualPower ( );
	class UBioPower* GetLinkedPower ( );
	bool IsDualPowerActive ( );
	bool CancelPower ( );
	bool IsActive ( );
	bool CanCasterMoveDuringPower ( );
	void Tick ( float fDeltaTime );
	void SetTotalCooldownTime ( float fTotalCooldown );
	float GetTotalCooldownTime ( unsigned long bCheckLinkedPower );
	void SetCooldownRemaining ( float fCooldownRemaining, unsigned long bFireCompletionEventIfZero );
	float GetCooldownRemaining ( unsigned long bCheckLinkedPower );
	bool StopPowerBuildUp ( class AActor* oCaster, class AActor* oTarget, class UBioGameProperty* oGameProperty );
	bool GetPowerBuildUp ( class AActor* oCaster, class AActor* oTarget, float* fPowerBuildUp, class UBioGameProperty** oGameProperty );
	bool StartPowerBuildUp ( class AActor* oCaster, class AActor* oTarget );
	bool IsSuppressed ( );
	int SuppressPower ( unsigned long bSuppress );
	bool IsEnabled ( );
	bool EnablePower ( unsigned long bEnable );
	bool GetLocation ( unsigned char* eLocation );
	bool GetImpactShape ( unsigned char* eShape );
	bool GetProjectileAttachPoint ( class APawn* pPawn, struct FVector* vAttachPoint );
	bool GetAnim ( unsigned long bUseCoverAnimations, FString* sAnim, struct SFXName* nmAnimSet );
	float GetParameter ( struct SFXName nmParameter );
	void DoImpactVFX ( class AActor* oActor, class UBioActivePower* pPowerInstance, struct SFXName BoneName, struct FVector* vLocation, struct FVector* vHitNormal );
	float GetVFXLifetime ( unsigned char eResource, class UBioActivePower* oPowerInstance );
	class UBioVFXTemplate* GetVFXTemplate ( unsigned char eResource );
	void EndVisualEffect ( unsigned char eResource, unsigned long bAllowVFXToFinish );
	class ABioVisualEffect* GetVisualEffect ( unsigned char eResource );
	bool LoadVFXAppearance ( );
	bool GetPowerScript ( struct SFXName* nmPowerScript );
	void CreatePowerIndexMap ( class UBio2DA* oPowers2DA );
	void InitializePower ( struct SFXName nmPower );
	void RemoveFloatAttributeModifier ( struct SFXName attribute, unsigned char modType, float fValue, int nIndexOfAttributeInArray );
	void AddFloatAttributeModifier ( struct SFXName attribute, unsigned char modType, float fValue, int nIndexOfAttributeInArray );
	void SetFloatAttribute ( struct SFXName attribute, float fValue, int nIndexOfAttributeInArray );
};

// Class SFXGame.BioPowerManager
// 0x002C (0x008C - 0x0060)
class UBioPowerManager : public UObject
{
public:
	TArray<class ABioLinePowerProjectile*>             m_aPowerProjectiles;                              		// 0x0060 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct SFXName                                     m_nmWeaponPowerID;                                		// 0x0070 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_nmHealPowerID;                                  		// 0x0078 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_nmArmorEmitterPowerID;                          		// 0x0080 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPowerHalfAngle;                                		// 0x0088 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void GetAimTargetForPlayer ( float fMaxRange, class AActor** oTarget, struct FVector* vTargetLocation );
	bool AreActorsFriendly ( class AActor* oFirstActor, class AActor* oSecondActor );
	bool CanImpactActor ( class AActor* oActor );
	bool CheckLOSToLocation ( class AActor* oSourceActor, struct FVector const& vStartLocation, struct FVector const& vEndLocation, float fMaxRange, unsigned long bIgnoreFriendlies, class AActor** oHitActor, struct FVector* vHitLocation, struct FVector* vHitNormal );
	bool CheckLOSToActor ( class AActor* oSourceActor, class AActor* oDestinationActor, struct FVector const& vStartLocation, float fMaxRange, unsigned long bIgnoreFriendlies, class AActor** oHitActor, struct FVector* vHitLocation, struct FVector* vHitNormal );
	void RemoveProjectile ( class ABioLinePowerProjectile* oProjectile );
	void AddProjectile ( class ABioLinePowerProjectile* oProjectile );
	bool GetCurrentArmorEmitterPower ( class UBioEpicPawnBehavior* oBehavior, class UBioPower** oPower, int* nIndexInPowerArray );
	bool GetCurrentHealPower ( class UBioEpicPawnBehavior* oBehavior, class UBioPower** oPower, int* nIndexInPowerArray );
	bool GetCurrentWeaponPower ( class UBioEpicPawnBehavior* oBehavior, class UBioPower** oPower, int* nIndexInPowerArray );
};

// Class SFXGame.BioAudioVolume
// 0x0044 (0x0308 - 0x02C4)
class ABioAudioVolume : public AVolume
{
public:
	TArray<class AAmbientSound*>                       AmbientSoundArray;                                		// 0x02C4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FKConvexElem>                        aConvexElems;                                     		// 0x02D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FKBoxElem>                           aBoxElems;                                        		// 0x02E4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class APawn*                                       m_oTrackPawn;                                     		// 0x02F4 (0x0008) [0x0000000000000000]              
	class AInfo*                                       m_oTrackTimer;                                    		// 0x02FC (0x0008) [0x0000000000000000]              
	unsigned long                                      bPawnIsInsideVolume : 1;                          		// 0x0304 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void myTimerPop ( );
	void TimerPop ( class ABioAudioVolumeTimer* T );
	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector const& HitLocation, struct FVector const& HitNormal );
	void PostBeginPlay ( );
};

// Class SFXGame.BioMusicVolume
// 0x003C (0x0300 - 0x02C4)
class ABioMusicVolume : public AVolume
{
public:
	struct SFXName                                     MusicID;                                          		// 0x02C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SoundCue;                                         		// 0x02CC (0x0008) [0x0000000000000000]              
	class UAudioComponent*                             AudioComponent;                                   		// 0x02D4 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class APawn*                                       m_oTrackPawn;                                     		// 0x02DC (0x0008) [0x0000000000000000]              
	class AInfo*                                       m_oTrackTimer;                                    		// 0x02E4 (0x0008) [0x0000000000000000]              
	class UBio2DA*                                     Music2DA;                                         		// 0x02EC (0x0008) [0x0000000000000000]              
	int                                                MusicPriority;                                    		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nCurrentMusicState;                             		// 0x02F8 (0x0004) [0x0000000000000000]              
	unsigned long                                      InitiallyEnabled : 1;                             		// 0x02FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bContainsPawn : 1;                              		// 0x02FC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bMyMusicIsPlaying : 1;                          		// 0x02FC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bEnabled : 1;                                   		// 0x02FC (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetContainsPlayer ( unsigned long bContainsPlayer );
	bool GetIsMusicOverriddenByXBox ( );
	void CheckCurrentMusicState ( );
	void SetEnabled ( unsigned long bEnabled );
	void Initialise2DA ( );
	void StopMusic ( );
	void StartMusic ( );
	bool CheckPriority ( );
	void TimerPop ( class ABioMusicVolumeTimer* T );
	void PostBeginPlay ( );
};

// Class SFXGame.BioMusicVolumeTimer
// 0x0008 (0x028C - 0x0284)
class ABioMusicVolumeTimer : public AInfo
{
public:
	class ABioMusicVolume*                             m_oBioMusicVolume;                                		// 0x0284 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Timer ( );
	void PostBeginPlay ( );
};

// Class SFXGame.BioSeqAct_ReverbPreset
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_ReverbPreset : public USequenceAction
{
public:
	int                                                ReverbPresetIndex;                                		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_ReverbVolume
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_ReverbVolume : public USequenceAction
{
public:
	float                                              ReverbVolume;                                     		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioActorBehavior
// 0x020D (0x0279 - 0x006C)
class UBioActorBehavior : public UBioBaseComponent
{
public:
	struct FMap_Mirror                                 m_mLatentSequenceDataStore;                       		// 0x006C (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMap_Mirror                                 m_mapAnimationStateTrakingList;                   		// 0x00B4 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	FString                                            ActorGameName;                                    		// 0x00FC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<class UBioSuperMode*>                       m_lSuperModeList;                                 		// 0x010C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<class UBioActive*>                          m_aRegisteredActive;                              		// 0x011C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<class UBioReactive*>                        m_aRegisteredReactive;                            		// 0x012C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<class UBioReactive*>                        m_aPendingReactive;                               		// 0x013C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<class UBioReactive*>                        m_aActivatedReactive;                             		// 0x014C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FBioActorPawnBehaviorLOSCache               m_ActorBehaviorLOSCache;                          		// 0x015C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<int>                                        m_aTargetTipDefaults;                             		// 0x016C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<int>                                        m_aPowerText;                                     		// 0x017C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UBioActorType*                               m_oActorType;                                     		// 0x018C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioCombatLog*                               m_oCombatLog;                                     		// 0x0194 (0x0008) [0x0000000000000000]              
	class UBioSuperMode*                               m_oCurrentActiveSuperMode;                        		// 0x019C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioActive*                                  m_oCurrentModalActive;                            		// 0x01A4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_oCurrentTarget;                                 		// 0x01AC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_oLastTarget;                                    		// 0x01B4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_nmPowerAffectingActor;                          		// 0x01BC (0x0008) [0x0000000000000000]              
	class UBioInventory*                               m_oInventory;                                     		// 0x01C4 (0x0008) [0x0000000004420008]              ( CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	class UBioInterface_Appearance*                    m_oAppearanceType;                                		// 0x01CC (0x0008) [0x0000000004420009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	class UBioGamePropertyManager*                     m_oAppliedGameProperties;                         		// 0x01D4 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioGamePropertyContainer*                   m_oGameProperties;                                		// 0x01DC (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioShield*                                  m_oShield;                                        		// 0x01E4 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioCameraShakeInterface*                    m_cameraShakeInterface;                           		// 0x01EC (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioStickyGrenadeInterface*                  m_stickyGrenadeInterface;                         		// 0x01F4 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioVFXInterface*                            m_vfxInterface;                                   		// 0x01FC (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioDamageType*                              m_pBumpDamage;                                    		// 0x0204 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioDamageType*                              m_pPhysicsDamage;                                 		// 0x020C (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioDeathVFXGameState*                       m_pDeathVFXGameState;                             		// 0x0214 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                ActorGameNameStrRef;                              		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      ActorGameNameColor;                               		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInteractionRange;                              		// 0x0224 (0x0004) [0x0000000000000000]              
	float                                              m_fHenchAimLagFactor;                             		// 0x0228 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fMaxHenchAimDist;                               		// 0x022C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nPreviousSuperMode;                             		// 0x0230 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPowerAffectingActorTime;                       		// 0x0234 (0x0004) [0x0000000000000000]              
	float                                              m_fFiringObsticalAbortPercentage;                 		// 0x0238 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fFiringAbortCutoffRadius;                       		// 0x023C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nLeaveActionStation;                            		// 0x0240 (0x0004) [0x0000000000000000]              
	int                                                m_nInvulnerabilityCount;                          		// 0x0244 (0x0004) [0x0000000000000000]              
	float                                              m_fDamageVulnerability;                           		// 0x0248 (0x0004) [0x0000000004000008]              ( CPF_ExportObject | CPF_EditInline )
	int                                                m_srStasisPowerText;                              		// 0x024C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fUseRange;                                      		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nRequiredScanLevel;                             		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nMaxTargetTipStrings;                           		// 0x0258 (0x0004) [0x0000000000000000]              
	int                                                m_nTargetTipTextOverridden;                       		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPhysicsDamagePerRelVel;                        		// 0x0260 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fPhysicsDamageImpulsePerRelVel;                 		// 0x0264 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fPhysicsDamageTimer;                            		// 0x0268 (0x0004) [0x0000000000000000]              
	float                                              m_fPhysicsDamageTimerMax;                         		// 0x026C (0x0004) [0x0000000000000000]              
	float                                              m_fPhysicsSoundLastTimePlayed;                    		// 0x0270 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bAreShieldsDisabled : 1;                        		// 0x0274 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      AllowFriendlyCollateral : 1;                      		// 0x0274 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      ActorGameNameOverride : 1;                        		// 0x0274 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bActive : 1;                                      		// 0x0274 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bMin1HealthOverride : 1;                        		// 0x0274 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      m_bMin1Health : 1;                                		// 0x0274 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      m_bIsDead : 1;                                    		// 0x0274 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bUseStringRefActorGameName : 1;                   		// 0x0274 (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	unsigned long                                      bDisableFacefx : 1;                               		// 0x0274 (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	unsigned long                                      Mountable : 1;                                    		// 0x0274 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      AllowFall : 1;                                    		// 0x0274 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      m_bIsBusy : 1;                                    		// 0x0274 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      m_bInActionStation : 1;                           		// 0x0274 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      m_bAllowDamageInCombatStasis : 1;                 		// 0x0274 (0x0004) [0x0000000004000008] [0x00002000] ( CPF_ExportObject | CPF_EditInline )
	unsigned long                                      m_bTargetable : 1;                                		// 0x0274 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      m_bTargetableOverride : 1;                        		// 0x0274 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      m_bCombatTargetable : 1;                          		// 0x0274 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      m_bCombatTargetableOverride : 1;                  		// 0x0274 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      m_bUseRangeOverride : 1;                          		// 0x0274 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      m_bRequiredScanLevelOverride : 1;                 		// 0x0274 (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      m_bTargetTipTextOverride : 1;                     		// 0x0274 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      m_bDefaultActionPossibleOverridden : 1;           		// 0x0274 (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      m_bDefaultActionPossible : 1;                     		// 0x0274 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      m_bPhysicsDamageEnabled : 1;                      		// 0x0274 (0x0004) [0x0000000000004000] [0x00800000] ( CPF_Config )
	unsigned long                                      m_bPhysicsDamageLoggingEnabled : 1;               		// 0x0274 (0x0004) [0x0000000000004000] [0x01000000] ( CPF_Config )
	unsigned long                                      m_bPlotProtected : 1;                             		// 0x0274 (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      m_bPlotProtectedOverride : 1;                     		// 0x0274 (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      m_bSuppressDisintegration : 1;                    		// 0x0274 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      m_bSuppressDisintegrationOverride : 1;            		// 0x0274 (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned char                                      m_eActionFrameworkErrorCode;                      		// 0x0278 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void GrenadeDetached ( class AActor* oGrenade );
	void GrenadeAttached ( class AActor* oGrenade );
	bool GetPowerText ( FString* sPowerText );
	bool IsDisintegrationSuppressed ( );
	bool IsPlotProtected ( );
	bool IsInvulnerable ( );
	void MakeInvulnerable ( unsigned long B );
	void eventDelayTacticalOrders ( );
	void ApplyTacticalOrders ( );
	class UClass* GetSaveObjectClass ( );
	bool ExitCombatStasis ( );
	bool EnterCombatStasis ( float fDuration, unsigned long bAllowDamage, int srStasisPowerText );
	bool MoveActorToFloor ( class AActor* oActor );
	class AActor* SpawnActorFromType ( FString const& sActorResource, struct FVector const& vLocation, struct FRotator const& rRotation, float fLifeSpan, class AActor* oOwner );
	float GetMaxHealth ( );
	class UBioBaseAppearance* GetAppearanceTemplate ( );
	bool eventTermRagdoll ( );
	bool eventInitRagdoll ( );
	bool IsRadialImpulseObstructed ( struct FVector const& vStart, struct FVector const& vEnd );
	bool ApplyRadialImpulse ( struct FVector const& vLineOfSightOrigin, struct FVector const& vImpulseOrigin, float fImpulseMagnitude, struct SFXName nmPhysicsBoneName );
	bool ExplosionHurtRadius ( float fBaseDamage, float fExplosionRadius, class UClass* clsDamageType, class UBioDamageType* pDamage, float fMomentum, struct FVector const& vDamageImpactOrigin, struct FVector const& vImpactOriginOffset, int nMaxTargetZones, class AActor* oIgnoredActor, class AController* oInstigatedByController, unsigned long bDoFullDamage );
	bool IsObstructed ( struct FVector const& vStart, struct FVector const& vEnd, class AActor* oCandidate );
	class UBioInventory* GetInventory ( );
	bool DetachMesh ( class USkeletalMeshComponent* Mesh, class USkeletalMeshComponent* subMesh );
	bool AttachMeshToClosestBone ( class USkeletalMeshComponent* Mesh, float fMeshDrawScale, class USkeletalMeshComponent* subMesh, struct FVector const& subMeshPosition, struct FRotator const& subMeshRotation );
	class UAudioComponent* PlayVOElements ( FString const& sText, class USoundCue* oVOSound, class UFaceFXAnimSet* oVOLipSet, FString const& sVOLipAnim, unsigned long bLetFaceFXPlayAudio, unsigned long bAutoDestroy, struct FBioVOSettings* cSettings );
	void RanOverByVehicle ( class ABioVehicleBase* oVehicle );
	void OnGPEvent ( unsigned char eEvent, class UObject* pTarget );
	bool GetBusyState ( );
	void SetBusyState ( unsigned long bSetBusy );
	void SetActive ( unsigned long bSetActive );
	bool IsCurrentTarget ( class AActor* oCandidateTarget );
	bool IsPenetratedByInstantWeaponFire ( class UClass* clsDamageType, class UBioDamageType* pDamage );
	void eventOnAnimEnd ( class UAnimNodeSequence* oAnimation, float PlayedTime, float ExcessTime );
	void ReactToDeath ( float Damage, float fDeathDamage, class AController* InstigatedBy, struct FVector const& HitLocation, struct FVector const& Momentum, class UClass* clsDamageType, struct FTraceHitInfo const& HitInfo, class UBioDamageType* pDamage );
	void CacheDeathVFXGameState ( float fDamage, float fDeathDamage, class AController* pInstigatorController, struct FVector const& vHitLocation, struct FVector const& vMomentum, class UBioDamageType* pDamage );
	void AmplifyDamage ( float* Damage );
	void eventHurtRadius ( float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector const& HurtOrigin, class AActor* oDirectlyHitActor, class UDamageType* pDamage );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector const& HurtOrigin, unsigned long bFullDamage, class AActor* pDamageCausingActor, class UDamageType* pDamage );
	bool eventIsFriendlyFire ( class AController* pInstigatorController, class UBioDamageType* pDamage );
	void ProxyTakeDamage ( float OriginalDamage, class AController* InstigatedBy, struct FVector const& HitLocation, class UClass* DamageType, struct FTraceHitInfo const& HitInfo, class AActor* pDamageCausingActor, class UBioDamageType* pDamage, float* CurrentDamage, struct FVector* Momentum );
	void TakeDamage ( float Damage, class AController* InstigatedBy, struct FVector const& HitLocation, struct FVector const& Momentum, class UClass* DamageType, struct FTraceHitInfo const& HitInfo, class AActor* pDamageCausingActor, class UDamageType* pDamage );
	void SetActorGameName ( FString const& newActorGameName );
	FString eventGetActorGameName ( );
	bool eventIsMin1Health ( );
	void eventInitializeRunTimeOnlyTransients ( );
	void eventBioRelateActors ( );
	bool ShouldChallengeScale ( );
	unsigned char GetActionFrameworkErrorCode ( );
	void SetActionFrameworkErrorCode ( unsigned char eError );
	bool HasCapability ( class UBioCapability* oCap );
	bool IsAbilityEnabled ( unsigned char eEnableType, struct SFXName nmSubType );
	int AbilityEnable ( unsigned long bEnable, unsigned char eEnableType, struct SFXName nmSubType );
	void ComputeStepOutLocations ( class AController* oCoverUser, int nStepFlags, struct FVector const& vSlotLoc, struct FRotator const& rSlotRot, float fLeftDist, float fRightDist, struct FVector const& vExtents, struct FVector* vHidePos, struct FVector* vStepLeftPost, struct FVector* vStepRightPost, struct FVector* vLeanLeftLocation, struct FVector* vLeanRightLocation );
	bool WeaponLineOfSightThreshold ( class AActor* oTarget, unsigned long bCrouched, float fThreshold );
	bool WeaponLineOfSightFromLocation ( struct FVector const& vLoc, class AActor* oTarget, unsigned long bCrouched, unsigned char LeanDirection );
	bool GetCurrentMoveTarget ( class AActor** oMoveTarget, struct FVector* vTarget );
	void RemoveAllLatentSequenceData ( );
	void RemoveLatentSequenceData ( class UClass* ClsType );
	class UBioSeqData* MakeLatentSequenceData ( class UClass* ClsType );
	class UBioSeqData* GetLatentSequenceData ( class UClass* ClsType );
	void DumpLatentSequenceData ( );
	class ABioBaseSquad* GetSquad ( );
	void InitializeForPlay ( );
	void SoftResetMovementAndAnimationState ( );
	void HardResetActionAndAnimationState ( );
	void ReleasePendingReactive ( class UBioReactive* oReactive );
	bool ReleaseActiveByClass ( class UClass* oActiveToRelease );
	bool ReleaseActive ( );
	class UBioReactive* AcquireReactive ( class UClass* clsReactive, class AActor* oInstigator );
	class UBioActive* SearchForActive ( class UClass* clsActive );
	class UBioActive* AcquireActive ( class UClass* clsActive, unsigned long bAutoStartActive );
	void RegisterReactive ( class UClass* clsReactive, class UBioReactive* oReactive );
	void RegisterActive ( class UClass* clsActive, class UBioActive* oActive );
	void EnableCollision ( unsigned long bState );
	void OnPhysicsImpulse ( class UMeshComponent* oMesh, unsigned long bIsForce, struct FVector* Impulse, struct FVector* Position, struct SFXName* BoneName );
	bool IsAbleToInstigate ( );
	bool IsDefaultActionPossible ( );
	bool IsWithinUseRange ( struct FVector const& vRefLocation );
	float GetUseRange ( );
	bool GetScanable ( int nInstigatorScanLevel );
	bool GetCombatTargetable ( );
	bool GetTargetable ( );
	bool IsCombatSelectable ( class ABioPlayerController* pPlayerController );
	bool IsExploreSelectable ( class ABioPlayerController* pPlayerController );
	bool GetPlayerSelectable ( class ABioPlayerController* pPlayerController, unsigned char ePlayerState );
	bool GetTargetZoneLocationN ( int nIndex, struct FVector* vLocation );
	struct FVector GetTargetZoneLocation ( );
	void OnCastAt ( class AActor* oWho, class APawn* oAttacker, struct SFXName* Power );
	void OnAttacked ( class AActor* oWho, class APawn* oAttacker, struct SFXName* Weapon );
	void GenerateOnCastAt ( class UBioActorBehavior* oAttacker, struct SFXName* nPower );
	void GenerateOnAttacked ( class UBioActorBehavior* oAttacker, struct SFXName* nWeapon );
	bool CanBeMounted ( class APawn* oMounter );
	bool CanBeShot ( class UBioActorBehavior* pOther );
	bool IsSuperModeCurrentAndActive ( unsigned char eSuperMode );
	void SetAnimationStateTrackingFor ( struct SFXName nmNodeName, struct SFXName nmValue );
	struct SFXName GetAnimationStateTrackingFor ( struct SFXName nmNodeName );
	void GetTargetTipText ( class UBioEpicPawnBehavior* oSourcePawnBehav, FString* strTip );
	class AActor* GetTarget ( );
	bool ForceClearTarget ( );
	bool SetTarget ( class AActor* oTarget, unsigned long bLockOnTarget );
	class UBioSuperMode* FindSuperMode ( class UClass* clsSuperMode );
	bool SetSuperMode ( unsigned char nSuperMode, unsigned long bActivate, unsigned long bReturnToSuperMode );
	unsigned char GetPreviousSuperMode ( );
	void TickBehavior ( float DeltaTime );
};

// Class SFXGame.BioArtPlaceableBehavior
// 0x00C5 (0x033E - 0x0279)
class UBioArtPlaceableBehavior : public UBioActorBehavior
{
public:
	FString                                            m_sConnectedObjectA;                              		// 0x027C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	FString                                            m_sConnectedObjectB;                              		// 0x028C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	FString                                            m_sVarName;                                       		// 0x029C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class UAnimSet*>                            m_aBackupAnimSets;                                		// 0x02AC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<class AActor*>                              m_aAttachedGrenades;                              		// 0x02BC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     m_vLastImpactVector;                              		// 0x02CC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_nCurrentMaterialVar;                            		// 0x02D8 (0x0008) [0x0000000000000000]              
	struct SFXName                                     StartingState;                                    		// 0x02E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     m_State0;                                         		// 0x02E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     m_State1;                                         		// 0x02F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioWorldInfo*                               bioWorld;                                         		// 0x02F8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_nmCurrentActivity;                              		// 0x0300 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioWp_DoorMarker*                           m_oDoorMarker;                                    		// 0x0308 (0x0008) [0x0000000000000000]              
	struct SFXName                                     m_nmLastState;                                    		// 0x0310 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fSkillProgress;                                 		// 0x0318 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fHealth;                                        		// 0x031C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCurrentHealth;                                 		// 0x0320 (0x0004) [0x0000000000000000]              
	int                                                m_nTreasureID;                                    		// 0x0324 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nIndex;                                         		// 0x0328 (0x0004) [0x0000000000000000]              
	int                                                m_nPrevRegionIndex;                               		// 0x032C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPrevPlotIndex;                                 		// 0x0330 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bStartingStateOverride : 1;                     		// 0x0334 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bUseCaseOverride : 1;                           		// 0x0334 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bPlayerOnly : 1;                                		// 0x0334 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      Enabled : 1;                                      		// 0x0334 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bDebugHasKey : 1;                                 		// 0x0334 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bInPhysics : 1;                                 		// 0x0334 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bPhysicsAffectableOverride : 1;                 		// 0x0334 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      m_bPhysicsAffectable : 1;                         		// 0x0334 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      m_bUseCustomCollisionSettings : 1;                		// 0x0334 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      m_bDontInvalidatePaths : 1;                       		// 0x0334 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      m_bHealthOverride : 1;                            		// 0x0334 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      m_bCanForceOpen : 1;                              		// 0x0334 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      m_bCanForceOpenOverride : 1;                      		// 0x0334 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      m_bTreasureOverride : 1;                          		// 0x0334 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      m_bMonitorDoor : 1;                               		// 0x0334 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bNoStateSave : 1;                                 		// 0x0334 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      m_bInMatinee : 1;                                 		// 0x0334 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      m_bSkillGameFailed : 1;                           		// 0x0334 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      m_bSkillGameXpAwarded : 1;                        		// 0x0334 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned char                                      MaterialVariation;                                		// 0x0338 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      m_eUseCase;                                       		// 0x0339 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_SkillDifficulty;                                		// 0x033A (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Region;                                           		// 0x033B (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Plot;                                             		// 0x033C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Conditional;                                      		// 0x033D (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DetonateAttachedGrenades ( );
	void GrenadeDetached ( class AActor* oGrenade );
	void GrenadeAttached ( class AActor* oGrenade );
	class UBioBaseSaveObject* eventWriteSaveObject ( class UObject* InOuter, class UBioBaseSaveObject* Save );
	void eventReadSaveObject ( class UBioBaseSaveObject* Save );
	class UClass* GetSaveObjectClass ( );
	bool ProceedWithMove ( class APawn* oPawn );
	void SetWaitingForMove ( unsigned long bVal );
	float GetMaxHealth ( );
	bool TermRagdoll ( );
	bool InitRagdoll ( );
	bool CanBeShot ( class UBioActorBehavior* pOther );
	void RanOverByVehicle ( class ABioVehicleBase* oVehicle );
	bool IsPhysicsAffectable ( );
	int GetUseCase ( );
	struct SFXName GetStateFailure ( );
	struct SFXName GetStateSuccess ( );
	bool IsTransitioning ( );
	void OnTransitionCPP ( struct SFXName FromState, struct SFXName ToState );
	void ChangeStateMesh ( struct SFXName* nmState );
	void SetActive ( unsigned long bSetActive );
	void SetCollision ( unsigned long bCollide );
	struct SFXName eventGetCurrentState ( );
	void ReactToDeath ( float Damage, float fDeathDamage, class AController* InstigatedBy, struct FVector const& HitLocation, struct FVector const& Momentum, class UClass* clsDamageType, struct FTraceHitInfo const& HitInfo, class UBioDamageType* pDamage );
	void eventReactToImpulse ( struct FVector const& vMomentum, struct FVector const& vHitLocation );
	void ProxyTakeDamage ( float OriginalDamage, class AController* InstigatedBy, struct FVector const& HitLocation, class UClass* DamageType, struct FTraceHitInfo const& HitInfo, class AActor* pDamageCausingActor, class UBioDamageType* pDamage, float* CurrentDamage, struct FVector* Momentum );
	void eventTakeDamageCPP ( float OriginalDamage, class AController* InstigatedBy, struct FVector const& HitLocation, class UClass* DamageType, struct FTraceHitInfo const& HitInfo, class AActor* pDamageCausingActor, class UBioDamageType* pDamage, struct FVector* Momentum );
	void UsedKey ( struct SFXName KeyName );
	bool eventHasKey ( struct SFXName KeyName );
	void eventOnAppearanceSet ( class UBioBaseAppearancePlaceable* oAppearance );
	void eventOnTransition ( struct SFXName FromState, struct SFXName ToState, unsigned long bCallCPP );
	void eventOnArtPlaceablePlotFail ( class AActor* oUsingActor, struct SFXName nmToState );
	void eventOnArtPlaceableUsed ( class AActor* User, struct SFXName ToState );
	bool eventIsInteractive ( );
	struct SFXName GetState ( );
	float eventGetHealth ( );
	void eventBioRelateActors ( );
	void eventInitializeRunTimeOnlyTransients ( );
	void eventBeginPlay ( );
	struct SFXName eventGetStartingState ( );
	bool eventCanForceOpen ( );
	int eventGetTreasureID ( );
	bool eventContainsTreasure ( );
	void DoDoorFinished ( struct SFXName ToState );
	bool HasTransition ( struct SFXName ToState, struct SFXName Transition );
	bool SetState ( struct SFXName ToState, struct SFXName NamedTransition, unsigned long IgnoreTransition, unsigned long bRightNow, unsigned long bApplyVFX );
	void VerifyNotEditor ( );
	void ApplyVFXForState ( struct SFXName NewState, unsigned long bForce );
	void PreloadVFX ( );
	bool CanBeMounted ( class APawn* oMounter );
	void PlaySoundForState ( struct SFXName* oState );
	bool IsMeshPhysicsCapable ( );
	void UpdatePlaceableDamage ( );
	void HandleDamageablePlaceable ( class AController* InstigatedBy, struct FVector const& HitLocation );
	void InitializeActionFramework ( );
	void OnPhysicsImpulse ( class UMeshComponent* oMesh, unsigned long bIsForce, struct FVector* Impulse, struct FVector* Position, struct SFXName* BoneName );
	bool GetTargetZoneLocationN ( int nIndex, struct FVector* vLocation );
	struct FVector GetTargetZoneLocation ( );
	bool GetPlayerSelectable ( class ABioPlayerController* pPlayerController, unsigned char ePlayerState );
};

// Class SFXGame.BioArtPlaceableShieldBehavior
// 0x0002 (0x0340 - 0x033E)
class UBioArtPlaceableShieldBehavior : public UBioArtPlaceableBehavior
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ProxyTakeDamage ( float OriginalDamage, class AController* InstigatedBy, struct FVector const& HitLocation, class UClass* DamageType, struct FTraceHitInfo const& HitInfo, class AActor* pDamageCausingActor, class UBioDamageType* pDamage, float* CurrentDamage, struct FVector* Momentum );
	void Tick ( float fTimeDelta );
};

// Class SFXGame.BioEpicPawnBehavior
// 0x00D0 (0x0349 - 0x0279)
class UBioEpicPawnBehavior : public UBioActorBehavior
{
public:
	FString                                            DefaultSquadClass;                                		// 0x027C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class UBioCapability*>                      m_aoCapabilities;                                 		// 0x028C (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	TArray<class UBioPower*>                           m_powers;                                         		// 0x029C (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct FBioEpicPawnBehaviorCache                   m_epicPawnBehaviorCache;                          		// 0x02AC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<struct FEpicPawnVisualEffect>               m_aVisualEffects;                                 		// 0x02BC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      SquadClass;                                       		// 0x02CC (0x0008) [0x0000000000000000]              
	class UClass*                                      m_attributesClass;                                		// 0x02D4 (0x0008) [0x0000000000000000]              
	struct FRotator                                    m_rPrevRotation;                                  		// 0x02DC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_CurrentTargetZoneName;                          		// 0x02E8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_ValidTargetZoneName;                            		// 0x02F0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioBaseSquad*                               Squad;                                            		// 0x02F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     SquadName;                                        		// 0x0300 (0x0008) [0x0000000000000000]              
	class UBioPawnSquadInterface*                      m_oSquadInterface;                                		// 0x0308 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioAttributesEpicPawn*                      m_PawnAttributes;                                 		// 0x0310 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              m_fZoneValidDelayTime;                            		// 0x0318 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nALLEnabled;                                    		// 0x031C (0x0004) [0x0000000000000000]              
	int                                                m_nQueueEnabled;                                  		// 0x0320 (0x0004) [0x0000000000000000]              
	int                                                m_nStackEnabled;                                  		// 0x0324 (0x0004) [0x0000000000000000]              
	int                                                m_nWeaponsEnabled;                                		// 0x0328 (0x0004) [0x0000000000000000]              
	int                                                m_nGrenadesEnabled;                               		// 0x032C (0x0004) [0x0000000000000000]              
	int                                                m_nPowersEnabled;                                 		// 0x0330 (0x0004) [0x0000000000000000]              
	int                                                m_nCombatTransitionEnabled;                       		// 0x0334 (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentPowerIndex;                             		// 0x0338 (0x0004) [0x0000000000000000]              
	int                                                m_nDoorProximityRefCount;                         		// 0x033C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bIsLockedOnTarget : 1;                          		// 0x0340 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bTargetZoneChanged : 1;                         		// 0x0340 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bFoundFirstTargetZoneHit : 1;                   		// 0x0340 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bValidTargetZoneChanged : 1;                    		// 0x0340 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bDoCameraBehaviorTransition : 1;                		// 0x0340 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      SquadLeader : 1;                                  		// 0x0340 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      m_bDebugIgnoreArmor : 1;                          		// 0x0340 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned char                                      m_eCurrentActionState;                            		// 0x0344 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_ePreviousActionState;                           		// 0x0345 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eCombatStance;                                  		// 0x0346 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_combatModeFadeoutState;                         		// 0x0347 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eWeaponFireMode;                                		// 0x0348 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventSetMatriarchZen ( unsigned long bEnabled );
	bool DisplayEpicPawnVisualEffect ( struct SFXName nmLabel );
	void eventOnShieldsDown ( );
	void eventAdjustSalvage ( float fAmt );
	float eventGetSalvage ( );
	bool IsHealing ( );
	void Heal ( float fHealthPoints, float fToxicDamageHealed, float fResourcesRequired );
	float GetPercentHealth ( );
	float GetCurrentHealth ( );
	void eventInitializeRunTimeOnlyTransients ( );
	void SetCurrentHealth ( float currentHealth );
	float GetMaxHealth ( );
	void UpdatePowersOnDeath ( );
	int FindPowerIndex ( struct SFXName nmPowerName );
	class UBioPower* FindPower ( struct SFXName nmPowerName );
	bool ApplyRadialImpulse ( struct FVector const& vLineOfSightOrigin, struct FVector const& vImpulseOrigin, float fImpulseMagnitude, struct SFXName nmPhysicsBoneName );
	bool SetTarget ( class AActor* oTarget, unsigned long bLockOnTarget );
	bool IsLockedOnTarget ( );
	void LockOnTarget ( unsigned long B );
	class UClass* GetSaveObjectClass ( );
	class UBioBaseSaveObject* eventWriteSaveObject ( class UObject* InOuter, class UBioBaseSaveObject* Save );
	bool eventIsFriendlyFire ( class AController* pInstigatorController, class UBioDamageType* pDamage );
	void ReactToDeath ( float fDamage, float fDeathDamage, class AController* pInstigatedBy, struct FVector const& vHitLocation, struct FVector const& vMomentum, class UClass* clsDamageType, struct FTraceHitInfo const& HitInfo, class UBioDamageType* pDamage );
	bool IsHostile ( class AController* InstigatedBy );
	bool IsNeutral ( class AController* InstigatedBy );
	bool IsFriendly ( class AController* InstigatedBy );
	void GetHealthAndShieldsCapacities ( int* fHealth, int* fShields );
	void GetHealthAndShieldsScaledToInt ( int* fHealth, int* fShields );
	void GetHealthAndShieldsScaled ( float* fHealth, float* fShields );
	void eventClearAllActionsOnPawn ( FString const& sClearLabel );
	int GetDoorProximityRefCount ( );
	void ModifyDoorProximityRefCount ( unsigned long bIncrement );
	bool IsCombatSelectable ( class ABioPlayerController* pPlayerController );
	bool IsExploreSelectable ( class ABioPlayerController* pPlayerController );
	void ProxyCacheGetMuzzleToTargetDirection ( class ABioWeaponRanged* Weapon, struct FRotator* Direction );
	void ProxyCacheGetWeaponTargetPoint ( class ABioWeaponRanged* Weapon, struct FVector* TargetPoint );
	void OnTargetInvalidated ( class AActor* CurrentSelection );
	bool OnNewPlayerPawnSelection ( class AActor* Selection, class UBioPlayerSelection* pPlayerSelection );
	unsigned char SetPreviousActionState ( );
	unsigned char SetActionState ( unsigned char eState, float fDelay );
	void TickPowers ( float DeltaTime );
	void ClearCurrentPower ( );
	bool SetCurrentPower ( struct SFXName nmPower, float* fCooldownRemaining );
	void AppendPawnCapabilitiesToList ( unsigned char nCapType, TArray<class UBioCapability*>* oOutCaps );
	void RecomputeCapabilities ( );
	bool IsAbilityEnabledCombatTransition ( );
	bool IsAbilityEnabledPowers ( );
	bool IsAbilityEnabledGrenades ( );
	bool IsAbilityEnabledWeapons ( );
	bool IsAbilityEnabledStack ( );
	bool IsAbilityEnabledQueue ( );
	bool IsAbilityEnabledAll ( );
	void DoDisabledEvent ( unsigned char eEnableType, struct SFXName nmSubType );
	void DoEnabledEvent ( unsigned char eEnableType, struct SFXName nmSubType );
	bool IsAbilityEnabled_Power ( unsigned char eEnableType, struct SFXName nmSubType );
	int AbilityEnable_Power ( unsigned long bEnable, unsigned char eEnableType, struct SFXName nmSubType );
	bool IsAbilityEnabled_Offense ( unsigned char eEnableType, struct SFXName nmSubType );
	int AbilityEnable_Offense ( unsigned long bEnable, unsigned char eEnableType, struct SFXName nmSubType );
	bool IsAbilityEnabled_AI ( unsigned char eEnableType, struct SFXName nmSubType );
	int AbilityEnable_AI ( unsigned long bEnable, unsigned char eEnableType, struct SFXName nmSubType );
	void OnWeaponInstantFire ( class ABioWeaponRanged* oFiredWeapon );
	void InitializeActionFramework ( );
	void TickBehavior ( float DeltaTime );
	int GetTargetZoneCount ( );
	bool GetTargetZoneNameN ( int nIndex, struct SFXName* nmTargetZone );
	bool GetTargetZoneLocationN ( int nIndex, struct FVector* vLocation );
	bool IsTargetZoneEnabled ( );
	struct FVector GetTargetZoneLocation ( );
	struct SFXName CanSeeTarget ( float fDeltaTime, struct FVector const& vSourceLocation, class AActor* oTarget, unsigned long bTraverseList, int nOptLevel );
};

// Class SFXGame.BioPawnBehavior
// 0x023E (0x0587 - 0x0349)
class UBioPawnBehavior : public UBioEpicPawnBehavior
{
public:
	TArray<class UAnimSet*>                            m_aBackupAnimSets;                                		// 0x034C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<struct FParticleSystemComponentSpec>        m_aParticleSystemComponentSpec;                   		// 0x035C (0x0010) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	struct FVector                                     m_vFixedRotation;                                 		// 0x036C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vDamageAnimDir;                                 		// 0x0378 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    m_rLastStopRotation;                              		// 0x0384 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    m_rSkidStartRotation;                             		// 0x0390 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    m_rSkidTargetRotation;                            		// 0x039C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FBioPawnBehaviorCache                       m_pawnBehaviorCache;                              		// 0x03A8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class AWeapon*                                     SecondaryWeapon;                                  		// 0x03B4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     CurrentWPSetTag;                                  		// 0x03BC (0x0008) [0x0000000000000000]              
	class ABioWaypointSet*                             CurrentWPSet;                                     		// 0x03C4 (0x0008) [0x0000000000000000]              
	struct SFXName                                     WPRouteTag;                                       		// 0x03CC (0x0008) [0x0000000000000000]              
	class ABioWaypointSet*                             WPRoute;                                          		// 0x03D4 (0x0008) [0x0000000000000000]              
	struct SFXName                                     m_sDeathBoneHit;                                  		// 0x03DC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_oMeshAdjLastBase;                               		// 0x03E4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBio2DA*                                     m_oExperience2DA;                                 		// 0x03EC (0x0008) [0x0000000000000000]              
	class ABioVisualEffect*                            m_pBleedOutVFX;                                   		// 0x03F4 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   m_pBleedOutSoundCue;                              		// 0x03FC (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UBioVFXTemplate*                             m_pBleedOutVFXTemplate;                           		// 0x0404 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct SFXName                                     m_nmBleedOutVFXParameter;                         		// 0x040C (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	class UBioItem*                                    m_pWeapon;                                        		// 0x0414 (0x0008) [0x0000000000000000]              
	class UBioItem*                                    m_pSecondaryWeapon;                               		// 0x041C (0x0008) [0x0000000000000000]              
	class UBioEquipment*                               m_oEquipment;                                     		// 0x0424 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioPawnItemInterface*                       m_oItemInterface;                                 		// 0x042C (0x0008) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	class UBioTalentContainer*                         m_Talents;                                        		// 0x0434 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              m_fPowerUsePercent;                               		// 0x043C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NextWaypoint;                                     		// 0x0440 (0x0004) [0x0000000000000000]              
	float                                              MinSpeedBoost;                                    		// 0x0444 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxSpeedBoost;                                    		// 0x0448 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              PathFindSpeedBoostBonus;                          		// 0x044C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              m_fTurningAngle;                                  		// 0x0450 (0x0004) [0x0000000000000000]              
	float                                              m_fAnimStartTime;                                 		// 0x0454 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMoveStartElapsedTime;                          		// 0x0458 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMoveStopElapsedTime;                           		// 0x045C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fAnimMoveSpeedSnapshot;                         		// 0x0460 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fAnimMoveStartSpeedSnapshot;                    		// 0x0464 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fDamageAnimMag;                                 		// 0x0468 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nNextDamageAnimNode;                            		// 0x046C (0x0004) [0x0000000000000000]              
	float                                              m_fCurPhysSettleDownTime;                         		// 0x0470 (0x0004) [0x0000000000000000]              
	float                                              m_fInclineUpMod;                                  		// 0x0474 (0x0004) [0x0000000000000000]              
	float                                              m_fInclineDownMod;                                		// 0x0478 (0x0004) [0x0000000000000000]              
	float                                              m_fSkidTurnThresh;                                		// 0x047C (0x0004) [0x0000000000000000]              
	float                                              m_fPawnStopDecelTime;                             		// 0x0480 (0x0004) [0x0000000000000000]              
	float                                              m_fDmgArc_Front;                                  		// 0x0484 (0x0004) [0x0000000000000000]              
	float                                              m_fDmgArc_Rear;                                   		// 0x0488 (0x0004) [0x0000000000000000]              
	float                                              m_fDmgPct_Front;                                  		// 0x048C (0x0004) [0x0000000000000000]              
	float                                              m_fDmgPct_Left;                                   		// 0x0490 (0x0004) [0x0000000000000000]              
	float                                              m_fDmgPct_Right;                                  		// 0x0494 (0x0004) [0x0000000000000000]              
	float                                              m_fMeshAdjRate;                                   		// 0x0498 (0x0004) [0x0000000000000000]              
	float                                              m_fManualMeshAdj;                                 		// 0x049C (0x0004) [0x0000000000000000]              
	float                                              MeshAdjSpeed;                                     		// 0x04A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MeshAdjFastSpeed;                                 		// 0x04A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMeshAdjCheckFrequency;                         		// 0x04A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMeshAdjFarCheckFrequency;                      		// 0x04AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMeshAdjFarCheckDistance;                       		// 0x04B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMeshAdjTimeTillCheck;                          		// 0x04B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMeshAdjLastDistFound;                          		// 0x04B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PawnMoveStartTimerThreshold;                      		// 0x04BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PawnMoveStopTimerThreshold;                       		// 0x04C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDesiredMaxSpeed;                               		// 0x04C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCurrentInclineMoveMod;                         		// 0x04C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fTurnRateHigh;                                  		// 0x04CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fTurnRateLow;                                   		// 0x04D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fTurnRateCombat;                                		// 0x04D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fTurnRateCombatCrouch;                          		// 0x04D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fTurnRateCombatSprint;                          		// 0x04DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fStdFriction;                                   		// 0x04E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fAccelRate;                                     		// 0x04E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMaxDesSpdAccelRate;                            		// 0x04E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMaxDesSpdDecelRate;                            		// 0x04EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMaxDesSpdTacAccelRate;                         		// 0x04F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMaxDesSpdTacDecelRate;                         		// 0x04F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMaxDesSpdTacCrouchAccelRate;                   		// 0x04F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMaxDesSpdTacCrouchDecelRate;                   		// 0x04FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fSkidDSDecelRate;                               		// 0x0500 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMoveStopDSDecelRate;                           		// 0x0504 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DBG_Offset;                                       		// 0x0508 (0x0004) [0x0000000000000000]              
	float                                              m_fPawnFallTime;                                  		// 0x050C (0x0004) [0x0000000000000000]              
	float                                              m_fPawnCalcFallTime;                              		// 0x0510 (0x0004) [0x0000000000000000]              
	int                                                m_nXP_Level_Cache;                                		// 0x0514 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nXP_Cache;                                      		// 0x0518 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nBioticSlowMotionHandle;                        		// 0x051C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fToxicHealRatio;                                		// 0x0520 (0x0004) [0x0000000000000000]              
	float                                              m_fToxicDamageMaximumAsPercentageOfHealth;        		// 0x0524 (0x0004) [0x0000000000000000]              
	float                                              m_fDamageStabilityLossFactor;                     		// 0x0528 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              m_fPainSoundDamageThreshold;                      		// 0x052C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nRemainInRagdoll;                               		// 0x0530 (0x0004) [0x0000000000000000]              
	float                                              m_fPhysicsForceIncurred;                          		// 0x0534 (0x0004) [0x0000000000000000]              
	int                                                m_nUnlootableGrenadeCount;                        		// 0x0538 (0x0004) [0x0000000000000000]              
	float                                              m_fTwistThreshold;                                		// 0x053C (0x0004) [0x0000000000000000]              
	float                                              m_fBleedOutSoundTime;                             		// 0x0540 (0x0004) [0x0000000000000000]              
	float                                              m_fBleedOutSoundDuration;                         		// 0x0544 (0x0004) [0x0000000000000000]              
	float                                              m_fBleedOutThreshold;                             		// 0x0548 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              m_fBleedOutMinDamageResistance;                   		// 0x054C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              m_fBleedOutCasualMinDamageResistance;             		// 0x0550 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              m_fBleedOutMinHealthRegenRate;                    		// 0x0554 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              m_fCasualBonusHealthRegenRate;                    		// 0x0558 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              m_fBleedOutSoundDurationStart;                    		// 0x055C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              m_fBleedOutSoundDurationEnd;                      		// 0x0560 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              m_fBleedOutSoundVolumeStart;                      		// 0x0564 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              m_fBleedOutSoundVolumeEnd;                        		// 0x0568 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              m_fDeathCapabilityActivationTime;                 		// 0x056C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                m_nMountStrref;                                   		// 0x0570 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              m_fVehicleExpScaleFactor;                         		// 0x0574 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bEnsureXModIntegrity : 1;                       		// 0x0578 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      m_bPowerUsePercentOverride : 1;                   		// 0x0578 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCountingUp : 1;                                  		// 0x0578 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      CustomAnimation : 1;                              		// 0x0578 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bReadyForCombat : 1;                            		// 0x0578 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bPlayDamageAnim : 1;                            		// 0x0578 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bPlayDieAnimation : 1;                          		// 0x0578 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bInMatinee : 1;                                 		// 0x0578 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      m_bEnableStartAnim : 1;                           		// 0x0578 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      m_bEnableSkidAnim : 1;                            		// 0x0578 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      m_bEnableStopAnim : 1;                            		// 0x0578 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      m_bAllowStartAnimInCombat : 1;                    		// 0x0578 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      m_bAllowSkidAnimInCombat : 1;                     		// 0x0578 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      m_bAllowStopAnimInCombat : 1;                     		// 0x0578 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      m_bMeshAdjOn : 1;                                 		// 0x0578 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      m_bUseManualMeshAdj : 1;                          		// 0x0578 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      m_bDoneYawInterpolation : 1;                      		// 0x0578 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      m_bDoneSpeedInterpolation : 1;                    		// 0x0578 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      m_bCanBePhysicsImpacted : 1;                      		// 0x0578 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      m_bCanBePhysicsImpactedOverride : 1;              		// 0x0578 (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      m_bPawnFallTimeOk : 1;                            		// 0x0578 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      m_bEnableLeaning : 1;                             		// 0x0578 (0x0004) [0x0000000000004000] [0x00200000] ( CPF_Config )
	unsigned long                                      m_bArmorOverridden : 1;                           		// 0x0578 (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      m_bShouldGrantExperienceOnKillOverride : 1;       		// 0x0578 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      m_bShouldGrantExperienceOnKill : 1;               		// 0x0578 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      m_bHasWeaponFiredSinceLastBioAnimNodeBlendByFireSequenceQuery : 1;		// 0x0578 (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )
	unsigned long                                      m_bIsFeigningDeath : 1;                           		// 0x0578 (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      m_bCanUseDeathCapabilities : 1;                   		// 0x0578 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      m_bAllowPhysicsOnDeadBodies : 1;                  		// 0x0578 (0x0004) [0x0000000000004000] [0x10000000] ( CPF_Config )
	unsigned long                                      m_bIsBleedingOut : 1;                             		// 0x0578 (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      m_bIsBleedOutEnabled : 1;                         		// 0x0578 (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned char                                      m_eCombatState;                                   		// 0x057C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      WalkType;                                         		// 0x057D (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eTurningDirection;                              		// 0x057E (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eAnimStartState;                                		// 0x057F (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_eAnimSkidState;                                 		// 0x0580 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_eAnimStopState;                                 		// 0x0581 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_eGetUpState;                                    		// 0x0582 (0x0001) [0x0000000000000000]              
	unsigned char                                      DBG_Color_R;                                      		// 0x0583 (0x0001) [0x0000000000000000]              
	unsigned char                                      DBG_Color_G;                                      		// 0x0584 (0x0001) [0x0000000000000000]              
	unsigned char                                      DBG_Color_B;                                      		// 0x0585 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_LootGUIMechanism;                               		// 0x0586 (0x0001) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetPlayerMeleeTime ( float MeleeTime );
	float GetPlayerMeleeTime ( );
	class UBioActive* CancelActive ( );
	bool IsBleedingOut ( );
	bool IsBleedOutEnabled ( );
	void UpdateBleedOut ( );
	bool HasPowersOfType ( unsigned char eDiscipline );
	bool IsOfPowerRace ( unsigned char eRace );
	float GetPowerUsePercent ( );
	float GetBleedOutThreshold ( );
	bool IsAbleToInstigate ( );
	bool GetCanBePhysicsImpacted ( );
	float GetHealthRegenRate ( );
	float GetDamageResistance ( );
	void RecoverFromBleedOut ( );
	void EnableBleedOut ( unsigned long B );
	void ForceAppearanceUpdate ( );
	unsigned char SetActionState ( unsigned char eState, float fDelay );
	void SetTwistThreshold ( float F );
	float GetTwistThreshold ( );
	class UBioItemWeaponRanged* GetCurrentWeaponItem ( );
	int GetUnlootableGrenadeCountSaveGames ( );
	void SetUnlootableGrenadeCountSaveGames ( int N );
	int GetUnlootableGrenadeCount ( );
	void ModifyUnlootableGrenadeCount ( int N );
	bool UseDeathCapability ( );
	void FeignDeathKismet ( unsigned long B );
	void eventFeignDeath ( unsigned long B, unsigned long bForceState );
	void eventMoveWeaponToSocket ( struct SFXName nmSocket );
	void eventOnShieldsDown ( );
	bool TermRagdoll ( );
	bool InitRagdoll ( );
	class UClass* GetSaveObjectClass ( );
	float CacheGetWeaponDriftAngle ( );
	float CacheGetWeaponDriftZoneRadius ( );
	class UBioInventory* GetInventory ( );
	int GetCharmSkill ( );
	int GetIntimidateSkill ( );
	bool CanBeShot ( class UBioActorBehavior* pOther );
	class UBioItem* CreateAndEquipEquipment ( int nEquipmentId, int nSophistication, int nManufacturerID, class UObject* InExistingObject );
	void TickTalents ( float fDeltaTime );
	void eventActivateNextWeapon ( );
	void ProcessMeshAdj ( float fDeltaTime );
	bool InPlayerParty ( );
	bool GetBioticAmpEquipped ( );
	void SetClass ( unsigned char nValue );
	unsigned char GetClass ( );
	void AdjustGrenades ( int nAmt );
	int eventGetGrenades ( );
	void eventAdjustMediGel ( float fAmt );
	float eventGetMediGel ( );
	void AdjustCredits ( int nAmt );
	int GetCredits ( );
	int GetXPLevel ( );
	void GiveXP ( int nAmt );
	int GetXP ( );
	void SetGender ( unsigned char nValue );
	unsigned char GetGender ( );
	void AdvanceTalkToCount ( int nAmt );
	void SetTalkToCount ( int nValue );
	int GetTalkToCount ( );
	unsigned char GetMarshalRank ( );
	void SetBackground_Notoritey ( unsigned char nValue );
	unsigned char GetBackground_Notoritey ( );
	void SetBackground_Childhood ( unsigned char nValue );
	unsigned char GetBackground_Childhood ( );
	void eventOnBioticExitMode ( );
	void eventOnBioticSwitchTarget ( );
	void eventOnBioticRelease ( );
	void eventOnBioticLock ( );
	void eventOnBioticEnterMode ( );
	void EndSlowMotion ( );
	void eventOnDeathAnimationFinished ( );
	void GrantSimpleDeathXP ( );
	bool CanPlayDeathAnimation ( );
	void LootCorpse ( class ABioWorldInfo* BioWorldInfo );
	void ReactToDeath ( float Damage, float fDeathDamage, class AController* InstigatedBy, struct FVector const& HitLocation, struct FVector const& Momentum, class UClass* DamageType, struct FTraceHitInfo const& HitInfo, class UBioDamageType* pDamage );
	void CacheDeathVFXGameState ( float fDamage, float fDeathDamage, class AController* pInstigatorController, struct FVector const& vHitLocation, struct FVector const& vMomentum, class UBioDamageType* pDamage );
	void PlayDamageSound ( float fDamage );
	void PlayDamageAnim ( float fDamage, struct FVector* vMomentum );
	void AddImpulse ( struct FVector* vMomentum, struct FVector* vHitLocation );
	void AmplifyDamage ( float* Damage );
	void ProxyTakeDamage ( float OriginalDamage, class AController* InstigatedBy, struct FVector const& HitLocation, class UClass* DamageType, struct FTraceHitInfo const& HitInfo, class AActor* pDamageCausingActor, class UBioDamageType* pDamage, float* CurrentDamage, struct FVector* Momentum );
	int eventComputeLevel ( );
	void AddToInitialSquad ( );
	void eventInitializeRunTimeOnlyTransients ( );
	void AddWeapon ( FString const& sItemLabel, unsigned char sophistication );
	void eventStopParticleSystem ( unsigned char ePawnParticleSystem );
	void eventStartParticleSystem ( unsigned char ePawnParticleSystem );
	void eventInitializeParticleSystem ( unsigned char ePawnParticleSystem, class ABioPawn* oInstigator );
	void eventBeginPlay ( );
	void ForceArmorOverride ( unsigned long B );
	bool IsArmorOverridden ( );
	void PostBeginPlay ( );
	void InitializePawnBehaviorForPlay ( );
	void eventBioRelateActors ( );
	void SoftResetMovementAndAnimationState ( );
	void HardResetActionAndAnimationState ( );
	void ScaleSecondaryAttributes ( int rankedChallengeLevel );
	void OnPhysicsImpulse ( class UMeshComponent* oMesh, unsigned long bIsForce, struct FVector* Impulse, struct FVector* Position, struct SFXName* BoneName );
	void RanOverByVehicle ( class ABioVehicleBase* oVehicle );
	void Heal ( float fHealthPoints, float fToxicDamageHealed, float fResourcesRequired );
	int GetPawnSurface ( );
	bool ShouldGrantExperienceOnKill ( );
	bool IsInCover ( );
	struct FVector GetSelectionObstructionSource ( );
	bool GetPlayerSelectable ( class ABioPlayerController* pPlayerController, unsigned char ePlayerState );
	void OnTargetInvalidated ( class AActor* CurrentSelection );
	bool OnNewPlayerPawnSelection ( class AActor* Selection, class UBioPlayerSelection* pPlayerSelection );
	void AttemptDynamicChallengeScale ( );
	void TickBehavior ( float DeltaTime );
	void AppendPawnCapabilitiesToList ( unsigned char nCapType, TArray<class UBioCapability*>* oOutCaps );
	void RecomputeCapabilities ( );
	void GenerateOnCastAt ( class UBioActorBehavior* oAttacker, struct SFXName* nPower );
	void GenerateOnAttacked ( class UBioActorBehavior* oAttacker, struct SFXName* nWeapon );
	void AdjustStability ( float fStability );
	class UBioAttributesItem* GetWeaponAttributes ( class USkeletalMeshComponent* meshOfWeapon );
	void FindFirstValidSecondaryAttribute ( class UBio2DA* table, int nRankedLevel, struct SFXName ColumnName, unsigned char modType, class UBioGameProperty* oGameProperty );
	bool FindFirstValidPrimaryAttribute ( class UBio2DA* table, int nRankedLevel, struct SFXName ColumnName, int* nValue );
	bool CanBeMounted ( class APawn* oMounter );
	class UBioActive* AcquireActive ( class UClass* clsActive, unsigned long bAutoStartActive );
	void InitializeActionFramework ( );
	void PlaySound ( unsigned char ePawnSound, unsigned char eMode );
};

// Class SFXGame.BioVehicleBehaviorBase
// 0x0097 (0x03E0 - 0x0349)
class UBioVehicleBehaviorBase : public UBioEpicPawnBehavior
{
public:
	TArray<struct FBioVehicleWeaponInfo>               m_aVehicleWeaponInfo;                             		// 0x034C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<class ABioVisualEffect*>                    m_aThrusterVisualEffects;                         		// 0x035C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     m_vRecoilImpulseAccumulator;                      		// 0x036C (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vForceExitLocation;                             		// 0x0378 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vPauseVelocity;                                 		// 0x0384 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class ABioBaseSquad*                               m_oDriverSquad;                                   		// 0x0390 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioBaseSquad*                               m_oVehicleDefaultSquad;                           		// 0x0398 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioVisualEffect*                            m_oDamageVisualEffect;                            		// 0x03A0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USoundCue*                                   m_pLowShieldSoundCue;                             		// 0x03A8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UBioShieldView*                              m_pShieldView;                                    		// 0x03B0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UBioEquipmentVehicle*                        m_oEquipment;                                     		// 0x03B8 (0x0008) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	float                                              m_fPreviousStopThreshold;                         		// 0x03C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fTimeSinceLastAINoiseUpdate;                    		// 0x03C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fAINoiseUpdatePeriod;                           		// 0x03C8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                m_nLastDriverXPLevel;                             		// 0x03CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCurrentZoomTurret;                             		// 0x03D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPainSoundDamageThreshold;                      		// 0x03D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fLowShieldThreshold;                            		// 0x03D8 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	unsigned long                                      m_bWeaponsEnabled : 1;                            		// 0x03DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bIncludeDriverSquad : 1;                        		// 0x03DC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bUpRightEnabled : 1;                            		// 0x03DC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bPowertrainEnabled : 1;                         		// 0x03DC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bVehicleFunctionEnabled : 1;                    		// 0x03DC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bVehicleAudioEnable : 1;                        		// 0x03DC (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      m_bBrakesEnabled : 1;                             		// 0x03DC (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bInheritsPlayerStats : 1;                       		// 0x03DC (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      m_bIsPaused : 1;                                  		// 0x03DC (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      m_bIsLowShield : 1;                               		// 0x03DC (0x0004) [0x0000000000000000] [0x00000200] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UClass* GetSaveObjectClass ( );
	void ReactToDeath ( float fDamage, float fDeathDamage, class AController* pInstigatedBy, struct FVector const& vHitLocation, struct FVector const& vMomentum, class UClass* clsDamageType, struct FTraceHitInfo const& HitInfo, class UBioDamageType* pDamage );
	bool eventStartUprighting ( );
	void eventOnShieldsDown ( );
	void PlayDamageSound ( float fDamage );
	void ProxyTakeDamage ( float OriginalDamage, class AController* InstigatedBy, struct FVector const& HitLocation, class UClass* DamageType, struct FTraceHitInfo const& HitInfo, class AActor* pDamageCausingActor, class UBioDamageType* pDamage, float* CurrentDamage, struct FVector* Momentum );
	void eventBeginPlay ( );
	void eventInitializeRunTimeOnlyTransients ( );
	void StopLowShieldAlert ( );
	void SetMaterialParameterState ( unsigned long bState );
	bool OnVehiclePause ( unsigned long bPaused );
	bool UnEquipShields ( );
	bool EquipShields ( class UBioItem* oNewItem );
	bool ScaleVehicleEquipment ( );
	int GetRequiredEquipmentSophisticationLevel ( int nCurrentPlayerLevel );
	bool EquipDefaults ( class UBioEquipmentVehicle* oEquipment );
	void Heal ( float fHealthPoints, float fToxicDamageHealed, float fResourcesRequired );
	bool UpdateDamageModel ( );
	bool GetPlayerSelectable ( class ABioPlayerController* pPlayerController, unsigned char ePlayerState );
	void OnTargetInvalidated ( class AActor* CurrentSelection );
	bool OnNewPlayerPawnSelection ( class AActor* Selection, class UBioPlayerSelection* pPlayerSelection );
	bool InitializeSounds ( );
	void DeactivateThruster ( int nIndex );
	void ActivateThruster ( int nIndex );
	bool InitializeThrusters ( );
	void InitializeVehicleSquad ( );
	void SquadExit ( );
	void SquadEnter ( class ABioBaseSquad* oEnterSquad );
	void OnDriverPartyDeath ( );
	bool UpdateCurrentZoomTurret ( float fDeltaYaw, float fDeltaPitch );
	bool ExitZoomMode ( );
	bool EnterZoomMode ( int nZoomTurretIndex );
	bool IsWorldLocationWithinTurretCone ( int nTurretIndex, struct FVector const& vLocation );
	bool IsWeaponAimWithinTurretCone ( class ABioWeaponRanged* oWeapon );
	struct FRotator SetDesiredTurretAimPoint ( int nTurretIndex, struct FVector const& vTargetLocation );
	int GetWeaponIndex ( class ABioWeapon* oWeapon );
	class ABioWeapon* GetWeaponAtIndex ( int nIndex );
	bool DetachAndDestroyWeapon ( class ABioWeapon* oWeapon );
	bool CreateAndAttachWeapon ( class UClass* oWeaponClass, class UBioItemWeapon* oWeaponItem, int nTurretIndex, struct FBioVehicleWeaponInfo* oWeaponInfo );
	bool InitializeVehicleWeapons ( );
	bool InitializeVehicle ( );
	bool OnVehicleExit ( );
	bool OnVehicleEnter ( );
	void SetBrakeState ( unsigned long bStatus );
	void SetVehicleFunctionState ( unsigned long bStatus );
	void SetPowertrainState ( unsigned long bStatus );
	bool CanBeShot ( class UBioActorBehavior* pOther );
	bool SetSuperMode ( unsigned char nSuperMode, unsigned long bActivate, unsigned long bReturnToSuperMode );
	bool ReleaseActive ( );
	void InitializePawnBehaviorForPlay ( );
	void InitializeActionFramework ( );
};

// Class SFXGame.BioVehicleBehaviorWheeled
// 0x0008 (0x03E8 - 0x03E0)
class UBioVehicleBehaviorWheeled : public UBioVehicleBehaviorBase
{
public:
	int                                                m_nVehicleCannon;                                 		// 0x03E0 (0x0004) [0x0000000000000000]              
	int                                                m_nVehicleMachineGun;                             		// 0x03E4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventInitializeRunTimeOnlyTransients ( );
	void OnWeaponInstantFire ( class ABioWeaponRanged* oFiredWeapon );
	void InitializeActionFramework ( );
	bool UnEquipMachineGun ( );
	bool UnEquipCannon ( );
	bool EquipMachineGun ( class UBioItem* oNewItem );
	bool EquipCannon ( class UBioItem* oNewItem );
	bool EquipDefaults ( class UBioEquipmentVehicle* oEquipment );
	bool InitializeVehicle ( );
};

// Class SFXGame.BioPawnSquadInterface
// 0x0000 (0x006C - 0x006C)
class UBioPawnSquadInterface : public UBioBaseComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class APawn* FindSquadMemberByTag ( struct SFXName nmTag );
	int FindSquadIndex ( );
	void eventChangeSquads ( class ABioBaseSquad* NewSquad );
	void ChangeToPlayerSquad ( FString const& sClass, struct SFXName aSquadName );
	void ChangeToDefaultSquad ( );
	void PawnDestroyed ( );
	void LeaveSquad ( );
	void eventJoinSquad ( class ABioBaseSquad* NewSquad );
};

// Class SFXGame.BioSFHandler_AdditionalContent
// 0x0003 (0x009C - 0x0099)
class UBioSFHandler_AdditionalContent : public UBioSFHandler
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSFHandler_AreaMap
// 0x005F (0x00F8 - 0x0099)
class UBioSFHandler_AreaMap : public UBioSFHandler
{
public:
	struct FBox                                        m_levelBox;                                       		// 0x009C (0x001C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vLeftInput;                                     		// 0x00B8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vRightInput;                                    		// 0x00C4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_sMapName;                                       		// 0x00D0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBio2DA*                                     m_pAreaMapTable;                                  		// 0x00D8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fScrollSpeed;                                   		// 0x00E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fCursorSpeed;                                   		// 0x00E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nLeftScrollDelta;                               		// 0x00E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nRightScrollDelta;                              		// 0x00EC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCurrentZoom;                                   		// 0x00F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bWaitingForMsgBox : 1;                          		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void RTNConfirm ( unsigned long bAPressed, int nContext );
};

// Class SFXGame.BioSFHandler_PCAreaMap
// 0x0000 (0x00F8 - 0x00F8)
class UBioSFHandler_PCAreaMap : public UBioSFHandler_AreaMap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
};

// Class SFXGame.BioSFHandler_BrowserWheel
// 0x00F5 (0x018E - 0x0099)
class UBioSFHandler_BrowserWheel : public UBioSFHandler
{
public:
	TArray<unsigned char>                              lstEquipSlotOrderInventory;                       		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<unsigned char>                              lstEquipSlotOrderXMods;                           		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBWPageStruct                               lstPages[ 0x8 ];                                  		// 0x00BC (0x00A0) [0x0000000000004000]              ( CPF_Config )
	struct FVector                                     vInput;                                           		// 0x015C (0x000C) [0x0000000000000000]              
	class UBio2DA*                                     m_TipText2DA;                                     		// 0x0168 (0x0008) [0x0000000000000000]              
	struct SFXName                                     m_nmTipStringRef;                                 		// 0x0170 (0x0008) [0x0000000000000000]              
	class UBioSFHandler_XMods*                         oXModsHandler;                                    		// 0x0178 (0x0008) [0x0000000000000000]              
	float                                              fLastRadius;                                      		// 0x0180 (0x0004) [0x0000000000000000]              
	float                                              m_fTipTextTimeout;                                		// 0x0184 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fTipTextTimeRemaining;                          		// 0x0188 (0x0004) [0x0000000000000000]              
	unsigned char                                      nLastSubPage;                                     		// 0x018C (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eCachedEquipSlot;                               		// 0x018D (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ExitToMainMenu ( );
	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void OnPanelRemoved ( );
	void OnPanelAdded ( );
	void eventUpdateGUILayout ( );
	void InitializeBrowser ( );
	void DetermineJournalCodexUpdateStatus ( );
	void DetermineSquadUpdateStatus ( );
	void Update ( float fDeltaT );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void ExitConfirm ( unsigned long bAPressed, int nContext, unsigned long bYPressed );
	void MainMenuConfirm ( unsigned long bAPressed, int nContext, unsigned long bYPressed );
	void HandleEvent ( unsigned char nCommand, TArray<FString>* lstArguments );
	void UpdateCachedItemCategory ( class UBioSFPanel* oLastPanel );
	void eventShowSelectedPanel ( int nPanel, class UBioSFManager* oManager );
};

// Class SFXGame.BioSFHandler_Credits
// 0x0037 (0x00D0 - 0x0099)
class UBioSFHandler_Credits : public UBioSFHandler
{
public:
	TArray<struct FBioCreditsDetails>                  lstFlashingCredits;                               		// 0x009C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<struct FBioCreditsDetails>                  lstScrollingCredits;                              		// 0x00AC (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	float                                              fFadeTime;                                        		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fHoldTime;                                        		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fScrollTime;                                      		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                nCreditIndex;                                     		// 0x00C8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bFromMainMenu : 1;                                		// 0x00CC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bFromAdditionalContent : 1;                       		// 0x00CC (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnPanelRemoved ( );
	void eventSetFromAdditionalContent ( );
	void SetFromMainMenu ( );
	void PopulateScrollingCredits ( );
	void SendFlashingCredit ( );
	void SetupCreditDetails ( );
	void HandleEvent ( unsigned char nCommand, TArray<FString>* lstArguments );
	bool SetDataFromIniFile ( FString const& m_sFileName );
};

// Class SFXGame.BioSFHandler_DataCodex
// 0x003B (0x00D4 - 0x0099)
class UBioSFHandler_DataCodex : public UBioSFHandler
{
public:
	FString                                            sDefaultCodexImage;                               		// 0x009C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UAudioComponent*                             m_oVoiceOver;                                     		// 0x00AC (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBio2DA*                                     m_pCodexImages2DA;                                		// 0x00B4 (0x0008) [0x0000000000000000]              
	float                                              m_fScrollValue;                                   		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                m_nVoiceOverPage;                                 		// 0x00C0 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeUntilVoiceOver;                            		// 0x00C4 (0x0004) [0x0000000000000000]              
	float                                              fVoiceOverDelay;                                  		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fVoiceOverCancelFadeOut;                          		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bFromMainMenu : 1;                                		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void eventGoBackToMainMenu ( );
	void SetFromMainMenu ( );
};

// Class SFXGame.BioSFHandler_InGameManual
// 0x0000 (0x00D4 - 0x00D4)
class UBioSFHandler_InGameManual : public UBioSFHandler_DataCodex
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSFHandler_DesignerUI
// 0x009F (0x0138 - 0x0099)
class UBioSFHandler_DesignerUI : public UBioSFHandler
{
public:
	TArray<struct FBioDUIPulseDetails>                 lstPulsingElements;                               		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBioDUIElementStatus                        lstElementStatus[ 0x16 ];                         		// 0x00AC (0x0058) [0x0000000000000000]              
	struct FBioDUITimerDetails                         stModalTimer;                                     		// 0x0104 (0x0014) [0x0000000000000000]              
	struct FBioDUITimerDetails                         stPassiveTimer;                                   		// 0x0118 (0x0014) [0x0000000000000000]              
	int                                                nElementVisibleCount;                             		// 0x012C (0x0004) [0x0000000000000000]              
	int                                                m_nLayout;                                        		// 0x0130 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bCanInvoke : 1;                                 		// 0x0134 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventEnableCameraMovement ( );
	void eventDisableCameraMovement ( );
	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void PressedButtonAS ( int btnIndex );
	void MiniGameInput ( int nOutputLink );
	void OnPanelAdded ( );
	float GetTimerValue ( unsigned long bModalTimer );
	void SetTimerDetails ( unsigned long bModalTimer, float fStartTime, float fEndTime, float fInterval );
	void CheckLayout ( unsigned long bShow );
	bool IsToxinCureLayout ( );
	void SetToxinCureLayout ( unsigned long bShow );
	bool IsMiraHanoiLayout ( );
	void SetMiraHanoiLayout ( unsigned long bShow );
	bool IsLaserLayout ( );
	void SetLaserCircle ( int CircleState );
	void SetLaserLayout ( unsigned long bShow );
	bool IsQuasarLayout ( );
	void SetQuasarLayout ( unsigned long bShow );
	void SetBarFillDirection ( unsigned long bModalBar, unsigned long bLeftToRight );
	void SetBarFillPercent ( unsigned long bModalBar, int nPercent );
	void SetBarMarkerPoints ( unsigned long bModalBar, int nMarker1, int nMarker2 );
	void SetCounterValue ( unsigned long bModalCounter, int nValue );
	void SetElementText ( unsigned char nElement, FString* sText );
	void SetTextStringRef ( unsigned char nElement, int srText );
	void ClearElementPulse ( unsigned char nElement );
	int SetupElementPulse ( unsigned char nElement, float fMinAlpha, float fCycleTime );
	void SetElementAlpha ( unsigned char nElement, float fAlpha );
	void SetElementColor ( unsigned char nElement, struct FColor* stColor );
	void SetElementVisible ( unsigned char nElement, unsigned long bVisible, float fFadeTime );
	bool IsActive ( unsigned long bModal );
	void ClearAll ( unsigned long bModal );
};

// Class SFXGame.BioSFHandler_DeviceSelection
// 0x0027 (0x00C0 - 0x0099)
class UBioSFHandler_DeviceSelection : public UBioSFHandler
{
public:
	struct FScriptDelegate                             __CompletionCallback__Delegate;                   		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __CancelCallback__Delegate;                       		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bDeviceSelectionVisible : 1;                    		// 0x00BC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bIsSaveGame : 1;                                		// 0x00BC (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetCancelDelegateEx ( struct SFXName nmFunction, class UObject* pTarget );
	void SetCancelDelegate ( struct FScriptDelegate pDelegate );
	void SetCompletionDelegateEx ( struct SFXName nmFunction, class UObject* pTarget );
	void SetCompletionDelegate ( struct FScriptDelegate pDelegate );
	void DisplayDeviceSelection ( unsigned char LocalUserNum, int SizeNeeded, unsigned long bForceShowUI );
	void CancelCallback ( int i_dwDeviceSelectionId );
	void CompletionCallback ( int i_dwDeviceSelectionId );
};

// Class SFXGame.BioSFHandler_GalaxyMap
// 0x0023 (0x00BC - 0x0099)
class UBioSFHandler_GalaxyMap : public UBioSFHandler
{
public:
	class UBio2DA*                                     m_pGalaxyMapImages2DA;                            		// 0x009C (0x0008) [0x0000000000000000]              
	float                                              m_fScrollValue;                                   		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              m_fCursorDeltaX;                                  		// 0x00A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCursorDeltaY;                                  		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLeftStickX;                                    		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLeftStickY;                                    		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bClosingPlanet : 1;                             		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bWaitingForMsgBox : 1;                          		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bInPlanetPanel : 1;                             		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void TravelConfirm ( unsigned long bAPressed, int nContext );
	void eventHandleButtonRefresh ( unsigned long usingGamepad );
};

// Class SFXGame.BioSFHandler_GameOver
// 0x0007 (0x00A0 - 0x0099)
class UBioSFHandler_GameOver : public UBioSFHandler
{
public:
	int                                                m_srGameOverString;                               		// 0x009C (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void Update ( float fDeltaT );
	void OnPanelAdded ( );
	void GotoMainMenu ( );
	void SetupGameOver ( );
	void HandleEvent ( unsigned char nCommand, TArray<FString>* lstArguments );
};

// Class SFXGame.BioSFHandler_HUD
// 0x00B8 (0x0151 - 0x0099)
class UBioSFHandler_HUD : public UBioSFHandler
{
public:
	TArray<struct FCustomMappingDisplayInfo>           m_lstMappedPowers;                                		// 0x009C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<int>                                        m_lstMappablePowersPawn0;                         		// 0x00AC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<int>                                        m_lstMappablePowersPawn1;                         		// 0x00BC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<int>                                        m_lstMappablePowersPawn2;                         		// 0x00CC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     vInput;                                           		// 0x00DC (0x000C) [0x0000000000000000]              
	class ABioPlayerSquad*                             m_oPlayerSquad;                                   		// 0x00E8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioPawn*                                    m_oCommandTarget;                                 		// 0x00F0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nShieldPointsPerBar;                            		// 0x00F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srMeters;                                         		// 0x00FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srGrenadePowerTitle;                              		// 0x0100 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srSwitching;                                      		// 0x0104 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srIncapacitated;                                  		// 0x0108 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nShepardIndex;                                  		// 0x010C (0x0004) [0x0000000000000000]              
	int                                                m_nHench1Index;                                   		// 0x0110 (0x0004) [0x0000000000000000]              
	int                                                m_nHench2Index;                                   		// 0x0114 (0x0004) [0x0000000000000000]              
	int                                                m_nCommandTargetIndex;                            		// 0x0118 (0x0004) [0x0000000000000000]              
	int                                                m_nSquadPopulation;                               		// 0x011C (0x0004) [0x0000000000000000]              
	int                                                m_nMappablePowers;                                		// 0x0120 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nSelectedPowerWheelIndex;                       		// 0x0124 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPowerWheelMode;                                		// 0x0128 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              fRadius;                                          		// 0x012C (0x0004) [0x0000000000000000]              
	float                                              fLastRadius;                                      		// 0x0130 (0x0004) [0x0000000000000000]              
	int                                                nAngle;                                           		// 0x0134 (0x0004) [0x0000000000000000]              
	int                                                nLastAngle;                                       		// 0x0138 (0x0004) [0x0000000000000000]              
	int                                                m_ObjectNameColourR;                              		// 0x013C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_ObjectNameColourB;                              		// 0x0140 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_ObjectNameColourG;                              		// 0x0144 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_ObjectNameAlpha;                                		// 0x0148 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bVehicleWidgetOn : 1;                           		// 0x014C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bSquadWidgetOn : 1;                             		// 0x014C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bWasHUDSwapped : 1;                             		// 0x014C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bWasHUDInitialized : 1;                         		// 0x014C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bDisplayingMapBounds : 1;                       		// 0x014C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bForceRadarUpdate : 1;                          		// 0x014C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned char                                      m_ePowerWheelMode;                                		// 0x0150 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnPanelAdded ( );
	class UGFxValue* GetVariableObject ( FString const& Path, class UClass* Type );
	void UpdateStormWidget ( class UBioPlayerInput* oPlayerInput, class ABioPlayerController* oCtrl );
	void UpdateXPTotalWidget ( int nDelta, int nNewTotal );
	void UpdateIconDumpWidget ( class UBioEventNotifier* oEventNotifier );
	int DerivePowerBarPercentage ( unsigned char eBehaviorType, class UBioPower* oPower );
	unsigned char DeriveComplexPowerBehaviorType ( class UBioPower* oPower );
	void UpdateCustomMappingWidget ( unsigned char eMapSlot, class ABioPlayerController* oPlayerCtrl, class ABioPawn* oTarget );
	void UpdateAllCustomMappingWidgets ( class UBioPlayerInput* pPlayerInput, class ABioPlayerController* oPlayerCtrl, class ABioPawn* oTarget );
	void PopulateCommandsFromPawn ( class ABioPawn* oPlayer, int nPawnIndex );
	void PopulatePowersFromPawn ( class ABioPawn* oPlayer, int nPawnIndex );
	void PopulatePowerFromPawn ( class ABioPawn* oPlayer, int nPawnIndex, int nPowerIndex );
	void PopulateArmorEmitterPower ( class ABioPawn* oPlayer, int nPawnIndex );
	void PopulateWeaponAltPower ( class ABioPawn* oPlayer, int nPawnIndex );
	void PopulateHealPower ( class ABioPawn* oPlayer, int nPawnIndex );
	void PopulateGrenadePower ( class ABioPawn* oPlayer, int nPawnIndex );
	void SetPowerPadMode ( unsigned char eMode );
	void UpdateMinimapWidget ( );
	void SetSquadStatusWidgetInvisible ( );
	void SetSquadStatusWidgetVisible ( );
	int DeriveNameIconRef ( int nSourceRef );
	void UpdateSquadFormationWidget ( );
	unsigned char GetHenchmanFormation ( int nSquadIndex );
	void UpdateSquadStatusWidgets ( );
	void SiftPlayerSquad ( );
	void SetVehicleStatusWidgetVisible ( );
	void UpdateVehicleStatusWidget ( class ABioVehicleBase* oVehicle );
	void UpdateCurrentWeaponWidget ( int nWeaponSlot, class ABioWeaponRanged* oRangedWeapon, unsigned long bUsageSituationAmenable );
	void UpdateWeaponSwitchWidget ( class ABioPawn* oPawn, int nPawnIndex );
	int DeriveSlotFromWeapon ( unsigned char eWeapon );
	void HideTargetStatusWidget ( );
	void UpdateTargetStatusWidget ( class AActor* pTarget, class APawn* pPlayer, unsigned long bIsTargetCombattant, unsigned long bPlayerInVehicle );
	void UpdateHUDModes ( class ABioPlayerController* PC, int EActionState );
	void PreReleaseHUD ( );
	void InitializeEverything ( );
	void assignKeyMaps ( );
	void assignHotKeys ( );
	int getSquadUniqueIndex ( int HUDMemberIndex );
	void doHotKey ( int Index );
	void AStoLog ( FString const& msg );
	void HandleEvent ( unsigned char nCommand, TArray<FString>* lstArguments );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void ToggleKeyMap ( );
};

// Class SFXGame.BioSFHandler_PCHUD
// 0x0003 (0x0154 - 0x0151)
class UBioSFHandler_PCHUD : public UBioSFHandler_HUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void HandleEvent ( unsigned char nCommand, TArray<FString>* lstArguments );
	void Update ( float fDeltaT );
	void InitializeEverything ( );
};

// Class SFXGame.BioSFHandler_Journal
// 0x002F (0x00C8 - 0x0099)
class UBioSFHandler_Journal : public UBioSFHandler
{
public:
	TArray<struct FGuiQuestInfo>                       lstQuests;                                        		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                lstSortLabels[ 0x3 ];                             		// 0x00AC (0x000C) [0x0000000000004000]              ( CPF_Config )
	int                                                lstSortTitles[ 0x3 ];                             		// 0x00B8 (0x000C) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fRScrollValue;                                  		// 0x00C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void Update ( float fDeltaT );
	void HandleInputEvent ( unsigned char Event, float fValue );
};

// Class SFXGame.BioSFHandler_Keyboard
// 0x0037 (0x00D0 - 0x0099)
class UBioSFHandler_Keyboard : public UBioSFHandler
{
public:
	FString                                            sTitle;                                           		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            sDescription;                                     		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            sInputValue;                                      		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bKeyboardVisible : 1;                             		// 0x00CC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bKeyboardEntrySucceeded : 1;                      		// 0x00CC (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DisplayKeyboard ( int srTitle, int srDescription, unsigned char nOptions, int nMaxLength, FString const& sDefault );
};

// Class SFXGame.BioSFHandler_Loot
// 0x004F (0x00E8 - 0x0099)
class UBioSFHandler_Loot : public UBioSFHandler
{
public:
	class UBioInventory*                               m_oLootInventory;                                 		// 0x009C (0x0008) [0x0000000000000000]              
	class UBioInventoryGuiInterface*                   m_oInvInterface;                                  		// 0x00A4 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioSFHandler_Inventory*                     m_oInventoryGuiHandler;                           		// 0x00AC (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                m_nSelectedItemIndex;                             		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                m_nShiftItemIndex;                                		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                srEmpty;                                          		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srXModToInventorySalvageMsg;                      		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srXModToInventoryConfirm;                         		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srSalvageItemMsg;                                 		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srSalvageItemConfirm;                             		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srSalvageItemLootThresholdConfirm;                		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srSalvageItemCancel;                              		// 0x00D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srInventoryFullWarning;                           		// 0x00D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srInventoryFullMessage;                           		// 0x00DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fWarnMessageDispTime;                             		// 0x00E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bCreatedFromInventory : 1;                      		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bVerifyingSalvage : 1;                            		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void DisplayLootMaxed ( int i_nNumberToSlavage, int i_nMaxItems );
	void DisplayLootLimitWarning ( int i_nCurrentInventoryNum, int i_nMaxItems );
	void DetermineLootConstraints ( );
	void GameSessionEnded ( );
	void eventOnPanelRemoved ( );
	void eventOnPanelAdded ( );
	void LootSalvageItemProcessDoubleCheck ( unsigned long bConfirmedSalvageAttempt, int nContext, unsigned long bYPressed );
	void PopulateLootItemListEntry ( int nDisplayIndex );
	void PopulateLootItemList ( );
	void PopulateResourceList ( );
	void SetGlobalVars ( );
	void HandleEvent ( unsigned char nCommand, TArray<FString>* lstArguments );
	FString GetInventoryThresholdWarning ( int i_nCurrentInvNum, int i_nMaxItems );
	FString GetInventoryMaxedMessage ( int i_nNumberOver, int i_nMaxItems );
};

// Class SFXGame.BioSFHandler_MainMenu
// 0x0018 (0x00B1 - 0x0099)
class UBioSFHandler_MainMenu : public UBioSFHandler
{
public:
	class UBioSFHandler_MessageBox*                    m_oMainMenuGuiMessageBoxHandler;                  		// 0x009C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                srPRCAvailableMessage;                            		// 0x00A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fPCRMessageDispTime;                              		// 0x00A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bDisplayForNewContentOnly : 1;                    		// 0x00AC (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      m_bSetupMainMenu : 1;                             		// 0x00AC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bAchievementsEnumerating : 1;                   		// 0x00AC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned char                                      nSelectedEntry;                                   		// 0x00B0 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void StartAchievementEnumeration ( );
	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void OnQueryAvailableDownloadsComplete ( unsigned long bWasSuccessful );
	void eventUpdateGUILayout ( );
	void eventSetupMainMenu ( );
	void OnPanelAdded ( );
	void SetEnabledAndVisible ( unsigned long bVal );
	void ExitConfirm ( unsigned long bAPressed, int nContext, unsigned long bYPressed );
	void HandleEvent ( unsigned char nCommand, TArray<FString>* lstArguments );
	void eventOnResumeFailed ( );
	void DismissCareerLimitMessage ( );
	void SetResumeFailedHandler ( );
	bool CheckMaxCareersExceeded ( );
};

// Class SFXGame.BioSFHandler_PCMainMenu
// 0x0003 (0x00B4 - 0x00B1)
class UBioSFHandler_PCMainMenu : public UBioSFHandler_MainMenu
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
};

// Class SFXGame.BioSFHandler_MessageBox
// 0x003F (0x00D8 - 0x0099)
class UBioSFHandler_MessageBox : public UBioSFHandler
{
public:
	struct FScriptDelegate                             __InputCallback__Delegate;                        		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UpdateCallback__Delegate;                       		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __UpdateCallbackEx__Delegate;                     		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioSFManager*                               m_oBackupSFMgr;                                   		// 0x00CC (0x0008) [0x0000000000000000]              
	int                                                nInputCallbackContext;                            		// 0x00D4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void OnPanelAdded ( );
	void HideMessageBox ( unsigned long bRemove );
	void DisplayQuickMessageBoxEx ( FString const& sMessage, struct FBioMessageBoxOptionalParams* stParams );
	void DisplayQuickMessageBox ( int srMessage, struct FBioMessageBoxOptionalParams* stParams );
	void DisplayAlternateMessageBoxEx ( FString const& sMessage, struct FBioMessageBoxOptionalParams* stParams );
	void DisplayMessageBoxEx ( FString const& sGamepadMessage, FString const& sPCMessage, struct FBioMessageBoxOptionalParams* stParams );
	void DisplayMessageBox ( int srMessage, struct FBioMessageBoxOptionalParams* stParams );
	void SetUpdateDelegate ( struct FScriptDelegate pDelegate );
	void SetInputDelegate ( struct FScriptDelegate pDelegate, int nContext );
	void UpdateCallbackEx ( float fDeltaT, class UObject* oMsgBox );
	void UpdateCallback ( float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox );
	void InputCallback ( unsigned long bAPressed, int nContext, unsigned long bYPressed );
};

// Class SFXGame.BioSFHandler_NewCharacter
// 0x0157 (0x01F0 - 0x0099)
class UBioSFHandler_NewCharacter : public UBioSFHandler
{
public:
	FString                                            sStartMap;                                        		// 0x009C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	FString                                            m_sMaleName;                                      		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sFemaleName;                                    		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sCode;                                          		// 0x00CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class UAnimSet*>                            lstClassAnimSetRefs;                              		// 0x00DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<FString>                                    MalePregeneratedHeadCodes;                        		// 0x00EC (0x0010) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray<FString>                                    FemalePregeneratedHeadCodes;                      		// 0x00FC (0x0010) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	class ABioPawn*                                    lstTemplates[ 0x4 ];                              		// 0x010C (0x0020) [0x0000000000000000]              
	struct SFXName                                     lstTemplateNames[ 0x4 ];                          		// 0x012C (0x0020) [0x0000000000000000]              
	struct SFXName                                     lstStoredVarNames[ 0x4 ];                         		// 0x014C (0x0020) [0x0000000000000000]              
	struct SFXName                                     lstCurrentClass[ 0x4 ];                           		// 0x016C (0x0020) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_nmAllianceComputerPleaseLogin;                  		// 0x018C (0x0008) [0x0000000000000000]              
	struct SFXName                                     m_nmClassAnimSet;                                 		// 0x0194 (0x0008) [0x0000000000000000]              
	class UBioSFHandler_Keyboard*                      oKeyboard;                                        		// 0x019C (0x0008) [0x0000000000000000]              
	class UBioMorphFaceFrontEnd*                       m_oBioMorphFrontEnd;                              		// 0x01A4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              fScrollValue;                                     		// 0x01AC (0x0004) [0x0000000000000000]              
	float                                              fLookAtUpDownValue;                               		// 0x01B0 (0x0004) [0x0000000000000000]              
	float                                              fLookAtLeftRightValue;                            		// 0x01B4 (0x0004) [0x0000000000000000]              
	int                                                srCustomMaleName;                                 		// 0x01B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srCustomFemaleName;                               		// 0x01BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srNewCharConfirm;                                 		// 0x01C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srNewCharCancel;                                  		// 0x01C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srNewCharQuestion;                                		// 0x01C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srFacialCategoryDescription;                      		// 0x01CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nIconicClass;                                   		// 0x01D0 (0x0004) [0x0000000000000000]              
	int                                                srNameTitle;                                      		// 0x01D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                nMaxNameLength;                                   		// 0x01D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srCodeTitle;                                      		// 0x01DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                nMaxCodeLength;                                   		// 0x01E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                CurrentPregeneratedHeadIndex;                     		// 0x01E4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bLookAtLeftRightNulling : 1;                      		// 0x01E8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLookAtUpDownNulling : 1;                         		// 0x01E8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bZoomedInOnFace : 1;                              		// 0x01E8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bOpenedFromMainMenu : 1;                          		// 0x01E8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bMaleSelected : 1;                              		// 0x01E8 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bEnteringCode : 1;                              		// 0x01E8 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned char                                      UIState;                                          		// 0x01EC (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      LastUIState;                                      		// 0x01ED (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      m_nCurrentTemplate;                               		// 0x01EE (0x0001) [0x0000000000000000]              
	unsigned char                                      m_nLastInitializedTemplate;                       		// 0x01EF (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SelectPreviousPregeneratedHead ( );
	void SelectNextPregeneratedHead ( );
	void ConfirmButtonPressed ( unsigned long bAPressed, int nContext, unsigned long bYPressed );
	void ConfirmComplete ( );
	void ClearModels ( );
	void OnPanelRemoved ( );
	void OnPanelAdded ( );
	void PopulateCustomFaceList ( );
	void HandleSliderChange ( int nCategory, int nSlider, int nValue );
	void DoCategoryReset ( int nCategory );
	void SetSliderPositions ( );
	void SetCustomModel ( );
	void SelectModel ( unsigned char NewTemplate );
	void UpdateCharacter ( );
	void UpdateUIState ( int NewState );
	void ChangeClass ( struct SFXName ClassName );
	void eventStartNewGameEx ( );
	void StartNewGame ( );
	void UpdateBonusTalentList ( FString const& sCharClass );
	void StartGameWithCustomCharacter ( TArray<FString>* playerSettings );
	void StartGameWithIconicCharacter ( TArray<FString>* lstSettings );
	void UpdateCustomClassChoice ( class UBioCharacterImporter* importer, int Row );
	void UpdateCustomClassList ( );
	void UpdatePreviousCharacterList ( );
	void SetupSummary ( );
	void SetCustomName ( FString const& sMaleName, FString const& sFemaleName );
	void UpdateCode ( );
	void ApplyNewCode ( FString const& sInputCode );
	void Update ( float fDeltaT );
	void ResetLookAt ( );
	void HandleLookAtLeftRight ( float fValue );
	void HandleLookAtUpDown ( float fValue );
	void HandleRotate ( float fValue );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void AStoLog ( FString const& msg );
	void HandleEvent ( unsigned char nCommand, TArray<FString>* lstArguments );
	FString ClipboardPaste ( );
	void ClipboardCopy ( FString const& sString );
	void ClearEffects ( );
	void Update3DModelByClass ( struct SFXName nmClass, class ABioPawn* pTemplate, unsigned char nTemplate, unsigned long bUpdate, unsigned long bForce, unsigned long bAttachVFXandUpdatePose );
	void Setup3DModel ( );
};

// Class SFXGame.BioSFHandler_PCNewCharacter
// 0x0010 (0x0200 - 0x01F0)
class UBioSFHandler_PCNewCharacter : public UBioSFHandler_NewCharacter
{
public:
	float                                              fScrollValueMouse;                                		// 0x01F0 (0x0004) [0x0000000000000000]              
	float                                              fLookAtUpDownValueMouse;                          		// 0x01F4 (0x0004) [0x0000000000000000]              
	float                                              fLookAtLeftRightValueMouse;                       		// 0x01F8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bRightMouseDown : 1;                              		// 0x01FC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void setZoominFaceVar ( unsigned long zoomIn );
	void HandleLookAtLeftRightMouse ( float fValue );
	void HandleLookAtUpDownMouse ( float fValue );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void OnPanelAdded ( );
	void eventUpdate ( float fDeltaT );
};

// Class SFXGame.BioSFHandler_Options
// 0x0188 (0x0221 - 0x0099)
class UBioSFHandler_Options : public UBioSFHandler
{
public:
	struct FGameOptions                                m_oOriginalOptions;                               		// 0x009C (0x00B0) [0x0000000000000000]              
	struct FGameOptions                                m_oNewOptions;                                    		// 0x014C (0x00B0) [0x0000000000000000]              
	class UBioSFHandler*                               m_oHandlerFrom;                                   		// 0x01FC (0x0008) [0x0000000000000000]              
	int                                                srOptionsOverwriteMessage;                        		// 0x0204 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srOptionsOverwriteConfirm;                        		// 0x0208 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srOptionsOverwriteCancel;                         		// 0x020C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srOptionsSaveOptionsFailMessage;                  		// 0x0210 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srOptionsSaveOptionsFailOk;                       		// 0x0214 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srOptionsReturnToMainMenuWarning;                 		// 0x0218 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bDirty : 1;                                     		// 0x021C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bWaitingForMsgBox : 1;                          		// 0x021C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      m_nGuiMode;                                       		// 0x0220 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void ConfirmResetTutorials ( unsigned long bAPressed, int nContext );
	void ConfirmResetToDefaults ( unsigned long bAPressed, int nContext );
	void OptionsConfirmCancel ( unsigned long bAPressed, int nContext );
	void SetHDRStatus ( );
	void CloseGui ( );
	void ConfirmGoToMainMenu ( unsigned long bAPressed, int nContext );
	void OptionsConfirmCommit ( unsigned long bAPressed, int nContext, unsigned long bDoNotClose );
	void SetOptionsOnGUI ( struct FGameOptions* i_GameOptions );
};

// Class SFXGame.BioSFHandler_PCOptions
// 0x0278 (0x0311 - 0x0099)
class UBioSFHandler_PCOptions : public UBioSFHandler
{
public:
	TArray<struct FBioScreenResolution>                ResolutionList;                                   		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<FString>                                    MonitorList;                                      		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FGuiBinding>                         GuiBindings;                                      		// 0x00BC (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	FString                                            SampleMusicName;                                  		// 0x00CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            SampleFXName;                                     		// 0x00DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            SampleVoiceName;                                  		// 0x00EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FOptionTelemetryInfo>                TelemetryInfo;                                    		// 0x00FC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<struct FOptionTelemetryInfo>                ExtendedTelemetryInfo;                            		// 0x010C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FGameOptions                                m_oOriginalOptions;                               		// 0x011C (0x00B0) [0x0000000000000000]              
	struct FGameOptions                                m_oNewOptions;                                    		// 0x01CC (0x00B0) [0x0000000000000000]              
	class UBioSFHandler*                               m_oHandlerFrom;                                   		// 0x027C (0x0008) [0x0000000000000000]              
	class USoundCue*                                   SampleMusicSoundCue;                              		// 0x0284 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   SampleFXSoundCue;                                 		// 0x028C (0x0008) [0x0000000000000000]              
	class USoundCue*                                   SampleVoiceSoundCue;                              		// 0x0294 (0x0008) [0x0000000000000000]              
	class UAudioComponent*                             SampleMusicAudioComponent;                        		// 0x029C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             SampleFXAudioComponent;                           		// 0x02A4 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             SampleVoiceAudioComponent;                        		// 0x02AC (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct SFXName                                     IncomingKey;                                      		// 0x02B4 (0x0008) [0x0000000000000000]              
	class UBioSFHandler_MessageBox*                    ConfirmDisplayMessageBox;                         		// 0x02BC (0x0008) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                NewScreenResIndex;                                		// 0x02C4 (0x0004) [0x0000000000000000]              
	int                                                OldScreenResIndex;                                		// 0x02C8 (0x0004) [0x0000000000000000]              
	int                                                newScreenResWidth;                                		// 0x02CC (0x0004) [0x0000000000000000]              
	int                                                newScreenResHeight;                               		// 0x02D0 (0x0004) [0x0000000000000000]              
	int                                                CaptureBindIndex;                                 		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CaptureBindNumber;                                		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                srOptionsOverwriteMessage;                        		// 0x02DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srOptionsOverwriteConfirm;                        		// 0x02E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srOptionsOverwriteCancel;                         		// 0x02E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srOptionsSaveOptionsFailMessage;                  		// 0x02E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srOptionsSaveOptionsFailOk;                       		// 0x02EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srOptionsReturnToMainMenuWarning;                 		// 0x02F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                KeyHasBeenBound;                                  		// 0x02F4 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                KeyHasBeenUnbound;                                		// 0x02F8 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                CannotBindConstantKey;                            		// 0x02FC (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                DisplayChangeText;                                		// 0x0300 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                RebindWarning;                                    		// 0x0304 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                OldAliasIndex;                                    		// 0x0308 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bWaitingForMsgBox : 1;                          		// 0x030C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bReturnToMainMenu : 1;                            		// 0x030C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bHasCalledInit : 1;                               		// 0x030C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bWaitingOnMsgBox : 1;                             		// 0x030C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bSkippedFirstEvent : 1;                           		// 0x030C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned char                                      m_nGuiMode;                                       		// 0x0310 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void StoreIncomingResolution ( );
	bool WillChangeDisplay ( );
	void RevertSettings ( );
	void SetInExtendedTelemetryCache ( unsigned char eOptionId, int nValue );
	void SetInTelemetryCache ( unsigned char eOptionId, int nValue );
	void ApplyShadowDetail ( );
	void ApplyVideoChangesResolution ( );
	void InitSystemSettingsCache ( );
	void Callback_ConfirmDisplayChange ( unsigned long bAPressed, int context, unsigned long bYPressed );
	void UpdateResolutionIndex ( );
	void Callback_DisplayChangeTimeout ( );
	void ConfirmDisplayChange ( );
	void SetDisplayChanges ( );
	void ApplyCalibrationChanges ( );
	void ApplyVideoChanges ( );
	void SetAntiAliasingLevel ( int AALevel );
	void SetShadowDetailLevel ( unsigned long ShadowDetailLevel );
	void SetFilterLevel ( int FilterLevel );
	void SetShaderFilmLevel ( int FilmDetailLevel );
	void SetShaderBlurLevel ( int BlurDetailLevel );
	void SetTextureLevel ( int TextureLevel );
	void SetScreenRes ( int NewScreenRes );
	void SetWindow ( int NewMode );
	void SetParticleEffectsLevel ( int newLevel );
	void SetVSyncOn ( unsigned long bOn );
	void SetSelectedMonitor ( int monitorIndex );
	int GetSelectedMonitorIndex ( );
	void SetAmbientOcclusion ( );
	void GetAmbientOcclusion ( );
	void BuildMonitorList ( );
	void ApplyDynamicResolution ( );
	void GetDynamicResolution ( );
	void ApplyParticleEffectsLevel ( );
	void ApplyTextureLevelOfDetail ( );
	void GetTextureLevelOfDetail ( );
	void BuildResolutionList ( );
	void eventAddMonitorOptionToUI ( FString const& monitorString );
	void UpdateMonitorSelections ( );
	void eventAddResolutionOptionToUI ( struct FBioScreenResolution const& ScreenRes );
	void UpdateResolutionSelections ( );
	void SetAnalogSens ( int Percent );
	void SetRumbleToggle ( unsigned long bOn );
	int GetValidWindowedModeIndex ( );
	void SetAntiAliasingOption ( );
	void GetAntiAliasingOption ( );
	int ConvertLODBiasToParticleEffectsLevel ( int LODBias );
	int ConvertParticleEffectsLevelToLODBias ( int ParticleEffectsLevel );
	void ApplyCalibrationOptions ( );
	void GetParticleEffectsLevel ( );
	void GetShadowDetailLevel ( );
	void GetCurrentRes ( );
	void SetFilter ( );
	void GetFilter ( );
	void SetVsync ( );
	void GetVSync ( );
	void SetCalibration ( );
	void GetCurrentCalibration ( );
	void InitVideoValues ( );
	void ApplyAudioChanges ( );
	void ApplyAudioSettings ( );
	void SetLegacyLevelUpMode ( unsigned long bOn );
	void SetAutoSave ( unsigned long bOn );
	void SetCaptionToggle ( unsigned long bOn );
	void SetAudioVolVoice ( int Value );
	void SetAudioVolFX ( int Value );
	void SetAudioVolMusic ( int Value );
	void PlaySampleSound ( class UAudioComponent* Comp, float Volume );
	void InitAudioValues ( );
	void GetHardwareSoundOn ( );
	class UAudioComponent* LoadSound ( FString const& Section, class USoundCue* Cue );
	bool ProcessInput ( int ControllerId, struct SFXName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
	void CaptureNewBinding ( int BindIndex, int BindNumber );
	void UpdateKeyToSF ( int Index );
	void UpdateTextOnButtons ( );
	void BuildBindingList ( unsigned long bUseDefaults );
	void ApplyPCBindings ( );
	void InitKeyboardValues ( );
	void eventSetBindingHelpText ( FString const& HelpText );
	void eventSetBindingKeyText ( int Index, FString const& TalentText, int KeyIndex );
	void eventSetBindingTalentText ( int Index, FString const& TalentText );
	void eventShowBindingRow ( int Index, unsigned long bShow );
	void ApplyAutos ( );
	void ApplyGamePlay ( );
	void ResetTutorialsMSG ( );
	void ConfirmResetTutorials ( unsigned long bAPressed, int nContext );
	void SaveProfile ( );
	void InitAutos ( );
	void InitGamePlay ( );
	void ApplyInput ( );
	void SetMouseSense ( int SliderValue );
	void SetHardwareMouseMouse ( unsigned long bOn );
	void InitInput ( );
	void ApplyChanges ( int SubPanelIndex );
	void ExitMenu ( );
	void ConfirmGoToMainMenu ( unsigned long bAPressed, int nContext );
	void QuitToMainMenuFromOptions ( );
	void ExitToMainMenu ( );
	void ResetAutos ( );
	void ResetGameplay ( );
	void ResetControls ( );
	void ResetController ( );
	void ResetInput ( );
	void ResetSound ( );
	void ResetCalibration ( );
	void ResetGraphics ( );
	void eventUpdateVideoOptionsOnRevert ( );
	void eventResetAllValues ( int SubPanelIndex );
	void SetDefaultAutos ( );
	void SetDefaultGameplay ( );
	void SetDefaultControls ( );
	void SetDefaultController ( );
	void SetDefaultInput ( );
	void SetDefaultSound ( );
	void SetDefaultCalibration ( );
	void SetDefaultVideo ( );
	void eventSetDefaults ( int SubPanelIndex );
	void setDropdownByID ( int Id, int Index );
	void SetIndexedSliderByIndex ( int Index, int Value, unsigned long bSetLastMarker );
	void SetSliderByIndex ( int Index, float Value, unsigned long bSetLastMarker );
	void SetCheckBoxByIndex ( int Index, unsigned long bOn );
	void WarnUnsaved ( );
	void AStoLog ( FString const& msg );
	void ClosePanelWithOutSavingConfirm ( unsigned long bConfimNoSave );
	void ClosePanelWithOutSaving ( );
	void HandleEvent ( unsigned char nCommand, TArray<FString>* lstArguments );
	void eventInit ( );
	void HandleButtonRefresh ( unsigned long usingGamepad );
	void OnPanelAdded ( );
	int RestoreMappedSettingStep ( unsigned char Type, int Step );
	int StoreMappedSettingStep ( unsigned char Type, int Step );
	void ResetTelemetryCache ( );
	void SendTelemetryChanges ( );
	void ConfirmKeybindOverwrite ( unsigned long bAPressed, int nContext );
	void ResetDefaultsMSG ( int nContext );
	void SetHDRStatus ( );
	void SavingMSG ( );
	void ConfirmResetToDefaults ( unsigned long bAPressed, int nContext );
	void OptionsConfirmCommit ( unsigned long bAPressed, int nContext );
};

// Class SFXGame.BioSFHandler_ReplayCharacterSelect
// 0x0023 (0x00BC - 0x0099)
class UBioSFHandler_ReplayCharacterSelect : public UBioSFHandler
{
public:
	TArray<struct FSaveGameRecord>                     lstRecords;                                       		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_ActiveCharId;                                   		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void OnPanelAdded ( );
};

// Class SFXGame.BioSFHandler_Reticule
// 0x00A4 (0x013D - 0x0099)
class UBioSFHandler_Reticule : public UBioSFHandler
{
public:
	TArray<struct FLOSIndicatorInfo>                   m_aLOSIndicators;                                 		// 0x009C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FReticuleInfo                               m_Reticule;                                       		// 0x00AC (0x0028) [0x0000000000002000]              ( CPF_Transient )
	struct FSelectionIndicatorInfo                     m_SelectionIndicator;                             		// 0x00D4 (0x0020) [0x0000000000002000]              ( CPF_Transient )
	float                                              CrosshairBuffer[ 0x3 ];                           		// 0x00F4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class ABioPlayerController*                        m_oPlayerController;                              		// 0x0100 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioPlayerInput*                             m_oPlayerInput;                                   		// 0x0108 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioEpicPawnBehavior*                        m_oPlayerBehavior;                                		// 0x0110 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioPawnBehavior*                            m_oPlayerPawnBehavior;                            		// 0x0118 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioPlayerSquad*                             m_oPlayerSquad;                                   		// 0x0120 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fTimeSinceLastUpdate;                           		// 0x0128 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMinScalingRange;                               		// 0x012C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fMinScalingValue;                               		// 0x0130 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                CrossHairBufferIdx;                               		// 0x0134 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinCrosshairSize;                                 		// 0x0138 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      m_eLastReticuleMode;                              		// 0x013C (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ProcessImpacts ( unsigned long bIsHeadShot );
	void Reset ( );
	void OnPanelAdded ( );
};

// Class SFXGame.BioSFHandler_SaveLoadBase
// 0x0044 (0x00DD - 0x0099)
class UBioSFHandler_SaveLoadBase : public UBioSFHandler
{
public:
	TArray<struct FSaveGameRecord>                     lstRecords;                                       		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_ActiveCharId;                                   		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                srDeleteMessage;                                  		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srDeleteConfirm;                                  		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srDeleteCancel;                                   		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srDeleteCharacterMessage;                         		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srTimePlayed;                                     		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srLastPlayedDate;                                 		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srLastPlayedTime;                                 		// 0x00D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bShowAllSaveGames : 1;                          		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      m_eGuiMode;                                       		// 0x00DC (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void Update ( float fDeltaT );
	void OnPanelRemoved ( );
	void OnPanelAdded ( );
	void DeviceSelectionCancel ( int i_dwDeviceSelectionId );
	void DeviceSelectionCompletion ( int i_dwDeviceSelectionId );
	void DeleteGameConfirm ( unsigned long bAPressed, int nContext );
};

// Class SFXGame.BioSFHandler_LoadGame
// 0x0037 (0x0114 - 0x00DD)
class UBioSFHandler_LoadGame : public UBioSFHandler_SaveLoadBase
{
public:
	FString                                            m_sDeleteCharId;                                  		// 0x00E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioSFHandler_MessageBox*                    m_oLoadGuiMessageBoxHandler;                      		// 0x00F0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                srAbandonProgressMessage;                         		// 0x00F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srAbandonProgressConfirm;                         		// 0x00FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srAbandonProgressCancel;                          		// 0x0100 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srLoading;                                        		// 0x0104 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srChunksNotInstalledMessage;                      		// 0x0108 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srChunksNotInstalledConfirm;                      		// 0x010C (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bCorruptSaveDirty : 1;                          		// 0x0110 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Update ( float fDeltaT );
	void OnPanelRemoved ( );
	void SetDirty ( );
	void RebuildLoadGameList ( );
	void NotifyCorruptSavesAndDelete ( );
	void DeleteCorruptGamesConfirm ( unsigned long bAPressed );
	void ChunksNotInstalledConfirm ( unsigned long bAPressed, int nContext );
	void DeleteGameConfirm ( unsigned long bAPressed, int nContext );
	void DeleteCharacterConfirm ( unsigned long bAPressed, int nContext );
	void LoadGameConfirm ( unsigned long bAPressed, int nContext );
};

// Class SFXGame.BioSFHandler_SaveGame
// 0x002B (0x0108 - 0x00DD)
class UBioSFHandler_SaveGame : public UBioSFHandler_SaveLoadBase
{
public:
	class UBioSFHandler_MessageBox*                    m_oSaveGuiMessageBoxHandler;                      		// 0x00E0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                srOverwriteMessage;                               		// 0x00E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srOverwriteConfirm;                               		// 0x00EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srOverwriteCancel;                                		// 0x00F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srSaving;                                         		// 0x00F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srSaveComplete;                                   		// 0x00F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nMaxSaveGameNumber;                             		// 0x00FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fUpdateTimer;                                     		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nSaveIndex;                                     		// 0x0104 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void CheckFreeSpaceComplete ( struct FSFXSaveGameCommandEventArgs const& Args );
	void OnPanelRemoved ( );
	void NotifyCorruptSavesAndDelete ( );
	void DeleteCorruptGamesConfirm ( unsigned long bAPressed );
	void SaveComplete ( float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox );
	void SaveGameConfirm ( unsigned long bAPressed, int nContext );
	void DeleteGameConfirm ( unsigned long bAPressed, int nContext );
};

// Class SFXGame.BioSFHandler_SharedIGG
// 0x0007 (0x00A0 - 0x0099)
class UBioSFHandler_SharedIGG : public UBioSFHandler
{
public:
	unsigned long                                      bOpenedFromMainMenu : 1;                          		// 0x009C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bOpenedFromPauseMenu : 1;                         		// 0x009C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bJournalOpenedFromMap : 1;                        		// 0x009C (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void BackToMainMenu ( );
	void HandleEvent ( unsigned char nCommand, TArray<FString>* lstArguments );
};

// Class SFXGame.BioSFHandler_Shop
// 0x00D9 (0x0172 - 0x0099)
class UBioSFHandler_Shop : public UBioSFHandler
{
public:
	TArray<unsigned char>                              shopSlotOrderForShopInventory;                    		// 0x009C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<unsigned char>                              shopSlotOrderForPlayerInventory;                  		// 0x00AC (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct SFXName                                     m_nmImageResource;                                		// 0x00BC (0x0008) [0x0000000000000000]              
	class UBio2DA*                                     m_pShopImages2DA;                                 		// 0x00C4 (0x0008) [0x0000000000000000]              
	class ABioShop*                                    m_shop;                                           		// 0x00CC (0x0008) [0x0000000000000000]              
	class ABioWorldInfo*                               m_WorldInfo;                                      		// 0x00D4 (0x0008) [0x0000000000000000]              
	class ABioPlayerSquad*                             m_playerSquad;                                    		// 0x00DC (0x0008) [0x0000000000000000]              
	class UBioItem*                                    m_oItemBeingSold;                                 		// 0x00E4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioInventory*                               m_combinedShopInventory;                          		// 0x00EC (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioInventoryGuiInterface*                   m_inventoryInterface;                             		// 0x00F4 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              DEFAULT_SELL_PRICE_FACTOR;                        		// 0x00FC (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              MINIMUM_SELL_PRICE_FACTOR;                        		// 0x0100 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              MAXIMUM_SELL_PRICE_FACTOR;                        		// 0x0104 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              DEFAULT_BUY_PRICE_FACTOR;                         		// 0x0108 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              MINIMUM_BUY_PRICE_FACTOR;                         		// 0x010C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              MAXIMUM_BUY_PRICE_FACTOR;                         		// 0x0110 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                NUMBER_OF_VISIBLE_AND_SCROLLABLE_ITEMS;           		// 0x0114 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                srXModUninstallMsg;                               		// 0x0118 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srXModUninstallConfirm;                           		// 0x011C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srSellXModItemMsg;                                		// 0x0120 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srSellXModItemConfirm;                            		// 0x0124 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srSellXModItemCancel;                             		// 0x0128 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srInventoryFullMessage;                           		// 0x012C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srInventoryFullConfirmation;                      		// 0x0130 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srSellAllConfirm;                                 		// 0x0134 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srYes;                                            		// 0x0138 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srNo;                                             		// 0x013C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srItemLevel;                                      		// 0x0140 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srTypeSort;                                       		// 0x0144 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srPriceSort;                                      		// 0x0148 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srNameSort;                                       		// 0x014C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                MaxSort;                                          		// 0x0150 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_currentGUIIndex;                                		// 0x0154 (0x0004) [0x0000000000000000]              
	int                                                m_currentMasterIndex;                             		// 0x0158 (0x0004) [0x0000000000000000]              
	int                                                m_currentPlotItemIndex;                           		// 0x015C (0x0004) [0x0000000000000000]              
	int                                                m_plotItemIndexOffset;                            		// 0x0160 (0x0004) [0x0000000000000000]              
	float                                              m_scrollValue;                                    		// 0x0164 (0x0004) [0x0000000000000000]              
	float                                              m_fRemainingDisplayErrorTime;                     		// 0x0168 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_preInitializationSucceeded : 1;                 		// 0x016C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_isPlayerBuying : 1;                             		// 0x016C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bDisplayingPurchaseError : 1;                   		// 0x016C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned char                                      m_currentSlot;                                    		// 0x0170 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_currentSlotTypeAtIndex;                         		// 0x0171 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void UpdatePurchaseErrorMsg ( float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox );
	void DisplayPurchaseErrorMsg ( );
	void ConfirmSellAllJunk ( unsigned long bConfirmedJunk, int nContext, unsigned long bYPressed );
	void SellAllJunk ( );
	void MarkItemAsJunk ( unsigned long val );
	FString GetProperSortString ( int SortType );
	void NextSort ( );
	void OnPanelAdded ( );
	bool ReclaimOrCheckItemXMods ( unsigned long bCheckOnly, class UBioItem* oItem );
	bool GetCurrentItemCategory ( int* intIsXMod, int* intIsWeapon, int* intIsPlotItem, unsigned char* EquipmentSlot, unsigned char* weaponType );
	int CalculatePurchasePriceFromBasePrice ( float basePrice );
	int CalculateSellPriceFromBasePrice ( float basePrice );
	void UpdateCompareItemAtIndex ( int Index, FString const& squadMemberName, class UBioItem* Item, int nIsXMod );
	void UpdateCompareItems ( );
	void UpdatePlotItem ( int plotItemIndex, int indexToSendToGUI );
	void UpdateListItem ( int ListIndex, int indexToSendToGUI );
	void UpdateEntireShopList ( int nSetGUIIndex, unsigned long fullRefresh );
	void UpdateCurrentIndex ( int nRequestedGUIIndex );
	void UpdatePartyCash ( );
	int BuyCurrentItem ( );
	void SellItemDelegate ( unsigned long bConfirmedSell, int nContext, unsigned long bYPressed );
	void SellCurrentItem ( );
	void RebuildAndUpdateShopInventory ( int nSetGUIIndex, unsigned long needsFullRefresh );
	void SetSlotState ( unsigned char newSlot );
	void SetTradeState ( unsigned long isPlayerBuying );
	void ShutDown ( );
	void Initialize ( );
	void Update ( float unused );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void HandleEvent ( unsigned char nCommand, TArray<FString>* Parameters );
	bool PreInitialization ( class ABioShop* shop, class ABioWorldInfo* WorldInfo );
	FString GetInventoryFullMessage ( int i_nOverItems, int i_nMaxItems );
};

// Class SFXGame.BioSFHandler_Splash
// 0x001B (0x00B4 - 0x0099)
class UBioSFHandler_Splash : public UBioSFHandler
{
public:
	float                                              fLegalTimeout;                                    		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              fShowLegalTime;                                   		// 0x00A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srNoLoginStart;                                   		// 0x00A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srConfirmNoLoginStart;                            		// 0x00A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srCancelNoLoginStart;                             		// 0x00AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bPressedStart : 1;                                		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnPanelAdded ( );
	void StartTimeout ( unsigned long bShowLegal );
	void Update ( float fDeltaT );
	void eventAdvanceScreen ( );
	void Initialize ( );
	void HandleEvent ( unsigned char nCommand, TArray<FString>* lstArguments );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void DisplayNoProfileConfirmation ( );
	void Callback_LoginComplete ( unsigned long bIsOpening );
	void CheckLogin ( );
};

// Class SFXGame.BioSFHandler_PCSplash
// 0x0000 (0x00B4 - 0x00B4)
class UBioSFHandler_PCSplash : public UBioSFHandler_Splash
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventUpdate ( float fDeltaT );
	void eventAdvanceScreen ( );
	void HandleEvent ( unsigned char nCommand, TArray<FString>* lstArguments );
	void OnPanelRemoved ( );
};

// Class SFXGame.BioSFHandler_Tutorial
// 0x0017 (0x00B0 - 0x0099)
class UBioSFHandler_Tutorial : public UBioSFHandler
{
public:
	struct FScriptDelegate                             __CompletionCallback__Delegate;                   		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bGameWasPaused : 1;                             		// 0x00AC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bInputModeCached : 1;                           		// 0x00AC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void HandleEvent ( unsigned char nCommand, TArray<FString>* lstArguments );
	void OnPanelAdded ( );
	void CompletionCallback ( );
};

// Class SFXGame.BioSFHandler_XBoxMessageBox
// 0x000B (0x00A4 - 0x0099)
class UBioSFHandler_XBoxMessageBox : public UBioSFHandler
{
public:
	int                                                nSelectedButton;                                  		// 0x009C (0x0004) [0x0000000000000000]              
	unsigned long                                      bMessageBoxVisible : 1;                           		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DisplayMessageBox ( int srTitle, int srMessage, unsigned char nIcon, int nDefaultButton, TArray<int>* srButtons );
};

// Class SFXGame.BioSkillGame_Handler
// 0x0085 (0x011E - 0x0099)
class UBioSkillGame_Handler : public UBioSFHandler
{
public:
	struct FScriptDelegate                             __OnSuccessCallback__Delegate;                    		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFailureCallback__Delegate;                    		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCancelCallback__Delegate;                     		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UObject*                                     m_oDependent;                                     		// 0x00CC (0x0008) [0x0000000000000000]              
	class ABioPawn*                                    m_oUsingPawn;                                     		// 0x00D4 (0x0008) [0x0000000000000000]              
	int                                                m_nButtonInSequence;                              		// 0x00DC (0x0004) [0x0000000000000000]              
	int                                                m_nDisplayedButton;                               		// 0x00E0 (0x0004) [0x0000000000000000]              
	int                                                m_nButtonsSuccessfullyPressed;                    		// 0x00E4 (0x0004) [0x0000000000000000]              
	int                                                m_nTotalButtonsToDisplay;                         		// 0x00E8 (0x0004) [0x0000000000000000]              
	int                                                m_nDiscountSalvagePerPress;                       		// 0x00EC (0x0004) [0x0000000000000000]              
	int                                                m_nMaxSalvage;                                    		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                m_nButtonTimoutSequence;                          		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              m_fButtonTimeout;                                 		// 0x00F8 (0x0004) [0x0000000000000000]              
	float                                              m_fButtonDelayTime;                               		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                m_GameMessageSuccess;                             		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                m_GameMessageFailure;                             		// 0x0104 (0x0004) [0x0000000000000000]              
	int                                                m_GameMessageDuringGame;                          		// 0x0108 (0x0004) [0x0000000000000000]              
	int                                                m_preGameButtonAText;                             		// 0x010C (0x0004) [0x0000000000000000]              
	int                                                m_preGameButtonBText;                             		// 0x0110 (0x0004) [0x0000000000000000]              
	int                                                m_preGameButtonXText;                             		// 0x0114 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bButtonIconVisible : 1;                         		// 0x0118 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bSuccessfulEndGame : 1;                         		// 0x0118 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bDoNotUseSalvage : 1;                           		// 0x0118 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bSkillGameFailed : 1;                           		// 0x0118 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bGameActive : 1;                                		// 0x0118 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_SwapXandO : 1;                                  		// 0x0118 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned char                                      m_nSkillGameType;                                 		// 0x011C (0x0001) [0x0000000000000000]              
	unsigned char                                      m_GameDifficulty;                                 		// 0x011D (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetSwapXandO ( unsigned long shouldSwap );
	void OnPanelAdded ( );
	void ResetMousePos ( );
	void SetupGame ( int i_initialSalvage );
	void UpdateSalvage ( int i_salvage );
	void SetButtonVisible ( int i_ButtonType );
	void ClearAllButtons ( );
	void HandleSkillGameDisplayButton ( class UObject* Params );
	void eventSkillGameTriggerNextButton ( float fButtonDelayTime );
	void HandleSkillGameButtonTimeout ( class UObject* Params );
	void eventHandleSkillGameButtonPress ( unsigned char InputEvent );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void eventEndSkillGame ( unsigned long bCompleted, unsigned long bNoSalvage, unsigned long bGameCanceled );
	void EndSkillGameEx ( unsigned long bCompleted );
	void StartSkillGameEx ( class ABioPawn* oUsingPawn, class UObject* oPlaceable, unsigned char nSkillGameType, int nMinSalvage, int nMaxSalvage, int nTotalButtonsToDisplay, float fButtonTimeout, float fButtonDelayTime, unsigned char eGameDifficulty );
	void eventInitializeStringReferences ( int i_GameMessageSuccess, int i_GameMessageFailure, int i_GameMessageDuringGame, int i_preGameButtonAText, int i_preGameButtonBText, int i_preGameButtonXText );
	void eventInitializeSkillGameData ( class ABioPawn* oUsingPawn, class UObject* oDependent, unsigned char nSkillGameType, int nMinSalvage, int nMaxSalvage, int nTotalButtonsToDisplay, float fButtonTimeout, float fButtonDelayTime, unsigned char eGameDifficulty );
	void OnCancelCallback ( int n_SalvageUsed );
	void OnFailureCallback ( int n_SalvageUsed );
	void OnSuccessCallback ( int n_SalvageUsed );
};

// Class SFXGame.BioSkillGame_PCHandler
// 0x0006 (0x0124 - 0x011E)
class UBioSkillGame_PCHandler : public UBioSkillGame_Handler
{
public:
	unsigned long                                      m_bUpdateGameClock : 1;                           		// 0x0120 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void HandleClockUpdate ( class UObject* Params );
	void eventStartTimer ( );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void OnPanelAdded ( );
	void eventUpdate ( float fDeltaT );
};

// Class SFXGame.MassEffectGuiManager
// 0x00CD (0x0230 - 0x0163)
class UMassEffectGuiManager : public UBioSFManager
{
public:
	TArray<struct FBioMessageBoxData>                  m_aMessageBoxQueue;                               		// 0x0164 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<unsigned char>                              lstEquipSlotOrderLoot;                            		// 0x0174 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<unsigned char>                              lstEquipSlotOrderInventory;                       		// 0x0184 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<unsigned char>                              lstEquipSlotOrderXMods;                           		// 0x0194 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UBioSFHandler_HUD*                           m_oSFHudHandler;                                  		// 0x01A4 (0x0008) [0x0000000000000000]              
	class UBioSFHandler_Reticule*                      m_oSFReticuleHandler;                             		// 0x01AC (0x0008) [0x0000000000000000]              
	class UBioSFHandler_DesignerUI*                    m_oDUIHandler;                                    		// 0x01B4 (0x0008) [0x0000000000000000]              
	class UBioSFHandler_BrowserWheel*                  m_oBWHandler;                                     		// 0x01BC (0x0008) [0x0000000000000000]              
	class UBioSFHandler_BrowserWheel*                  m_oPauseMenuHandler;                              		// 0x01C4 (0x0008) [0x0000000000000000]              
	class UBioSFHandler_PCCharacterRecord*             m_oCharacterRecordHandler;                        		// 0x01CC (0x0008) [0x0000000000000000]              
	class UBioSFHandler_SharedIGG*                     m_oSharedHandler;                                 		// 0x01D4 (0x0008) [0x0000000000000000]              
	class UBioSFHandler_AreaMap*                       m_oAreaMapHandler;                                		// 0x01DC (0x0008) [0x0000000000000000]              
	class ABioWorldInfo*                               oBioWorldInfo;                                    		// 0x01E4 (0x0008) [0x0000000000000000]              
	class UBioSFPanel*                                 m_oConversationPanel;                             		// 0x01EC (0x0008) [0x0000000000000000]              
	struct SFXName                                     m_nmCurrentTutorial;                              		// 0x01F4 (0x0008) [0x0000000000000000]              
	class UBioSFHandler_Loot*                          oLootHandler;                                     		// 0x01FC (0x0008) [0x0000000000000000]              
	class UBioSFHandler_Shop*                          oShopHandler;                                     		// 0x0204 (0x0008) [0x0000000000000000]              
	class UBioSFHandler_Specialization*                oSpecializationHandler;                           		// 0x020C (0x0008) [0x0000000000000000]              
	class UBioSFHandler_BlackScreen*                   m_oBlackScreenHandler;                            		// 0x0214 (0x0008) [0x0000000000000000]              
	class UBioSFHandler_XMods*                         oXModsHandler;                                    		// 0x021C (0x0008) [0x0000000000000000]              
	class APlayerController*                           Player;                                           		// 0x0224 (0x0008) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned long                                      m_bSFHudCached : 1;                               		// 0x022C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bSFHudDisplayed : 1;                            		// 0x022C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bGameWasPaused : 1;                             		// 0x022C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bGUIRequestedMouseVisiblityState : 1;             		// 0x022C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bWasBlackScreenShown : 1;                         		// 0x022C (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void HidePhotoMode ( );
	class UBioSFHandler* ShowPhotoMode ( );
	void HideSubMenuCharacterRecord ( );
	class UBioSFPanel* ShowSubMenuCharacterRecord ( );
	class UBioSFPanel* ShowSubMenuInventory ( class ABioPawn* oChar );
	class UBioSFPanel* eventShowSubMenuGui ( struct SFXName GuiName );
	void RedisplayHudElements ( );
	void eventHidePauseMenu ( class UBioSFPanel* oCurrentPanel );
	void ReturnToPauseMenu ( class UBioSFPanel* oCurrentPanel );
	void UpdateMouseVisibilityState ( );
	bool SetMouseVisibility ( class UObject* pObject, unsigned long bShow );
	void GameSessionEnded ( );
	class UBioSFHandler_MessageBox* CreateMessageBox ( );
	FString ConvertTutorialString ( int incomingRef );
	void CancelTutorial ( unsigned long bFadeOut, struct SFXName nmTutorial );
	void ShowTutorial ( struct FBioTutorialParams* stParams );
	class UBioSFHandler_BrowserWheel* GetPauseMenuHandler ( );
	class UBioSFHandler_BrowserWheel* GetBrowserHandler ( );
	class UBioSFHandler_DesignerUI* GetDUIHandler ( );
	void SetWheelState ( unsigned char nPage, unsigned char nState );
	void RemoveBlackScreen ( );
	void OnPlayerDeath ( );
	void eventHideDeviceSelection ( );
	class UBioSFHandler_DeviceSelection* eventShowDeviceSelection ( struct SFXName i_nmCompletionDelegateFunction, struct SFXName i_nmCancelDelegateFunction, int i_nSize, class UObject* i_Target );
	void eventHideSkillGame ( );
	class UBioSkillGame_Handler* eventShowSkillGame ( );
	class ABioPlayerController* GetBioPlayerController ( );
	class APlayerController* GetPlayerController ( );
	bool BlackScreenFadeFinished ( );
	void HideBlackScreen ( unsigned long bWithFade );
	void ShowBlackScreen ( unsigned long bWithFade );
	void HideGameOverGui ( );
	void ShowGameOverGui ( int srGameOverString );
	void PlayCredits ( );
	void HidePartySelect ( );
	void ShowPartySelect ( struct SFXName nmForcedHenchman );
	bool NestedCategory ( unsigned char eLeftCat, unsigned char eRightCat );
	int FindCompatibleCategory ( TArray<unsigned char> const& lstSlotsOrdered, unsigned char eCategory );
	bool SetSlotOrder ( unsigned char eHandlerID, class UBioInventoryGuiInterface* oInvLayer, unsigned char ePreferredDefault );
	void eventHideSpecializationGui ( );
	void eventShowSpecializationGui ( );
	void eventHideShopGui ( );
	bool eventShowShopGui ( class ABioShop* shop );
	void eventHideGuiByTag ( struct SFXName sTag );
	void HideLootGui ( );
	void eventShowLootGui ( class UBioInventory* oLootInv );
	void ShowXModsGui ( class ABioPlayerController* oController );
	void eventHideBrowserWheel ( class UBioSFPanel* oCurrentPanel, unsigned long bUnpauseSound );
	void eventReturnToBrowserWheel ( class UBioSFPanel* oCurrentPanel );
	void eventShowBrowserWheel ( unsigned long bPauseSound );
	void CancelLeaderActive ( );
	void HideInventoryScreen ( );
	void ShowInventoryScreen ( class ABioPawn* oChar );
	void eventHideHUD ( );
	void eventShowHUD ( );
	void ReleaseHudCache ( );
	void RecreateHudPanel ( );
	bool IsInConversation ( );
	void eventHideConversationGui ( );
	void eventShowConversationGui ( unsigned long IsAmbient );
	class UBioSFHandler_MainMenu* eventShowMainMenu ( );
	void SetupBackground ( );
	void Update ( float fDeltaT );
};

// Class SFXGame.SFXSFHandler_PhotoMode
// 0x004F (0x00E8 - 0x0099)
class USFXSFHandler_PhotoMode : public UBioSFHandler
{
public:
	TArray<struct FPhotoModeOptionPage>                Pages;                                            		// 0x009C (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray<struct FPhotoModeSliderOption>              SliderOptions;                                    		// 0x00AC (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray<struct FPhotoModeRangeSliderOption>         RangeSliderOptions;                               		// 0x00BC (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	TArray<struct FPhotoModeTextSliderOption>          TextSliderOptions;                                		// 0x00CC (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	class USFXGameModePhoto*                           PhotoMode;                                        		// 0x00DC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bOptionsHidden : 1;                               		// 0x00E4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bInitialized : 1;                                 		// 0x00E4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ToggleOptions ( );
	void HandleOptionChanged ( unsigned char OptionId, float Value );
	void SetOption ( unsigned char OptionId, float ValueIdx );
	float GetDefaultFloatOption ( unsigned char OptionId );
	bool GetDefaultBoolOption ( unsigned char OptionId );
	void InitializePhotoMode ( );
	void MovieLoaded ( );
	void OnPanelRemoved ( );
	void OnPanelAdded ( );
	void HandleButtonRefresh ( unsigned long bUsingGamepad );
	void HandleInputEvent ( unsigned char Event, float fValue );
};

// Class SFXGame.BioCameraZoom
// 0x0028 (0x0088 - 0x0060)
class UBioCameraZoom : public UObject
{
public:
	float                                              MaxFocusDistance;                                 		// 0x0060 (0x0004) [0x0000000000000000]              
	float                                              InnerRadiusFactor;                                		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              InterpFactor;                                     		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              FalloffExponent;                                  		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              BlurKernelSize;                                   		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              MaxNearBlurAmount;                                		// 0x0074 (0x0004) [0x0000000000000000]              
	float                                              MaxFarBlurAmount;                                 		// 0x0078 (0x0004) [0x0000000000000000]              
	struct FColor                                      ModulateBlurColor;                                		// 0x007C (0x0004) [0x0000000000000000]              
	float                                              FocusDistance;                                    		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              FocusDistanceTarget;                              		// 0x0084 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Initialize ( float Distance );
	void ModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
	void Tick ( float DeltaTime );
	void Focus ( float Distance );
};

// Class SFXGame.SFXCameraMode
// 0x00C8 (0x0128 - 0x0060)
class USFXCameraMode : public UObject
{
public:
	struct FTViewTarget                                ViewTarget;                                       		// 0x0060 (0x0038) [0x0000000000000000]              
	struct FTPOV                                       m_pov;                                            		// 0x0098 (0x001C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     Offset;                                           		// 0x00B4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     HookOffset;                                       		// 0x00C0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LastHookPos;                                      		// 0x00CC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    CameraTargetDir;                                  		// 0x00D8 (0x000C) [0x0000000000000000]              
	struct SFXName                                     HookName;                                         		// 0x00E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     CameraName;                                       		// 0x00EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USFXCameraInput*                             Input;                                            		// 0x00F4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     LastCameraCollisionActor;                         		// 0x00FC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioCameraZoom*                              DOFHandler;                                       		// 0x0104 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              FOV;                                              		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AspectRatio;                                      		// 0x0110 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              TimeToRecenter;                                   		// 0x0114 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RotationSpeedLimit;                               		// 0x0118 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CollisionDistance;                                		// 0x011C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RecenterStrength;                                 		// 0x0120 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsCameraShakeEnabled : 1;                        		// 0x0124 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCollisionEnabled : 1;                            		// 0x0124 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bInstantTransition : 1;                           		// 0x0124 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bConstrainAspectRatio : 1;                        		// 0x0124 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bRecenterCamera : 1;                              		// 0x0124 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bFirstPerson : 1;                                 		// 0x0124 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bCameraRubberBand : 1;                            		// 0x0124 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bAllowSpectate : 1;                               		// 0x0124 (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )
	unsigned long                                      bRecenterCameraNew : 1;                           		// 0x0124 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bAutoCancelCameraRecentering : 1;                 		// 0x0124 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bRecenterCancelled : 1;                           		// 0x0124 (0x0004) [0x0000000000000000] [0x00000400] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ProcessViewRotation ( float DeltaTime, struct FRotator* OutViewRotation, struct FRotator* OutDeltaRot );
	bool GetActorCameraHook ( struct FVector* OutLocation );
	bool CheckLoop ( class USFXCameraMode* M, int RecurseLevel );
	void DrawHUD ( class UBioCheatManager* M );
	struct FRotator GetCurrentShake ( );
	bool IsCollisionEnabled ( );
	void Initialize ( );
	void MakeInactive ( );
	void MakeActive ( );
	void eventAimAtPoint ( struct FVector const& V );
	struct FVector GetCameraHook ( );
	struct FVector CalculateOffsetHook ( float Distance );
	void DoSniperCameraCollision ( class AActor* A, struct FVector* V, struct FRotator* R );
	void Tick ( float TimeDelta );
	struct FVector GetCameraLocation ( );
	void ComputeClipPlaneRect ( float fFov, float fNearClipPlane, float* fWidth, float* fHeight );
	void DoCameraCollisionNative ( struct FVector const& CollisionHook, class AActor* A, struct FVector* V, struct FRotator* R );
	class AController* eventGetViewTargetAsController ( );
	class APawn* GetViewTargetAsPawn ( );
	void DoCameraCollision ( class AActor* Owner, struct FVector* CamPosition, struct FRotator* CamRotation );
	void eventModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
};

// Class SFXGame.SFXCameraInput
// 0x001C (0x007C - 0x0060)
class USFXCameraInput : public UObject
{
public:
	struct FVector2D                                   CameraSensitivity;                                		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeToReachFullSpeed;                             		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxCameraRotationSpeed;                           		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StickDeadZone;                                    		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MouseClampMax;                                    		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSwitchSticks : 1;                                		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bClampMouse : 1;                                  		// 0x0078 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioCameraUtility
// 0x0004 (0x012C - 0x0128)
class UBioCameraUtility : public USFXCameraMode
{
public:
	float                                              m_fCameraCollisionTestPointRange;                 		// 0x0128 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioCameraBehavior
// 0x0000 (0x012C - 0x012C)
class UBioCameraBehavior : public UBioCameraUtility
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float TimeDelta );
};

// Class SFXGame.BioCameraBehaviorConversation
// 0x0094 (0x01C0 - 0x012C)
class UBioCameraBehaviorConversation : public UBioCameraBehavior
{
public:
	struct FVector                                     m_vFixedCamPosition;                              		// 0x012C (0x000C) [0x0000000000000000]              
	struct FRotator                                    m_rFixedCamRotation;                              		// 0x0138 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vProceduralCamPosition;                         		// 0x0144 (0x000C) [0x0000000000000000]              
	struct FRotator                                    m_rProceduralCamRotation;                         		// 0x0150 (0x000C) [0x0000000000000000]              
	struct FBioStageDOFData                            m_tDOFData;                                       		// 0x015C (0x000C) [0x0000000000000000]              
	struct FRotator                                    m_rRotationOffset;                                		// 0x0168 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vPrevFixedCamPos;                               		// 0x0174 (0x000C) [0x0000000000000000]              
	struct FRotator                                    m_rPrevFixedCamRot;                               		// 0x0180 (0x000C) [0x0000000000000000]              
	struct FBioStageDOFData                            m_tPrevDOFData;                                   		// 0x018C (0x000C) [0x0000000000000000]              
	class AActor*                                      ViewSource;                                       		// 0x0198 (0x0008) [0x0000000000000000]              
	class AActor*                                      Target;                                           		// 0x01A0 (0x0008) [0x0000000000000000]              
	float                                              m_fNearPlane;                                     		// 0x01A8 (0x0004) [0x0000000000000000]              
	float                                              CAMERA_FOV;                                       		// 0x01AC (0x0004) [0x0000000000000000]              
	float                                              m_fLateralOffset;                                 		// 0x01B0 (0x0004) [0x0000000000000000]              
	float                                              m_fPrevCamFOV;                                    		// 0x01B4 (0x0004) [0x0000000000000000]              
	float                                              m_fPrevNearPlane;                                 		// 0x01B8 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bDOFSettingDisabled : 1;                        		// 0x01BC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bSavedData : 1;                                 		// 0x01BC (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventGetProceduralCam ( unsigned long bInvert, struct FVector* vCamLocation, struct FRotator* rCamRotation );
	void eventModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
	void InternalModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
	void Reset ( );
	void MakeInactive ( );
	void ForcePOV ( );
	void ShutDown ( );
	void Tick ( float TimeDelta );
};

// Class SFXGame.BioCameraBehaviorGalaxy
// 0x0178 (0x02A4 - 0x012C)
class UBioCameraBehaviorGalaxy : public UBioCameraBehavior
{
public:
	FString                                            m_sSelectableObject;                              		// 0x012C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	FString                                            m_sCenterObject;                                  		// 0x013C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	FString                                            m_sCrossHairObject;                               		// 0x014C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	FString                                            m_sCameraObject;                                  		// 0x015C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	FString                                            m_sPlanetEvent;                                   		// 0x016C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<class AActor*>                              m_pScaleformObjects;                              		// 0x017C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<class AActor*>                              m_pDynamicClusterPath;                            		// 0x018C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<class AActor*>                              m_pDynamicObjects;                                		// 0x019C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     m_vZoomLocation;                                  		// 0x01AC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vZoomDelta;                                     		// 0x01B8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    m_rZoomRotation;                                  		// 0x01C4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vLastCameraLocation;                            		// 0x01D0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pCenterObject;                                  		// 0x01DC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pCrossHairObject;                               		// 0x01E4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pCameraObject;                                  		// 0x01EC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pSelectedObject;                                		// 0x01F4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pSelectedCluster;                               		// 0x01FC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pSelectedSystem;                                		// 0x0204 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pSelectedPlanet;                                		// 0x020C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ADynamicSMActor*                             m_pTemplatePlanet;                                		// 0x0214 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBio2DA*                                     m_pClusterTable;                                  		// 0x021C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBio2DA*                                     m_pSystemTable;                                   		// 0x0224 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBio2DA*                                     m_pPlanetTable;                                   		// 0x022C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBio2DA*                                     m_pMapTable;                                      		// 0x0234 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBio2DA*                                     m_pPlotPlanetTable;                               		// 0x023C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBio2DA*                                     m_pRelayTable;                                    		// 0x0244 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMovementScalar;                                		// 0x024C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fRotationScalar;                                		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCurrentState;                                  		// 0x0254 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMaxOrbitDistance;                              		// 0x0258 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPlanarPitch;                                   		// 0x025C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fZoomTime;                                      		// 0x0260 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPlanetDescription;                             		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPlanetImageIndex;                              		// 0x0268 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPlanetMap;                                     		// 0x026C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nButtonLabel;                                   		// 0x0270 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nExitMap;                                       		// 0x0274 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nActiveWorld;                                   		// 0x0278 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nScanRange;                                     		// 0x027C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nHighlightWorld;                                		// 0x0280 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPlanetRotation;                                		// 0x0284 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPlanetEventConditional;                        		// 0x0288 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPlanetEventFunction;                           		// 0x028C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPlanetEventParameter;                          		// 0x0290 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPlanetEventTransition;                         		// 0x0294 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nPlanetEventTransParameter;                     		// 0x0298 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_srPlanetEventMessage;                           		// 0x029C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bTransitionDown : 1;                            		// 0x02A0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bFirstStage : 1;                                		// 0x02A0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bPlanetUsable : 1;                              		// 0x02A0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bPaused : 1;                                    		// 0x02A0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bRefreshPlanetUsable : 1;                       		// 0x02A0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bRebuildPlanetRingCache : 1;                    		// 0x02A0 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bSelectedPlanetLastFrame : 1;                   		// 0x02A0 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bUseInternalPlanetEvent : 1;                    		// 0x02A0 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float TimeDelta );
};

// Class SFXGame.SFXCameraModifier_ScreenShake
// 0x008B (0x0108 - 0x007D)
class USFXCameraModifier_ScreenShake : public UCameraModifier
{
public:
	TArray<struct FScreenShakeStruct>                  Shakes;                                           		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScreenShakeStruct                          TestShake;                                        		// 0x0090 (0x0078) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool ModifyCamera ( class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV );
	void UpdateScreenShake ( float DeltaTime, struct FScreenShakeStruct* Shake, struct FTPOV* OutPOV );
	void StartNewShake ( float Duration, struct FVector const& newRotAmplitude, struct FVector const& newRotFrequency, struct FVector const& newLocAmplitude, struct FVector const& newLocFrequency, float newFOVAmplitude, float newFOVFrequency );
	struct FScreenShakeStruct ComposeNewShake ( float Duration, struct FVector const& newRotAmplitude, struct FVector const& newRotFrequency, struct FVector const& newLocAmplitude, struct FVector const& newLocFrequency, float newFOVAmplitude, float newFOVFrequency );
	float InitializeOffset ( unsigned char Param );
	struct FScreenShakeStruct InitializeShake ( struct FScreenShakeStruct const& NewShake );
	void AddScreenShake ( struct FScreenShakeStruct* NewShake );
	void RemoveScreenShake ( struct SFXName ShakeName );
	void RemoveAllScreenShakes ( );
};

// Class SFXGame.SFXCameraNativeBase
// 0x0078 (0x0590 - 0x0518)
class ASFXCameraNativeBase : public ACamera
{
public:
	TArray<class USFXCameraMode*>                      CameraModes;                                      		// 0x0518 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FSFXCameraNativeBaseTraceInfo               m_aTraceInfo;                                     		// 0x0528 (0x0028) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    AdditiveRotation;                                 		// 0x0550 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    SubtractiveRotation;                              		// 0x055C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class USFXCameraMode*                              CurrentCameraMode;                                		// 0x0568 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USFXCameraMode*                              LastGoodMode;                                     		// 0x0570 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   CameraStick;                                      		// 0x0578 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   MovementStick;                                    		// 0x0580 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              AspectRatio;                                      		// 0x0588 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bDisabled : 1;                                    		// 0x058C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bIgnoreSlowMo : 1;                              		// 0x058C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUseCameraRotation : 1;                           		// 0x058C (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventAddScreenShake ( struct FScreenShakeStruct const& Shake );
	void eventCreateIPECommands ( class UBioInGamePropertyEditor* IPE, class UBioPropertyEditorBaseNode* Parent );
	float BioAdjustFOVForViewport ( float inHorizFOV, class APawn* CameraTargetPawn );
	class UCameraAnimInst* PlayCameraAnimEx ( class UCameraAnim* Anim, float Rate, float Scale, float StartTime, float BlendInTime, float BlendOutTime, unsigned long bLoop, unsigned long bRandomStartTime, float Duration, unsigned long bSingleInstance );
	void SetViewTarget ( class AActor* NewViewTarget, struct FViewTargetTransitionParams const& TransitionParams );
	class AActor* LineCheck ( unsigned long TraceActors, struct FVector const& Extent, int ExtraTraceFlags, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation, struct FVector* HitNormal, struct FVector* TraceEnd );
	struct FRotator GetRotation ( );
	void ResetHiddenActors ( );
	void TraceCamera ( struct FTViewTarget* VT );
	struct FVector WorldToScreenSnapToEdge ( float i_fSafeZoneX, float i_fSafeZoneY, struct FVector* vWorldLoc );
	struct FVector WorldToCanonicalScreen ( struct FVector* vWorldLoc );
	bool GetTrace ( class AActor** oHit, struct FVector* vLocation, struct FVector* vNormal );
};

// Class SFXGame.BioCameraShake
// 0x009A (0x00FA - 0x0060)
class UBioCameraShake : public UObject
{
public:
	struct FRawDistributionFloat                       m_rawIntensityVsDistanceDistribution;             		// 0x0060 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       m_rawFadeInDistribution;                          		// 0x0084 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       m_rawFadeOutDistribution;                         		// 0x00A8 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	class UBio2DA*                                     m_database;                                       		// 0x00CC (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct SFXName                                     m_recordId;                                       		// 0x00D4 (0x0008) [0x0000000000000000]              
	float                                              m_startTime;                                      		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_duration;                                       		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_radius;                                         		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_intensity;                                      		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fadeInDuration;                                 		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fadeOutDuration;                                		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_isRandomVariant : 1;                            		// 0x00F4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      Type;                                             		// 0x00F8 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      Variant;                                          		// 0x00F9 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioCameraShakeInterface
// 0x0000 (0x0060 - 0x0060)
class UBioCameraShakeInterface : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FRotator ComputeCameraRotationDelta ( );
};

// Class SFXGame.BioPawnCameraShakeInterface
// 0x0058 (0x00B8 - 0x0060)
class UBioPawnCameraShakeInterface : public UBioCameraShakeInterface
{
public:
	TArray<class ABioVisualEffect*>                    m_pendingRequests;                                		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0070 (0x0048) UNKNOWN PROPERTY: MapProperty SFXGame.BioPawnCameraShakeInterface.m_NodeToEffectMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnPawnDestroyed ( );
};

// Class SFXGame.BioCapability
// 0x002E (0x008E - 0x0060)
class UBioCapability : public UObject
{
public:
	class APawn*                                       m_oMember;                                        		// 0x0060 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct SFXName                                     m_nmTechnique;                                    		// 0x0068 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                m_nSubTechnique;                                  		// 0x0070 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_fRating;                                        		// 0x0074 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_fMinRange;                                      		// 0x0078 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_fMaxRange;                                      		// 0x007C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_fBestRange;                                     		// 0x0080 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              m_fTmpRange;                                      		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bCanCasterMoveDuring : 1;                       		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      m_nCapType;                                       		// 0x008C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      m_nCapMode;                                       		// 0x008D (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioCharacterImporter
// 0x0108 (0x0168 - 0x0060)
class UBioCharacterImporter : public UObject
{
public:
	struct FPlayerInfo                                 m_stockPlayerCharacter;                           		// 0x0060 (0x0040) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FPlayerInfo                                 m_overridePlayerCharacter;                        		// 0x00A0 (0x0040) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	FString                                            m_femaleActorType;                                		// 0x00E0 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	FString                                            m_maleActorType;                                  		// 0x00F0 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct SFXName                                     m_aClasses2DAName[ 0x3 ];                         		// 0x0100 (0x0018) [0x0000000000002000]              ( CPF_Transient )
	class UBio2DA*                                     m_aClasses2DA[ 0x3 ];                             		// 0x0118 (0x0018) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_aCharacter2DAName[ 0x2 ];                       		// 0x0130 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	class UBio2DA*                                     m_aCharacter2DA[ 0x2 ];                           		// 0x0140 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_nmStockCharactersPackage;                       		// 0x0150 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_nmStockClassesPackage;                          		// 0x0158 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_MAX_TALENT_PREREQS;                             		// 0x0160 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	unsigned long                                      m_isPlayerOverrideInitialized : 1;                		// 0x0164 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool FindCharacterInfoByName ( struct SFXName nmCharacter, struct SFXName nmPackage, int* Index, FString* actorTypeString, int* nIsHeadGearVisible );
	bool FindPlayerCharacterInfo ( int* Index, FString* actorTypeString, int* nIsHeadGearVisible );
	bool GetSavedPlayerInformation ( FString* actorTypeString );
	bool LoadCharacterDefinitionByIndexInternal ( class UBioPawnBehavior* oBehavior, int nCharacterID );
	bool eventLoadCharacterDefinitionByIndex ( class UBioPawnBehavior* oBehavior, int nCharacterID, struct SFXName nmPackage );
	void GetAllValuesForKey ( class UBio2DA* o2DA, struct SFXName nmKeyColumn, int nKey, struct SFXName nmValueColumn, struct FBioIntArray* oValueArray );
	void GetAllRowsAndValuesForKey ( class UBio2DA* o2DA, struct SFXName nmKeyColumn, int nKey, struct SFXName nmValueColumn, struct FBioIntArray* oRowIndexArray, struct FBioIntArray* oValueArray );
	void GetAllRowsForKey ( class UBio2DA* o2DA, struct SFXName nmKeyColumn, int nKey, struct FBioIntArray* oRowIndexArray );
	void LoadAndEquipItem ( class UBioPawnBehavior* oBehavior, unsigned char table, int Row, struct SFXName itemIDColumnName, struct SFXName sophisticationColumnName, struct SFXName nmManufacturerColumn );
	class UBioItem* LoadItem ( class UBioPawnBehavior* oBehavior, unsigned char table, int Row, struct SFXName itemIDColumnName, struct SFXName sophisticationColumnName, struct SFXName nmManufacturerColumn );
	void LoadAndEquipItemOfUnknownType ( class UBioPawnBehavior* oBehavior, unsigned char table, int Row, struct SFXName itemIDColumnName, struct SFXName sophisticationColumnName, struct SFXName nmManufacturerColumn );
	void AddAchievementUnlockedTalentTrees ( class UBioPawnBehavior* Behavior );
	bool LoadSpecializationData ( int classID, TArray<struct FBioSpecializationData>* specData );
	void LoadClassGUIInfo ( int Row, struct FBioClassGuiInfo* stGuiInfo );
	void LoadPlayableClassRows ( TArray<int>* classRows );
	void InitializePlayerOverrideInfo ( FString const& Label, unsigned char gender, FString const& PlayerName, unsigned char Origin, unsigned char Notoriety, class UBioMorphFace* Morph, int nBonusTalentID, FString const& FaceCode );
	bool LoadClassTalents ( class UBioPawnBehavior* Behavior, int classID );
	bool GetEnumEntryIN ( struct SFXName nmEnum, class UBio2DA* o2DA, int nRow, struct SFXName nmColumn, unsigned char* cValue );
	int GetRowIndex ( class UBio2DA* o2DA, int nKeyValue );
	bool LoadClasses2DAs ( struct SFXName nmPackage );
	bool LoadCharacter2DAs ( struct SFXName nmPackage );
};

// Class SFXGame.BioCombatLog
// 0x0000 (0x0060 - 0x0060)
class UBioCombatLog : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGrenade
// 0x0033 (0x03F8 - 0x03C5)
class ABioGrenade : public AWeapon
{
public:
	class UClass*                                      m_clsProjectile;                                  		// 0x03C8 (0x0008) [0x0000000000000000]              
	class USkeletalMeshComponent*                      m_Mesh;                                           		// 0x03D0 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      m_AttachedMesh;                                   		// 0x03D8 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct SFXName                                     m_AttachedBone;                                   		// 0x03E0 (0x0008) [0x0000000000000000]              
	class UBioItemGrenade*                             m_pItem;                                          		// 0x03E8 (0x0008) [0x0000000000000000]              
	class UBioDamageType*                              m_pDamage;                                        		// 0x03F0 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FVector GetLaunchPoint ( );
	class UBioItemGrenade* eventGetItem ( );
	void ClearItem ( );
	void SetItem ( class UBioItemGrenade* pItem );
	class ABioGrenadeProjectile* eventLaunchGrenade ( struct FVector const& vVelocity );
	class ABioGrenadeProjectile* eventLaunchGrenadeAtPoint ( struct FVector const& vTarget );
	class ABioGrenadeProjectile* eventLaunchGrenadeAtActor ( class AActor* oTarget );
	class ABioGrenadeProjectile* MakeProjectile ( );
	class UClass* GetProjectileClass ( );
	struct FVector GetPhysicalFireStartLoc ( struct FVector const& AimDir );
	void DetachWeaponFromMesh ( class USkeletalMeshComponent* MeshCpnt );
	void AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct SFXName BoneName );
};

// Class SFXGame.BioCheatManager
// 0x0181 (0x01F1 - 0x0070)
class UBioCheatManager : public UCheatManager
{
public:
	TArray<struct FBioDebugMessage>                    oDebugMsg;                                        		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class ABioVehicleBase*>                     m_aSpawnedVehicles;                               		// 0x0080 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<FString>                                    m_aPowerList;                                     		// 0x0090 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<struct FPowerAimingInfo>                    m_aPowerAimingInfo;                               		// 0x00A0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     m_vPawnLoc;                                       		// 0x00B0 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vPawnLocWhileIdle;                              		// 0x00BC (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vPawnLastVelocity;                              		// 0x00C8 (0x000C) [0x0000000000000000]              
	struct FVector2D                                   TopLeft;                                          		// 0x00D4 (0x0008) [0x0000000000000000]              
	class ABioArtPlaceable*                            TestAP;                                           		// 0x00DC (0x0008) [0x0000000000000000]              
	class UBioActorBehavior*                           m_profileTargetBehavior;                          		// 0x00E4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_nmPowerToProfile;                               		// 0x00EC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UTextureMovie*                               m_oUC2MovieTexture;                               		// 0x00F4 (0x0008) [0x0000000000000000]              
	class UBioInventoryViewConsole*                    m_paperDoll;                                      		// 0x00FC (0x0008) [0x0000000000000000]              
	class UBioInventoryGuiInterface*                   m_oGuiInventoryLayer;                             		// 0x0104 (0x0008) [0x0000000000000000]              
	int                                                CurrentColumn;                                    		// 0x010C (0x0004) [0x0000000000000000]              
	float                                              ColumnWidth;                                      		// 0x0110 (0x0004) [0x0000000000000000]              
	struct FColor                                      ProfileTitleColor;                                		// 0x0114 (0x0004) [0x0000000000000000]              
	struct FColor                                      ProfileHeaderColor;                               		// 0x0118 (0x0004) [0x0000000000000000]              
	struct FColor                                      ProfileTextColor;                                 		// 0x011C (0x0004) [0x0000000000000000]              
	struct FColor                                      ProfileHighlightColor;                            		// 0x0120 (0x0004) [0x0000000000000000]              
	float                                              m_fReticuleKickbackMod;                           		// 0x0124 (0x0004) [0x0000000000000000]              
	float                                              m_fReticuleDamageMod;                             		// 0x0128 (0x0004) [0x0000000000000000]              
	float                                              m_fReticuleTBase;                                 		// 0x012C (0x0004) [0x0000000000000000]              
	float                                              m_fReticuleTMax;                                  		// 0x0130 (0x0004) [0x0000000000000000]              
	float                                              m_fReticuleCBase;                                 		// 0x0134 (0x0004) [0x0000000000000000]              
	float                                              m_fReticuleCMax;                                  		// 0x0138 (0x0004) [0x0000000000000000]              
	float                                              m_fReticuleBaseAR;                                		// 0x013C (0x0004) [0x0000000000000000]              
	float                                              m_fReticulePlrLvl;                                		// 0x0140 (0x0004) [0x0000000000000000]              
	float                                              m_fReticulePlrAcc;                                		// 0x0144 (0x0004) [0x0000000000000000]              
	float                                              m_fReticuleSuppMod;                               		// 0x0148 (0x0004) [0x0000000000000000]              
	float                                              m_fReticuleWeaponMoveMod;                         		// 0x014C (0x0004) [0x0000000000000000]              
	float                                              m_fReticuleArmorMoveMod;                          		// 0x0150 (0x0004) [0x0000000000000000]              
	float                                              m_fReticuleMobilityMod;                           		// 0x0154 (0x0004) [0x0000000000000000]              
	float                                              m_fReticuleWeaponTARMod;                          		// 0x0158 (0x0004) [0x0000000000000000]              
	float                                              m_fReticuleWeaponCARMod;                          		// 0x015C (0x0004) [0x0000000000000000]              
	float                                              m_fReticuleWeaponRng0Mod;                         		// 0x0160 (0x0004) [0x0000000000000000]              
	float                                              m_fReticuleWeaponRng1Mod;                         		// 0x0164 (0x0004) [0x0000000000000000]              
	float                                              m_fReticuleWeaponRng2Mod;                         		// 0x0168 (0x0004) [0x0000000000000000]              
	float                                              m_fReticuleWeaponRng3Mod;                         		// 0x016C (0x0004) [0x0000000000000000]              
	float                                              m_fAimPitch;                                      		// 0x0170 (0x0004) [0x0000000000000000]              
	float                                              m_fAimYaw;                                        		// 0x0174 (0x0004) [0x0000000000000000]              
	int                                                m_nAimTurningDir;                                 		// 0x0178 (0x0004) [0x0000000000000000]              
	int                                                m_nPawnCurrentYaw;                                		// 0x017C (0x0004) [0x0000000000000000]              
	int                                                m_nPawnDesiredYaw;                                		// 0x0180 (0x0004) [0x0000000000000000]              
	float                                              m_fPawnRollAmt;                                   		// 0x0184 (0x0004) [0x0000000000000000]              
	float                                              m_fPawnTurnRate;                                  		// 0x0188 (0x0004) [0x0000000000000000]              
	int                                                m_nPawnCombatState;                               		// 0x018C (0x0004) [0x0000000000000000]              
	int                                                m_nAnimCombatState;                               		// 0x0190 (0x0004) [0x0000000000000000]              
	float                                              m_fMoveXAxis;                                     		// 0x0194 (0x0004) [0x0000000000000000]              
	float                                              m_fMoveYAxis;                                     		// 0x0198 (0x0004) [0x0000000000000000]              
	float                                              m_fPawnCSpeed;                                    		// 0x019C (0x0004) [0x0000000000000000]              
	float                                              m_fPawnDSpeed;                                    		// 0x01A0 (0x0004) [0x0000000000000000]              
	float                                              m_fPawnInclineMod;                                		// 0x01A4 (0x0004) [0x0000000000000000]              
	int                                                m_nPawnSkidTurnState;                             		// 0x01A8 (0x0004) [0x0000000000000000]              
	float                                              m_fPawnStartDistance;                             		// 0x01AC (0x0004) [0x0000000000000000]              
	float                                              m_fPawnElapsedTime;                               		// 0x01B0 (0x0004) [0x0000000000000000]              
	float                                              m_fPawnStartTime;                                 		// 0x01B4 (0x0004) [0x0000000000000000]              
	float                                              m_fPawnFallTime;                                  		// 0x01B8 (0x0004) [0x0000000000000000]              
	float                                              m_fPawnCalcFallTime;                              		// 0x01BC (0x0004) [0x0000000000000000]              
	float                                              m_fTacSleMoveRate;                                		// 0x01C0 (0x0004) [0x0000000000000000]              
	float                                              m_fTacSleMoveDist;                                		// 0x01C4 (0x0004) [0x0000000000000000]              
	float                                              m_fSelectionRange;                                		// 0x01C8 (0x0004) [0x0000000000000000]              
	float                                              m_fMicPos;                                        		// 0x01CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCameraStickYaw;                                		// 0x01D0 (0x0004) [0x0000000000000000]              
	float                                              m_fCameraStickPitch;                              		// 0x01D4 (0x0004) [0x0000000000000000]              
	float                                              m_fCameraStickMagnitude;                          		// 0x01D8 (0x0004) [0x0000000000000000]              
	float                                              m_fCameraStickutputPreSensitivityYaw;             		// 0x01DC (0x0004) [0x0000000000000000]              
	float                                              m_fCameraStickOutputPreSensitivityPitch;          		// 0x01E0 (0x0004) [0x0000000000000000]              
	float                                              m_fCameraStickOutputYaw;                          		// 0x01E4 (0x0004) [0x0000000000000000]              
	float                                              m_fCameraStickOutputPitch;                        		// 0x01E8 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bEnableDebugPlayerMovement : 1;                 		// 0x01EC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bReticuleIsSupp : 1;                            		// 0x01EC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bReticuleShowDebug : 1;                         		// 0x01EC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bShowTacSelDebugLine : 1;                       		// 0x01EC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bShowAnimDebug : 1;                             		// 0x01EC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bShowDebugMessages : 1;                         		// 0x01EC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bFreeMoveTackSel : 1;                           		// 0x01EC (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bLockReticule : 1;                              		// 0x01EC (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bSuperSpeedActive : 1;                          		// 0x01EC (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      m_bPawnInMount : 1;                               		// 0x01EC (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      m_bPawnInFall : 1;                                		// 0x01EC (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      m_DisplayWeaponFire : 1;                          		// 0x01EC (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      m_bDisplayWeaponFire_Persist : 1;                 		// 0x01EC (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      m_bShowPowerAiming : 1;                           		// 0x01EC (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      m_bEnablePowerRelativeVelocity : 1;               		// 0x01EC (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      m_bEnablePowerCooldown : 1;                       		// 0x01EC (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      m_bShowPowerImpactText : 1;                       		// 0x01EC (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      m_bShowPowerList : 1;                             		// 0x01EC (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      m_bVFXSoundsEnabled : 1;                          		// 0x01EC (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned char                                      m_CurrentProfiler;                                		// 0x01F0 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UseIconicShepard ( unsigned long ShouldUse );
	void Resurrect ( struct SFXName PawnName );
	void ResetDifficultyScaling ( );
	void RefreshSarenWeights ( unsigned long bRocketPoints );
	void DebugSaren ( );
	void PhotoMode ( );
	void ActivatePower ( struct SFXName Power, FString const& Target );
	void LogFaceCode ( );
	void LogSliders ( );
	void LogMorphHeadInfo ( class UBioMorphFace* MorphHead );
	class UBioMorphFace* GetCurrentPlayerMorphHead ( );
	void LogMorphHead ( struct SFXName PawnName );
	void DebugDraw_LOD ( class ABioHUD* HUD );
	void DebugLOD ( );
	void DebugDraw_WeaponFireTime ( class ABioHUD* HUD );
	void DebugWeaponFireTime ( );
	void DebugAccuracy ( );
	void DebugMagnetism ( );
	void DebugFriction ( );
	void DebugAdhesion ( );
	void DebugZoomSnap ( );
	void DebugVehicle ( );
	void RemoveAIFilter ( struct SFXName nmFilter );
	void AddAIFilter ( struct SFXName nmFilter );
	void AILog ( FString const& nmPawn, unsigned long bEnable );
	void Distance ( FString const& nmActor1, FString const& nmActor2 );
	void ProfileCamera ( );
	void ShowDebugText ( unsigned long bShow );
	void RestrictNumberOfSaves ( unsigned long bValue );
	void LogAllControllers ( );
	void LogAllPawns ( );
	void SetPlayerStabilityCurrent ( float nStabilityCurrent );
	void SetPlayerStabilityRegenRate0 ( );
	void ChangeWeapon ( int nWeapon );
	void SetAutoRightUpForceAndTorque ( float fUpLiftForce, float fUprightTorque );
	void SetVehicleCOMOffsetZ ( float fOffsetZ );
	void Mark ( FString const& sComment );
	void RecoverFromBleedOut ( );
	void ClearDebugLines ( );
	void SetRenegade ( int Points );
	void SetParagon ( int Points );
	void GameOver ( );
	void eventAddPowerAimingInfoToList ( struct FVector const& vStartLocation1, struct FVector const& vEndLocation1, struct FVector const& vStartLocation2, struct FVector const& vEndLocation2 );
	void ShowRecentPowers ( );
	void eventAddPowerInfoToList ( FString const& sPowerInfo );
	void DisplayPowerList ( class ABioHUD* oHUD );
	void ClearPowerList ( );
	void TogglePowerList ( );
	void SetVehicleExitLog ( unsigned long bStatus );
	void MakeInvulnerable ( FString const& sWhitespaceDelimitedArgs );
	void ToggleCoverMarkerDebug ( );
	void ToggleCoverAlignDebug ( );
	void ToggleCoverDebug ( );
	void SetCurvePixelError ( struct SFXName nmPanel, float fError );
	void ToggleEdgeAA ( struct SFXName nmPanel );
	void DisplayPowerImpactText ( class ABioHUD* oHUD );
	void TogglePowerImpact ( );
	void EnableBleedOut ( unsigned long B );
	void ToggleShowAlignmentGains ( );
	void SetGrenadeAttribute ( struct SFXName nmAttribute, FString const& sValue );
	void ResetTrilogyData ( );
	void ResetTrilogyStat ( int ProfileSettingId );
	void IncrementTrilogyStat ( int ProfileSettingId, int Amount );
	void UpdateEndGameAchievements ( );
	void UnlockAchievementRange ( int nLowerAchievementID, int nUpperAchievementID );
	void UnlockAchievement ( int nAchievementID );
	void InitPlotManagerValueByIndex ( int nIndex, FString const& sVariableType, float fValue );
	void DumpPlotManagerValueByIndex ( int nIndex, FString const& sVariableType );
	void InitAchievementStat ( FString const& sAchievement, int nAmount );
	void DumpAchievementStats ( );
	void EnablePowerCooldown ( unsigned long bEnable );
	void ApplyGrime ( float a_fCombatGrime, float a_fDirtGrime, float a_fGrimeGrime, struct SFXName nmPawn );
	void ShowSquadMembers ( );
	void FFScale ( float F );
	void FFEnable ( unsigned long B );
	void EnterCombatStasis ( struct SFXName nmPawn, float fDuration, unsigned long bAllowDamage );
	void UsePower ( struct SFXName nmPawn, struct SFXName nmPower );
	void SetMicPos ( float fPos );
	void UpgradeVehicle ( int nSlot, struct SFXName nmItemLabelName );
	void TogglePlayerMovementDump ( );
	void ShowMountVolumes ( unsigned long bValue );
	void EnablePowerRelativeVelocity ( int nEnable );
	void listai ( );
	void GetPlayerLocFPS ( );
	void DisplayStringID ( unsigned long i_bDisplay );
	void CodexAudit ( );
	void JournalAudit ( );
	void DebugSpawnActor ( FString const& sActorResource, float fDistanceFromPlayer, float fLifeSpan );
	void DestroySpawnedVehicles ( );
	void SpawnVehicle ( );
	void FeignDeath ( struct SFXName nmPawn, unsigned long B );
	void SetPowerAttribute ( struct SFXName nmPawn, struct SFXName nmPower, struct SFXName nmAttribute, float fValue );
	void TogglePowerAiming ( );
	void HackAI ( FString const& sWhitespaceDelimitedNamedParameters );
	void PlayXenonMovie ( FString const& sMoviePath );
	void DebugPlayerSquadCombatAI ( unsigned long bVal );
	void StasisAll ( );
	void VINCEToAreaMapGeneric ( struct SFXName genericString );
	void GiveAll ( );
	void GiveSuperArmor ( );
	void GiveSupergun ( );
	void GiveAllXmods ( );
	void GiveAllArmorHuman ( struct SFXName nmManufacturer );
	void GiveAllArmorKrogan ( struct SFXName nmManufacturer );
	void GiveAllArmorQuarian ( struct SFXName nmManufacturer );
	void GiveAllArmorTurian ( struct SFXName nmManufacturer );
	void GiveAllArmor ( struct SFXName nmManufacturer );
	void GiveAllGrenades ( struct SFXName nmManufacturer );
	void GiveAllWeapons ( struct SFXName nmManufacturer );
	void GiveAllBioAmps ( struct SFXName nmManufacturer );
	void GiveAllOmnitools ( struct SFXName nmManufacturer );
	void GuiInventoryEquip ( int nSlotListIndex );
	void GuiInventorySelect ( unsigned char eSlot );
	void GuiInventorySetTarget ( FString const& sTarget );
	void EnableCombatStateLogging ( unsigned long B );
	void EnableVFXSound ( unsigned long B );
	void SetPlayerSquadMin1Health ( unsigned long B );
	void DumpPlayPen ( );
	void GrahamDebug_HideAllPanels ( );
	void GrahamDebug_ShowAllPanels ( );
	void ToggleSFHUD ( );
	void SetSelectionHalfAngle ( float fVal );
	void PaperDoll ( FString const& whitespaceDelimitedArguments );
	void DisableOffensive ( struct SFXName nmPawn, struct SFXName subtype );
	void EnableOffensive ( struct SFXName nmPawn, struct SFXName subtype );
	void DisablePower ( struct SFXName nmPawn, struct SFXName subtype );
	void EnablePower ( struct SFXName nmPawn, struct SFXName subtype );
	void DisableAi ( struct SFXName nmPawn, struct SFXName subtype );
	void EnableAi ( struct SFXName nmPawn, struct SFXName subtype );
	void SetCharmSkill ( int nCharm );
	void GetCharmSkill ( );
	void SetIntimidateSkill ( int nIntimidate );
	void GetIntimidateSkill ( );
	void WeaponFireTrace ( unsigned long bNotPersist );
	void DownloadContent ( );
	void ShowMarketplaceUI ( );
	void AdjustCredits ( int nAmount );
	void DescribeEquipment ( struct SFXName nmTarget, FString const& sEquipment );
	void DescribeItemInQuickSlot ( struct SFXName nmTarget, int nQuickslot );
	void DescribeItem ( int nSophistication, FString const& sLabel );
	void GiveWeaponXModded ( FString const& whitespaceDelimitedArguments );
	void InitGrenades ( int nGrenades );
	void InitMedigel ( float fMedigel );
	void InitSalvage ( float fSalvage );
	void InitCredits ( int nCredits );
	class UBioItem* GiveItem ( struct SFXName nmActor, int nSophistication, struct SFXName nmItemLabel, struct SFXName nmManufacturer );
	void MSSwarm ( );
	void MSSwarmInfo ( int X, int Y, int Z );
	void TestGamePropertySys ( );
	void ValidateOwnershipSemantics ( struct SFXName TargetName, unsigned long isVerbose );
	void ResurrectTarget ( );
	void Stability ( struct SFXName Command, FString const& whitespaceDelimitedArguments );
	void ReCaps ( );
	void testfollow ( );
	void testhold ( );
	void GiveArmor ( struct SFXName nmActor, int nSophistication, struct SFXName nmArmorLabel, struct SFXName nmManufacturer );
	void FWindDir ( int nVal );
	void FWindProb ( float fVal );
	void FWindEnable ( int nVal );
	void FWindMax ( float fVal );
	void CombatWriteLog ( FString const& sVal );
	void EnableDamage ( int nVal );
	class AActor* GetHenchmanByName ( FString const& actorName );
	class AActor* GetUIWorldActor ( int Index );
	class AActor* eventGetActorFromString ( FString const& Str );
	void ToxicDmgMax ( struct SFXName nmTarget, struct SFXName nmAccess, float fModifier );
	void ToxicHealRatio ( struct SFXName nmTarget, struct SFXName nmAccess, float fModifier );
	void HealRate ( struct SFXName nmTarget, float fHealRate, float fBonusToxicHealRate );
	void HealLatent ( struct SFXName nmTarget, float fDuration );
	void HealInstant ( struct SFXName nmTarget, float fHealAmount, float fBonusToxicHealAmount );
	void Damage ( struct SFXName nmTarget, float fDamage );
	void CombatAssignTarget ( struct SFXName sActor, struct SFXName sTarget );
	void TestRagdoll ( FString const& sWhitespaceDelimitedArguments );
	void SightTo ( struct SFXName nmTarget );
	void Profile ( FString const& whitespaceDelimitedArguments );
	void DebugSpawnPrefab ( int nTestNum );
	void TestPrefab ( int nTestNum );
	void APGotoState ( struct SFXName ToState, struct SFXName optrans );
	void APShowStates ( );
	void SetDummyCreature ( );
	void BioRunTest ( FString const& TestName );
	void BioTransition ( int nTransition, int nParam );
	void BioLoadState ( int nSaveStateSlot );
	void BioSaveState ( int nSaveStateSlot );
	void BioDeleteGame ( int nSaveGameSlot );
	void BioLoadGame ( int nSaveGameSlot );
	void BioSaveGame ( int nSaveGameSlot );
	void BioSetDebugSave ( int nSet );
	void PawnControll ( struct SFXName nmAction );
	void SRange ( float fVal );
	void PickSpecialization ( );
	void GiveSpectreTalents ( );
	void ScaleTalentByIncrement ( int TalentID, int rankIncrement );
	void IncreaseTalentMaxRankByIncrement ( int TalentID, int MaxRankIncrement );
	void IncreaseTalentMaxRank ( int TalentID, int MaxRank );
	void GiveBonusTalent ( int bonusIdentifier );
	void GiveTalentPoints ( int numPoints );
	void SetVolume ( int i_VolumeType, int i_VolumeLevel );
	void ToggleSaveGameDisplayRawName ( );
	void SetSaveGameDisplayRawName ( unsigned long i_bValue );
	void SetCombatDifficulty ( int i_CombatDifficulty );
	void SetPredefinedGammaCorrectionOption ( int i_GammaSetting );
	void GiveXP ( int nValue );
	void ShowDialogData ( struct SFXName nValue );
	void SetGender ( int nValue );
	void ToggleAPCollision ( );
	class UBioPawnBehavior* GetSquadMemberBehavior ( FString const& sSquadMemberName );
	void BioEndSloMo ( int nReqID, float fExpireTime );
	void BioSloMo ( float fSpeed, float fLife, int nPriority );
	void BioSloMoTest ( );
	void SetAct ( struct SFXName intag, struct SFXName activity );
	void SetTacSelDistancel ( float fVal );
	void SetTacSelMovment ( float fVal );
	void togglefreetacsel ( );
	void QSlotPrev ( FString const& Target );
	void QSlotNext ( FString const& Target );
	void QSlotActivate ( FString const& whitespaceDelimitedArguments );
	void QSlotActivateCurrent ( FString const& whitespaceDelimitedArguments );
	int GetCurrentQuickSlotIndex ( );
	class ABioWeapon* GetQuickSlot ( int nSlot );
	class ABioPawn* GetPawn ( );
	void SDS ( struct SFXName State, struct SFXName Trans );
	void Movie ( );
	void PopUp ( FString const& S );
	void View2DA ( FString const& Str );
	void ClearAll ( );
	void TestConditionals ( );
	void ShowPathNodes ( );
	void ClearMarkers ( );
	void Player ( struct SFXName Cmd, FString const& Param );
	void BioStats ( struct SFXName Cmd, FString const& Param );
	void Party ( struct SFXName Cmd, FString const& Param );
	void BioClearCrossLevelReferences ( class ULevel* pLevel );
	void ForceEnableCCD ( unsigned long bValue );
	void SetGCDebugPackage ( FString const& sPackageName );
	void SetLocation ( FString const& sDestination );
	void GetLocation ( );
	void Suicide ( );
	void KillCurrentTarget ( );
	void SuperSpeed ( );
	void SetGroundSpeed ( float fSpeed );
	void ToggleAnimDebug ( );
	void ShowAnimationDebugInfo ( class AHUD* aHUD );
	void ShowDebugMessages ( class ABioHUD* aHUD );
	void DebugMessage ( FString const& sMessage, float Length, unsigned long Clear, class AActor* oActor, int nInt, float fFloat, struct SFXName nName );
	void RenderHUD ( class ABioHUD* aHUD );
	void ToggleTacSelDebug ( );
	void ToggleHesitation ( );
	void ToggleMountFallRules ( );
	int DrawConeReticule ( struct FVector const& vLocation, float fRadius );
	void ReticuleWeaponRng3Mod ( float fVal );
	void ReticuleWeaponRng2Mod ( float fVal );
	void ReticuleWeaponRng1Mod ( float fVal );
	void ReticuleWeaponRng0Mod ( float fVal );
	void ReticuleWeaponCARMod ( float fVal );
	void ReticuleWeaponTARMod ( float fVal );
	void ReticuleMobilityMod ( float fVal );
	void ReticuleArmorMoveMod ( float fVal );
	void ReticuleWeaponMoveMod ( float fVal );
	void ReticuleSuppMod ( float fVal );
	void ReticuleIsSupp ( unsigned long bVal );
	void ReticulePlrAcc ( float fVal );
	void ReticulePlrLvl ( float fVal );
	void ReticuleBaseAR ( float fVal );
	void ReticuleCMax ( float fVal );
	void ReticuleCBase ( float fVal );
	void ReticuleTMax ( float fVal );
	void ReticuleTBase ( float fVal );
	void ReticuleDamageMod ( float fVal );
	void ReticuleKickbackMod ( float fVal );
	void ShowReticuleDebug ( );
	void version ( );
	void ShowReticuleDebugInfo ( class AHUD* aHUD );
	void eventSetProfileColumn ( int ColumnIdx );
	float eventGetProfileColumnCoord ( );
	void eventDrawProfileText ( FString const& Text, unsigned long Highlight );
	void eventDrawProfileHeaderText ( FString const& Text, unsigned long Highlight );
	void LockRet ( );
	void AddTargetToParty ( );
	void AT ( struct SFXName newArea, struct SFXName StartPoint );
	int GetPlotZoneFromAreaName ( struct SFXName newArea );
	class ABioPlayerController* GetController ( );
	class ABioWorldInfo* getWorld ( );
};

// Class SFXGame.BioPlayerInput
// 0x015E (0x0369 - 0x020B)
class UBioPlayerInput : public UPlayerInput
{
public:
	struct FMap_Mirror                                 InputTimers;                                      		// 0x020C (0x0048) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FInterpCurveFloat                           LookStickResponseCurve;                           		// 0x0254 (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInterpCurveFloat                           MouseDampeningCurve;                              		// 0x0268 (0x0014) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<struct FStaticKeyBind>                      StaticConsoleBinds;                               		// 0x027C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FStaticKeyBind>                      StaticPCBinds;                                    		// 0x028C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FStaticKeyBind>                      FlyCamConsoleBinds;                               		// 0x029C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              AxisBuffer[ 0x6 ];                                		// 0x02AC (0x0018) [0x0000000000000000]              
	float                                              LastAxisBuffer[ 0x6 ];                            		// 0x02C4 (0x0018) [0x0000000000000000]              
	struct FVector                                     LookStick;                                        		// 0x02DC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     MoveStick;                                        		// 0x02E8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     AccumulatedAimVector;                             		// 0x02F4 (0x000C) [0x0000000000000000]              
	struct FVector2D                                   MouseSensitivityRange;                            		// 0x0300 (0x0008) [0x0000000000004000]              ( CPF_Config )
	float                                              GuiZeroTime[ 0x2 ];                               		// 0x0308 (0x0008) [0x0000000000000000]              
	float                                              GuiSmoothedMouse[ 0x2 ];                          		// 0x0310 (0x0008) [0x0000000000000000]              
	struct SFXName                                     MappedPower;                                      		// 0x0318 (0x0008) [0x0000000000000000]              
	float                                              aGuiStrafe;                                       		// 0x0320 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aGuiBaseY;                                        		// 0x0324 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aGuiTurn;                                         		// 0x0328 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aGuiLookUp;                                       		// 0x032C (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aGuiMouseX;                                       		// 0x0330 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aGuiMouseY;                                       		// 0x0334 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              MoveStickMag;                                     		// 0x0338 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LookStickMag;                                     		// 0x033C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RawJoyUpDown;                                     		// 0x0340 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              GuiDeadzone;                                      		// 0x0344 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              AccumulatedRotationSpeed;                         		// 0x0348 (0x0004) [0x0000000000000000]              
	float                                              AccumulatedRotationDecayRate;                     		// 0x034C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              GlobalStickFactor;                                		// 0x0350 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                GuiMouseSamples;                                  		// 0x0354 (0x0004) [0x0000000000000000]              
	float                                              GuiMouseSamplingTotal;                            		// 0x0358 (0x0004) [0x0000000000000000]              
	int                                                CoverRemapThresholdPC;                            		// 0x035C (0x0004) [0x0000000000000000]              
	int                                                CoverRemapThreshold;                              		// 0x0360 (0x0004) [0x0000000000000000]              
	unsigned long                                      bUseMouseDampening : 1;                           		// 0x0364 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned char                                      bWantsToZoom;                                     		// 0x0368 (0x0001) [0x0000000000000004]              ( CPF_Input )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetFlyCam ( unsigned long bOn );
	void ToggleFlyCam ( );
	bool IsCrossCircleSwapped ( );
	FString GetBind ( unsigned long Control, unsigned long Shift, unsigned long Alt, struct SFXName* Key );
	void FlushPressedKeys ( );
	bool IsCombatEnabled ( );
	bool ActivateEquip ( unsigned char eWeapon );
	bool ActivatePower ( struct SFXName nmPower, class AActor* oTarget, struct FVector const& vTargetLocation );
	void ActivateGrenade ( );
	void RemapControlsByRotation ( struct FRotator const& DeltaRot, float* NewRight, float* NewUp );
	void UpdateViewRotation ( float DeltaTime );
	void PlayerInput ( float DeltaTime );
	float SmoothGuiMouse ( float aMouse, float DeltaTime, int Index, unsigned char* SampleCount );
	void PostProcessInput ( float DeltaTime );
	void AdjustMouseSensitivity ( float FOVScale );
	void PreProcessInput ( float DeltaTime );
	float ComputeStickResponse ( float RawStickValue, class USFXCameraInput* Input, float DeltaTime );
	void eventUpdateMouseSensitivityFromSettings ( int Value );
};

// Class SFXGame.BioPlayerSelection
// 0x004A (0x00AA - 0x0060)
class UBioPlayerSelection : public UObject
{
public:
	TArray<struct FBioSelection>                       m_lSelectionsInRange;                             		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      m_oCurrentSelectionTarget;                        		// 0x0070 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_oLastSelectionTarget;                           		// 0x0078 (0x0008) [0x0000000000000000]              
	float                                              m_fSelectionConeHalfAngle;                        		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fTimeSinceSelectionChanged;                     		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fSelectionRangeClose;                           		// 0x0088 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fSelectionRangePlayer;                          		// 0x008C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fSelectionRangeVehicle;                         		// 0x0090 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fSelectionAngleClose;                           		// 0x0094 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fSelectionAngleFar;                             		// 0x0098 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fSelectionHalfAngleVehicle;                     		// 0x009C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fCamFOVScalar;                                  		// 0x00A0 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bCurrentSelectionObstructed : 1;                		// 0x00A4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bCurrentSelectionIsCombatTarget : 1;            		// 0x00A4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bCurrentSelectionIsMagneticLocked : 1;          		// 0x00A4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bOnPlayerSelectionFailed : 1;                   		// 0x00A4 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned char                                      m_eCurrentSelectionMode;                          		// 0x00A8 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_ePreviousSelectionMode;                         		// 0x00A9 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool IsSelectable ( class AActor* oTarget, class UBioEpicPawnBehavior* sourcePawnBehavior );
	void DrawSelectionReticule ( class AActor* oTarget, struct FColor const& ReticuleColor, float fOffset );
	bool IsInLineOfSightFrom ( struct FVector const& vSourceLoc, class AActor* oTarget );
	void Init ( );
	bool SetPreviousSelectionMode ( unsigned long bForceActive );
	bool SetSelectionMode ( unsigned char nSelectionMode );
	bool UpdateSelection ( float fDeltaTime );
};

// Class SFXGame.BioConversation
// 0x0264 (0x02C4 - 0x0060)
class UBioConversation : public UObject
{
public:
	struct FMap_Mirror                                 m_mapPreviousWeps;                                		// 0x0060 (0x0048) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray<int>                                        m_StartingList;                                   		// 0x00A8 (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	TArray<struct FBioDialogEntryNode>                 m_EntryList;                                      		// 0x00B8 (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	TArray<struct FBioDialogReplyNode>                 m_ReplyList;                                      		// 0x00C8 (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	TArray<struct FBioDialogSpeaker>                   m_SpeakerList;                                    		// 0x00D8 (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	TArray<struct FBioDialogLookat>                    m_LookAtList;                                     		// 0x00E8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<struct FBioDialogScript>                    m_ScriptList;                                     		// 0x00F8 (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	TArray<int>                                        m_lstCurrentReplyIndices;                         		// 0x0108 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	FString                                            m_sAreaCode;                                      		// 0x0118 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<struct FBioSavedActorPos>                   m_aFSPrevPositions;                               		// 0x0128 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	FString                                            m_sCurrentSubTitle;                               		// 0x0138 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	FString                                            m_sCurrentFaceFXAnim;                             		// 0x0148 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<class UFaceFXAnimSet*>                      m_aMaleFaceSets;                                  		// 0x0158 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class UFaceFXAnimSet*>                      m_aFemaleFaceSets;                                		// 0x0168 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<int>                                        m_aPreLoadNodesVisited;                           		// 0x0178 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<class UAnimSequence*>                       PreloadAnimations;                                		// 0x0188 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FBioNextCamData                             m_tNextCamOverride;                               		// 0x0198 (0x0038) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     vLineOfAction;                                    		// 0x01D0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pConversationOwner;                             		// 0x01DC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pConversationPlayer;                            		// 0x01E4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pSpeaker;                                       		// 0x01EC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_oPreviousSpeaker;                               		// 0x01F4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pListener;                                      		// 0x01FC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioSeqAct_StartConversation*                m_pKismetStart;                                   		// 0x0204 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioTlkFile*                                 m_oTlkFile;                                       		// 0x020C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioStage*                                   m_stage;                                          		// 0x0214 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USoundCue*                                   m_pCurrentSound;                                  		// 0x021C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UAudioComponent*                             m_pNoFaceFXAudioComp;                             		// 0x0224 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UBioTlkFileSet*                              m_oTlkFileSet;                                    		// 0x022C (0x0008) [0x0000000000000000]              
	class USequence*                                   m_pEvtSystemSeq;                                  		// 0x0234 (0x0008) [0x0000000000000000]              
	class UFaceFXAnimSet*                              m_pConvFaceFXSet;                                 		// 0x023C (0x0008) [0x0000000000000000]              
	class UFaceFXAnimSet*                              m_pNonSpeakerFaceFXSet;                           		// 0x0244 (0x0008) [0x0000000000000000]              
	struct SFXName                                     m_nmTutorialConversation;                         		// 0x024C (0x0008) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	class USoundCue*                                   m_pPreLoadingSoundCue;                            		// 0x0254 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioPawn*                                    m_pCurrentRampDownSpeaker;                        		// 0x025C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nResRefID;                                      		// 0x0264 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                m_nCurrentEntry;                                  		// 0x0268 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fStartTime;                                     		// 0x026C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nSelectedReply;                                 		// 0x0270 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nDialogMode;                                    		// 0x0274 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nSubtitlesMode;                                 		// 0x0278 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_intimacy;                                       		// 0x027C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fShowRepliesOffset;                             		// 0x0280 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fShowLastLineOffset;                            		// 0x0284 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fNodePlayTimer;                                 		// 0x0288 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fInterruptRange;                                		// 0x028C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fSubtitleTimingModifier;                        		// 0x0290 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fSubtitleTimingMinimum;                         		// 0x0294 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fVOInterruptRampDownTime;                       		// 0x0298 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nNodeStateFlags;                                		// 0x029C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fRemainingVOLength;                             		// 0x02A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fRemainingLastLineSubtitleDelay;                		// 0x02A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nDelayedReplyChoice;                            		// 0x02A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      m_colSubtitleColor;                               		// 0x02AC (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fTutorialDelay;                                 		// 0x02B0 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fAudioHitchBuffer;                              		// 0x02B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPreLoadTimer;                                  		// 0x02B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPreLoadStartDelay;                             		// 0x02BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bOneLinerConversation : 1;                      		// 0x02C0 (0x0004) [0x0000000000020001] [0x00000001] ( CPF_Edit | CPF_EditConst )
	unsigned long                                      bUseFixedCameras : 1;                             		// 0x02C0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bConversationEnded : 1;                         		// 0x02C0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bHasAttachedCameraTrack : 1;                    		// 0x02C0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bHasAttachedDOFTrack : 1;                       		// 0x02C0 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bSkipRequested : 1;                             		// 0x02C0 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bForceUnskippable : 1;                          		// 0x02C0 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bDisplayNonAmbientName : 1;                     		// 0x02C0 (0x0004) [0x0000000000006000] [0x00000080] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bSkipProtectionDisabled : 1;                    		// 0x02C0 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      m_bAmbient : 1;                                   		// 0x02C0 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      m_bDisableTargeting : 1;                          		// 0x02C0 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      m_bSkippable : 1;                                 		// 0x02C0 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      m_bFailed : 1;                                    		// 0x02C0 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      m_bInterrupted : 1;                               		// 0x02C0 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      m_bKismetInitiated : 1;                           		// 0x02C0 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      m_bConversationOver : 1;                          		// 0x02C0 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      m_bEnableLookAtWithStage : 1;                     		// 0x02C0 (0x0004) [0x0000000000006000] [0x00010000] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bPlayerIsFemale : 1;                            		// 0x02C0 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      m_bPassiveConversation : 1;                       		// 0x02C0 (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      m_bNoGestures : 1;                                		// 0x02C0 (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      m_bForceShowReplies : 1;                          		// 0x02C0 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      m_bCleanupNeeded : 1;                             		// 0x02C0 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      m_bEarlyTermination : 1;                          		// 0x02C0 (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      m_bRemoveWeapons : 1;                             		// 0x02C0 (0x0004) [0x0000000000006000] [0x00800000] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bNextLinePreLoadEnabled : 1;                    		// 0x02C0 (0x0004) [0x0000000000006000] [0x01000000] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bPlayerSexIsValid : 1;                          		// 0x02C0 (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventDisableCamera ( unsigned long bDisableCamera );
	void BioVINCE_MapName_MissingLipSync ( );
	void BioVINCE_MapName_MissingVO ( );
	unsigned char GetReplyGUIStyle ( int nIndex );
	bool FinishEntryNode ( int nEntryIndex );
	bool NeedToDisplayReplies ( );
	void StopScript ( FString const& Script );
	int GetReplyExportID ( int nIndex );
	int GetReplyCategory ( int nIndex );
	FString GetReplyParaphraseText ( int nIndex );
	FString GetReplyText ( int nIndex, unsigned long bParse );
	FString GetEntryText ( unsigned long bParse );
	class AActor* GetSpeaker ( int nIndex );
	void UpdateFacing ( );
	void UpdateLookAtTargets ( float fDeltaT );
	void UpdateLookAtList ( class ABioPawn* pBioPawn );
	void switchToAmbient ( );
	bool IsAmbient ( );
	bool WaitingForReply ( );
	bool SkipNode ( );
	bool FinishSelectedReply ( );
	bool QueueReply ( int nReply );
	bool SelectReply ( int nReply );
	bool UpdateConversation ( float fDeltaT );
	void EndConversation ( );
	bool StartConversation ( class AActor* aOwner, class AActor* aPlayer );
	class AActor* GetConversationObject ( int nObjectIndex, unsigned long bNoisyErrors );
	void SetPositionRotator ( class AActor* pActor, struct FVector const& Position, struct FRotator const& facing );
};

// Class SFXGame.BioStage
// 0x00BC (0x0340 - 0x0284)
class ABioStage : public AActor
{
public:
	TArray<struct FBioStageCameraCustom>               m_CameraCustomList;                               		// 0x0284 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AActor*                                      m_oPlacementOverride[ 0x9 ];                      		// 0x0294 (0x0048) [0x0000000000000000]              
	struct FVector                                     m_vOldPositon;                                    		// 0x02DC (0x000C) [0x0000000000000000]              
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x02E8 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioStageType*                               Type;                                             		// 0x02F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     m_sSpeakerTag;                                    		// 0x02F8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_sListenerTag;                                   		// 0x0300 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_sCurrentCamera;                                 		// 0x0308 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCameraHeightDelta;                             		// 0x0310 (0x0004) [0x0000000000000000]              
	float                                              m_fCameraPitchDelta;                              		// 0x0314 (0x0004) [0x0000000000000000]              
	float                                              m_fCameraYawDelta;                                		// 0x0318 (0x0004) [0x0000000000000000]              
	float                                              m_fCameraFOVDelta;                                		// 0x031C (0x0004) [0x0000000000000000]              
	float                                              m_fCameraNearPlaneDelta;                          		// 0x0320 (0x0004) [0x0000000000000000]              
	float                                              m_fCameraFocusInnerRadiusDelta;                   		// 0x0324 (0x0004) [0x0000000000000000]              
	float                                              m_fCameraFocusDistanceDelta;                      		// 0x0328 (0x0004) [0x0000000000000000]              
	float                                              m_fHeightAdjust;                                  		// 0x032C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fStageZ;                                        		// 0x0330 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fSpeakerFeetZ;                                  		// 0x0334 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fSpeakerEyeHeight;                              		// 0x0338 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      Enabled : 1;                                      		// 0x033C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bDoHeightAdjustment : 1;                        		// 0x033C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bLookAtActive : 1;                              		// 0x033C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bDOFActive : 1;                                 		// 0x033C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bUseOldProceduralCameraAdjust : 1;              		// 0x033C (0x0004) [0x0000000000006000] [0x00000010] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bDisableProceduralCameraAdjust : 1;             		// 0x033C (0x0004) [0x0000000000006000] [0x00000020] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bPositionLocked : 1;                            		// 0x033C (0x0004) [0x0000000000000000] [0x00000040] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void GetBestCameraPosition ( class UBioConversation* Conv, unsigned long bLineOfActionCheck, int nIntimacyLevel, struct FVector* vCamLoc, struct FRotator* vCamRot, float* fFov, float* fNearPlane, struct FBioStageDOFData* tDOFData );
	void BioVINCE_MapName_FailedStagePlacement ( );
	int CameraSpeaker ( FString const& sLabel );
	int CameraListener ( FString const& sLabel );
	class AActor* GetActorByNode ( unsigned char eNode );
	class AActor* GetActorOnNode ( int nNode );
	void GetActorStageNodePosition ( class AActor* pActor, unsigned long bPuppetsUseParentNode, struct FVector* vPosition );
	struct SFXName GetStageCamName ( unsigned char eNode );
	void GetStageCamLocRot ( unsigned char eNode, struct FVector* vCamLoc, struct FRotator* vCamRot );
	void GetStageCamDOFData ( int nCamIndex, struct FBioStageDOFData* tDOFData );
	float GetStageCamNearPlane ( int nCamIndex );
	float GetStageCamFov ( int nCamIndex );
	int GetStageCamIndex ( struct SFXName nmCamName );
	void PlaceActors ( class UBioConversation* Conv );
	void EndConversation ( );
};

// Class SFXGame.BioCoverCollisonCube
// 0x0010 (0x0230 - 0x0220)
class UBioCoverCollisonCube : public UPrimitiveComponent
{
public:
	struct FVector                                     m_vExtent;                                        		// 0x0220 (0x000C) [0x0000000000000000]              
	unsigned long                                      m_bEnabled : 1;                                   		// 0x022C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioCreatureSoundSet
// 0x0068 (0x00C8 - 0x0060)
class UBioCreatureSoundSet : public UObject
{
public:
	struct FMultiMap_Mirror                            m_mapSoundSetCueList;                             		// 0x0060 (0x0048) [0x0000000000001001]              ( CPF_Edit | CPF_Native )
	TArray<class USoundCue*>                           m_aAllCues;                                       		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	FString                                            m_sSoundSetName;                                  		// 0x00B8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioTlkFile
// 0x003C (0x009C - 0x0060)
class UBioTlkFile : public UBioBaseTlkFile
{
public:
	TArray<struct FTlkHashEntry>                       m_HashTable;                                      		// 0x0060 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray<struct FBioHuffmanDecodeNode>               m_HuffmanTree;                                    		// 0x0070 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray<struct FBioHuffmanEntry>                    m_sStringEntries;                                 		// 0x0080 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                m_nLanguageID;                                    		// 0x0090 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_nHashTableSize;                                 		// 0x0094 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      m_bDisplayStringId : 1;                           		// 0x0098 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioTlkFileSet
// 0x0050 (0x00B0 - 0x0060)
class UBioTlkFileSet : public UObject
{
public:
	struct FMap_Mirror                                 m_mapTlkFiles;                                    		// 0x0060 (0x0048) [0x0000000000001000]              ( CPF_Native )
	class UBioTlkFile*                                 m_pCurrentTlkFile;                                		// 0x00A8 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioDeathVFXCore
// 0x0000 (0x0060 - 0x0060)
class UBioDeathVFXCore : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool IsValidVFXSpec ( struct FBioDeathVFXSpec const& deathVFXSpec );
};

// Class SFXGame.BioDeathVFX
// 0x0040 (0x00A0 - 0x0060)
class UBioDeathVFX : public UBioDeathVFXCore
{
public:
	TArray<struct FBioDeathVFXSpec>                    m_aConditionalVFX;                                		// 0x0060 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FBioDeathVFXSpec                            m_VFX;                                            		// 0x0070 (0x0030) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioDeathVFXControl
// 0x0000 (0x0060 - 0x0060)
class UBioDeathVFXControl : public UBioDeathVFXCore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool AppendConditionalVFX ( class UBioDeathVFXSpecArrayWrapper* pDeathVFXSpecArrayWrapper, class UBioDeathVFXGameState* pGameState, struct SFXName nmConditionalVFX );
	bool AppendDamageVFX ( class UBioDeathVFXSpecArrayWrapper* pDeathVFXSpecArrayWrapper, class UBioDeathVFXGameState* pGameState );
	bool AppendAppearanceVFX ( class UBioDeathVFXSpecArrayWrapper* pDeathVFXSpecArrayWrapper, class UBioDeathVFXGameState* pGameState );
	bool IsValidDamageVFX ( class UBioDeathVFXGameState* pGameState );
	bool IsValidAppearanceVFX ( class UBioDeathVFXGameState* pGameState );
	void eventEvaluate ( class UBioDeathVFXSpecArrayWrapper* pDeathVFXSpecArrayWrapper, class UBioDeathVFXGameState* pGameState );
};

// Class SFXGame.BioDeathVFXGameState
// 0x0045 (0x00A5 - 0x0060)
class UBioDeathVFXGameState : public UBioDeathVFXCore
{
public:
	struct FVector                                     m_vHitLocation;                                   		// 0x0060 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vMomentum;                                      		// 0x006C (0x000C) [0x0000000000000000]              
	class AController*                                 m_pInstigatorController;                          		// 0x0078 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_pActor;                                         		// 0x0080 (0x0008) [0x0000000000000000]              
	class UBioBaseAppearance*                          m_pAppearance;                                    		// 0x0088 (0x0008) [0x0000000000000000]              
	class UBioDamageType*                              m_pDamage;                                        		// 0x0090 (0x0008) [0x0000000000000000]              
	float                                              m_fDamage;                                        		// 0x0098 (0x0004) [0x0000000000000000]              
	float                                              m_fDeathDamage;                                   		// 0x009C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIsDeathAnimationPlaying : 1;                   		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      m_eEvent;                                         		// 0x00A4 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioDeathVFXSpecArrayWrapper
// 0x0010 (0x0070 - 0x0060)
class UBioDeathVFXSpecArrayWrapper : public UBioDeathVFXCore
{
public:
	TArray<struct FBioDeathVFXSpec>                    m_a;                                              		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioDefine
// 0x0000 (0x0060 - 0x0060)
class UBioDefine : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioEquipment
// 0x004D (0x00B9 - 0x006C)
class UBioEquipment : public UBioBaseComponent
{
public:
	class UBioItemEquippable*                          m_aEquipped[ 0x5 ];                               		// 0x006C (0x0028) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class ABioWeapon*                                  m_QuickSlotArray[ 0x4 ];                          		// 0x0094 (0x0020) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      m_bIsQuickSlotActive : 1;                         		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bAreWeaponsHidden : 1;                          		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      m_eQuickSlotCurrent;                              		// 0x00B8 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventTickEquipment ( float fDeltaTime );
	void OnHide ( unsigned long bHide );
	void SetScalerMaterialParameter ( struct SFXName ParameterName, float Value );
	void SetHiddenForAllWeapons ( unsigned long shouldHide );
	bool ReattachAllWeapons ( class ABioPawn* Pawn );
	void ChangeToQuickSlot ( unsigned char Slot );
	bool ComputePrevQuickSlot ( unsigned char fromslot, unsigned char* Slot );
	bool ComputeNextQuickSlot ( unsigned char fromslot, unsigned char* Slot );
	bool PrevQuickSlot ( );
	bool NextQuickSlot ( );
	void DeactivateCurrentQuickSlot ( );
	void ActivateCurrentQuickSlot ( );
	class UBioItemWeapon* ClearQuickSlot ( unsigned char Slot );
	class UBioItemWeapon* SetQuickSlot ( unsigned char Slot, class ABioPawn* Pawn, class UBioItemWeapon* itemWeapon );
	bool IsActiveQuickSlot ( unsigned char Slot );
	bool IsQuickSlotEmpty ( unsigned char Slot );
	class ABioWeapon* GetCurrentQuickSlot ( );
	bool IsEquipped ( class UBioItemEquippable* Item );
	class UBioItemEquippable* Unequip ( unsigned char Slot );
	bool Equip ( class UBioItemEquippable* Item );
	bool GetEquipmentType ( unsigned char Slot, unsigned char* Type );
	bool GetEquipmentSlot ( unsigned char Type, unsigned char* Slot );
};

// Class SFXGame.BioEquipmentBase
// 0x003D (0x00A9 - 0x006C)
class UBioEquipmentBase : public UBioBaseComponent
{
public:
	TArray<struct FBioEquipmentBaseSlotType>           m_oEquipmentSlots;                                		// 0x006C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnEquipAction__Delegate;                        		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUnEquipAction__Delegate;                      		// 0x008C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UObject*                                     m_oDelegateObject;                                		// 0x009C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bInitialized : 1;                               		// 0x00A4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned char                                      m_eGamePropertyEvent;                             		// 0x00A8 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool ScaleEquipment ( int nSophisticationLevel );
	int GetEquippedSlotID ( class UBioItem* oItem );
	bool UnequipSlot ( int nSlot, class UBioItem** oOldItem );
	bool EquipSlot ( class UBioItem* oNewItem, int nSlot, class UBioItem** oOldItem );
	bool ClearAll ( );
	bool Initialize ( class AActor* oOwner, class UObject* oDelegateObj );
	bool OnUnEquipAction ( );
	bool OnEquipAction ( class UBioItem* oNewItem );
};

// Class SFXGame.BioEquipmentVehicle
// 0x0003 (0x00AC - 0x00A9)
class UBioEquipmentVehicle : public UBioEquipmentBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool Initialize ( class AActor* oOwner, class UObject* oDelegateObj );
};

// Class SFXGame.BioForceFeedbackPlayer
// 0x0084 (0x00E4 - 0x0060)
class UBioForceFeedbackPlayer : public UObject
{
public:
	struct FBioForceFeedbackPlayerSpec                 m_aForceFeedbackSpec[ 0x7 ];                      		// 0x0060 (0x0054) [0x000000000442000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	struct FBioForceFeedbackPlayerWeaponSpec           m_aWeaponSpec[ 0x4 ];                             		// 0x00B4 (0x0030) [0x000000000442000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioFSM
// 0x0010 (0x0070 - 0x0060)
class UBioFSM : public UObject
{
public:
	TArray<class UBioState*>                           PlaceableStates;                                  		// 0x0060 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UBioState* GetStateByIndex ( int Index );
	void DEBUG_DumpStates ( class ABioPlayerController* BPC );
	class UBioState* eventGetState ( struct SFXName RequestedState );
};

// Class SFXGame.BioFSMComponent
// 0x0041 (0x00A1 - 0x0060)
class UBioFSMComponent : public UObject
{
public:
	struct FScriptDelegate                             OnTransition;                                     		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnTransitionDelegate__Delegate;                 		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioFSM*                                     FSMData;                                          		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioState*                                   CurrentState;                                     		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioState*                                   PendingState;                                     		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioTransition*                              PendingTransition;                                		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PendingStateChange;                               		// 0x00A0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsTransitioning ( );
	void eventCallTransitionDelegate ( struct SFXName From, struct SFXName To );
	void eventTransitionStarted ( );
	bool eventHasState ( struct SFXName ToState );
	class UBioState* SetState ( struct SFXName ToState, struct SFXName NamedTransition, unsigned long IgnoreTransition, unsigned long bForceStateNow );
	class UBioTransition* eventGetTransition ( struct SFXName ToState, struct SFXName NamedTransition );
	void TransitionComplete ( );
	void OnTransitionDelegate ( struct SFXName FromState, struct SFXName ToState, unsigned long bCallCPP );
};

// Class SFXGame.BioState
// 0x0024 (0x0084 - 0x0060)
class UBioState : public UObject
{
public:
	TArray<class UBioTransition*>                      StateTransitions;                                 		// 0x0060 (0x0010) [0x0000000004420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	struct SFXName                                     StateName;                                        		// 0x0070 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct SFXName                                     AnimationName;                                    		// 0x0078 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned long                                      bFinishAnimationBeforeTransition : 1;             		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UBioTransition* GetTransition ( struct SFXName ToState, struct SFXName NamedTransition );
	bool HasTransitionTo ( struct SFXName ToState, struct SFXName NamedTransition );
};

// Class SFXGame.BioTransition
// 0x0018 (0x0078 - 0x0060)
class UBioTransition : public UObject
{
public:
	struct SFXName                                     TransitionToState;                                		// 0x0060 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct SFXName                                     TransitionOptionalName;                           		// 0x0068 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct SFXName                                     AnimationName;                                    		// 0x0070 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioEventNotifier
// 0x007C (0x00DC - 0x0060)
class UBioEventNotifier : public UObject
{
public:
	TArray<struct FBioDisplayNotice>                   m_lstNotices;                                     		// 0x0060 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<struct FBioTalentNotice>                    m_lstTalentNotices;                               		// 0x0070 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class ABioPawn*                                    TalentNoticeInputCharacter;                       		// 0x0080 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioSFHandler_MessageBox*                    m_oTalentNotifyBoxHandler;                        		// 0x0088 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBio2DA*                                     oPlotIntTalent2DA;                                		// 0x0090 (0x0008) [0x0000000000000000]              
	int                                                srTalentOk;                                       		// 0x0098 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srTalentSkipRemainder;                            		// 0x009C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srLevelUp;                                        		// 0x00A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srQuestAdded;                                     		// 0x00A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srQuestUpdated;                                   		// 0x00A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srQuestCompleted;                                 		// 0x00AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srCodexEntry;                                     		// 0x00B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srParagonReceived;                                		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srRenegadeReceived;                               		// 0x00B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srMedigel;                                        		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srSalvage;                                        		// 0x00C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srMap;                                            		// 0x00C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srAbility;                                        		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                nParagonPlotVar;                                  		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                nRenegadePlotVar;                                 		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fPassivePopupDisplayTime;                         		// 0x00D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bNoticesNotarized : 1;                          		// 0x00D8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bEnabled : 1;                                   		// 0x00D8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bTalentNoticeReady : 1;                         		// 0x00D8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bHUDAcknowledgedTalentNotify : 1;               		// 0x00D8 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void RemoveTalentNotify ( class ABioPawn* oCharacter );
	void OnTalentNoticeInput ( unsigned long bAPressed, int nContext );
	bool PendingTalentNotify ( class ABioPawn* oCharacter );
	void ShowTalentNotify ( class ABioPawn* oCharacter );
	void AddNotice ( int nType, int nContext, int nTimeToLive, int nIconIndex, int srTitle, FString const& strTitle, int nQuantity, int nQuantMin, int nQuantMax );
	void NotarizeNotices ( );
	void HasListChanged ( );
	void RetrieveNotices ( TArray<struct FBioDisplayNotice>* lstNotices );
};

// Class SFXGame.BioWorldInfo
// 0x04FE (0x0C96 - 0x0798)
class ABioWorldInfo : public AWorldInfo
{
public:
	TArray<int>                                        lstNoSaveVolumeReasons;                           		// 0x0798 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<FString>                                    GlobalTlkFiles;                                   		// 0x07A8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<class UBioTlkFile*>                         lstMaleTlkFiles;                                  		// 0x07B8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<class UBioTlkFile*>                         lstFemaleTlkFiles;                                		// 0x07C8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<class UClass*>                              lstOverlapToTouchClasses;                         		// 0x07D8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class UBioItem*>                            m_buybackItemArray;                               		// 0x07E8 (0x0010) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	FString                                            m_lootBagActorType;                               		// 0x07F8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	FString                                            m_sFriendlyName;                                  		// 0x0808 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	FString                                            m_sCinematicSkipEvent;                            		// 0x0818 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<float>                                      m_fLookAtDelays;                                  		// 0x0828 (0x0010) [0x0000000000406000]              ( CPF_Transient | CPF_Config | CPF_NeedCtorLink )
	TArray<struct FSlowMotionRequestType>              m_SlowMotionQ;                                    		// 0x0838 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FWorldStreamingState>                m_WorldStreamingStates;                           		// 0x0848 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FVFXTemplatePoolSizeSpec>            m_VFXTemplatePoolSizeOverride;                    		// 0x0858 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	TArray<struct FVFXListNode>                        m_BoughtVFXList;                                  		// 0x0868 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<FString>                                    lstStateEventMapNames;                            		// 0x0878 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<FString>                                    lstConsequenceMapNames;                           		// 0x0888 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<FString>                                    lstOutcomeMapNames;                               		// 0x0898 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<FString>                                    lstQuestMapNames;                                 		// 0x08A8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<FString>                                    lstCodexMapNames;                                 		// 0x08B8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	FString                                            InGameManualMapName;                              		// 0x08C8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<class UBioStateEventMap*>                   lstStateEventMaps;                                		// 0x08D8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class UBioStateEventMap*>                   lstConsequenceMaps;                               		// 0x08E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class UBioOutcomeMap*>                      lstOutcomeMaps;                                   		// 0x08F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class UBioQuestMap*>                        lstQuestMaps;                                     		// 0x0908 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class UBioCodexMap*>                        lstCodexMaps;                                     		// 0x0918 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<FString>                                    m_lstCinematicsSeen;                              		// 0x0928 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	FString                                            m_sDestinationAreaMap;                            		// 0x0938 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<int>                                        m_pScannedClusters;                               		// 0x0948 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<int>                                        m_pScannedSystems;                                		// 0x0958 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<int>                                        m_pScannedPlanets;                                		// 0x0968 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<class UBioPawnBehavior*>                    m_oResetBehaviors;                                		// 0x0978 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<class UBioActorBehavior*>                   m_aOrphanedBehaviors;                             		// 0x0988 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<class ABioMusicVolume*>                     BioRegisteredMusic;                               		// 0x0998 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __TutorialCompletionCallback__Delegate;           		// 0x09A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x09B8 (0x0048) UNKNOWN PROPERTY: MapProperty SFXGame.BioWorldInfo.m_mVFXPool
	unsigned char                                      UnknownData01[ 0x48 ];                            		// 0x0A00 (0x0048) UNKNOWN PROPERTY: MapProperty SFXGame.BioWorldInfo.m_BoughtVFXMap
	struct FWorldEnvironmentEffect                     m_ActiveEnvironmentEffect;                        		// 0x0A48 (0x0030) [0x0000000000000000]              
	struct FWorldEnvironmentEffect                     m_PendingEnvironmentEffect;                       		// 0x0A78 (0x0030) [0x0000000000000000]              
	struct FBoughtVFXListEnds                          m_aBoughtEffects[ 0x5 ];                          		// 0x0AA8 (0x0028) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FVector                                     m_vDestination;                                   		// 0x0AD0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class ABioPlayerSquad*                             m_playerSquad;                                    		// 0x0ADC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioSaveGame*                                CurrentGame;                                      		// 0x0AE4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      oPlayerSavePosOverride;                           		// 0x0AEC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioTimerList*                               TimerList;                                        		// 0x0AF4 (0x0008) [0x0000000000000000]              
	class UBioGlobalVariableTable*                     m_oGlobalVariables;                               		// 0x0AFC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioQuestProgressionMap*                     m_oQuestProgress;                                 		// 0x0B04 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioDiscoveredCodexMap*                      m_oDiscoveredCodex;                               		// 0x0B0C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioCodexMap*                                m_oInGameManual;                                  		// 0x0B14 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioConversation*                            m_oCurrentConversation;                           		// 0x0B1C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioSeqAct_FaceOnlyVO*                       m_pCurrentFaceOnlyVO;                             		// 0x0B24 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioPlayerController*                        LocalPlayerController;                            		// 0x0B2C (0x0008) [0x0000000000000000]              
	struct SFXName                                     m_lootBagTag;                                     		// 0x0B34 (0x0008) [0x0000000000000000]              
	class UBioSubtitles*                               m_Subtitles;                                      		// 0x0B3C (0x0008) [0x0000000000000000]              
	class UGFxMovieInfo*                               m_oAreaMap;                                       		// 0x0B44 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UGFxMovieInfo*                               m_oParentAreaMap;                                 		// 0x0B4C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioBaseSquad*                               m_oDefaultSquad;                                  		// 0x0B54 (0x0008) [0x0000000000000000]              
	class ABioBaseSquad*                               m_oPlayerSquad;                                   		// 0x0B5C (0x0008) [0x0000000000000000]              
	class ABioArtPlaceable*                            ArtPlaceableList;                                 		// 0x0B64 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UBioInGamePropertyEditor*                    m_oPropertyEditor;                                		// 0x0B6C (0x0008) [0x0000000000000000]              
	class UBio2DA*                                     oTutorials2DA;                                    		// 0x0B74 (0x0008) [0x0000000000000000]              
	class UAudioComponent*                             m_pEndGameMusic;                                  		// 0x0B7C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USoundCue*                                   m_pEndGameMusicSoundCue;                          		// 0x0B84 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UBioEventNotifier*                           EventNotifier;                                    		// 0x0B8C (0x0008) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	class UBioInventory*                               m_oPendingLoot;                                   		// 0x0B94 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioInventory*                               m_oMomentaryLoot;                                 		// 0x0B9C (0x0008) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	class UBioPhysicsSounds*                           m_PhysicsSound;                                   		// 0x0BA4 (0x0008) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	class UBioUIWorld*                                 m_UIWorld;                                        		// 0x0BAC (0x0008) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioSkillGame*                               m_SkillGame;                                      		// 0x0BB4 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioPowerManager*                            m_oPowerManager;                                  		// 0x0BBC (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                WindEnableFake;                                   		// 0x0BC4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              WindGustChance;                                   		// 0x0BC8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                WindBase;                                         		// 0x0BCC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                WindMax;                                          		// 0x0BD0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              WindShortestGustTime;                             		// 0x0BD4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              WindLongestGustTime;                              		// 0x0BD8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                WindBaseYaw;                                      		// 0x0BDC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fFakeWindGustTime;                              		// 0x0BE0 (0x0004) [0x0000000000000000]              
	float                                              m_fFakeWindGustCalcTime;                          		// 0x0BE4 (0x0004) [0x0000000000000000]              
	float                                              m_fFakeWindCurGustLength;                         		// 0x0BE8 (0x0004) [0x0000000000000000]              
	float                                              m_fFakeWindMag;                                   		// 0x0BEC (0x0004) [0x0000000000000000]              
	int                                                m_nWindYaw;                                       		// 0x0BF0 (0x0004) [0x0000000000000000]              
	float                                              m_nWindGrowthA;                                   		// 0x0BF4 (0x0004) [0x0000000000000000]              
	float                                              m_nWindGrowthB;                                   		// 0x0BF8 (0x0004) [0x0000000000000000]              
	int                                                nNoSaveVolumeCount;                               		// 0x0BFC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                srNoSaveReason;                                   		// 0x0C00 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                srDefaultNoSaveReason;                            		// 0x0C04 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srNoSaveInCombat;                                 		// 0x0C08 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srNoSaveWhenVehicleBadPlace;                      		// 0x0C0C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nJournalLastSelectedMission;                    		// 0x0C10 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nJournalLastSelectedAssignment;                 		// 0x0C14 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCodexLastSelectedPrimary;                      		// 0x0C18 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCodexLastSelectedSecondary;                    		// 0x0C1C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fNoBrowserWheelTimer;                           		// 0x0C20 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_buybackArrayMaxSize;                            		// 0x0C24 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fCinematicStartTime;                            		// 0x0C28 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nMiniGameID;                                    		// 0x0C2C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nScalePawnsToCharacterLevel;                    		// 0x0C30 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fConversationInterruptDistance;                 		// 0x0C34 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fIdleCameraSpeed;                               		// 0x0C38 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fNoSkipBuffer;                                  		// 0x0C3C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fLookAtNoticeMaxRange;                          		// 0x0C40 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fLookAtNoticeInitialDelay;                      		// 0x0C44 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fLookAtNoticeDuration;                          		// 0x0C48 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fLookAtNoticeSpeed;                             		// 0x0C4C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nCurrentTipID;                                  		// 0x0C50 (0x0004) [0x0000000000000000]              
	int                                                m_OverrideTip;                                    		// 0x0C54 (0x0004) [0x0000000000000000]              
	int                                                m_srProfileNotSignedInWarningMsg;                 		// 0x0C58 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nSlowMotionState;                               		// 0x0C5C (0x0004) [0x0000000000000000]              
	float                                              m_fCurrentSlomo;                                  		// 0x0C60 (0x0004) [0x0000000000000000]              
	float                                              m_fInterpStepSize;                                		// 0x0C64 (0x0004) [0x0000000000000000]              
	int                                                m_nNextAssignableID;                              		// 0x0C68 (0x0004) [0x0000000000000000]              
	float                                              m_fMaxVFXBudget;                                  		// 0x0C6C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fUsedVFXBudget;                                 		// 0x0C70 (0x0004) [0x0000000000000000]              
	int                                                srTutorialOK;                                     		// 0x0C74 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fGameOverPauseTime;                             		// 0x0C78 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                bForceFullGarbageCollection;                      		// 0x0C7C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nDesignerEnableTutorialPlotFlag;                		// 0x0C80 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nDesignerEnableDifficultyChecksPlotFlag;        		// 0x0C84 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	unsigned long                                      bStreamingLevelsResorted : 1;                     		// 0x0C88 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bAllowTreasureLogging : 1;                      		// 0x0C88 (0x0004) [0x0000000000004002] [0x00000002] ( CPF_Const | CPF_Config )
	unsigned long                                      bDesignerSaysNoSave : 1;                          		// 0x0C88 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bSystemNoSave : 1;                                		// 0x0C88 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bJournalShowingMissions : 1;                    		// 0x0C88 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bCodexShowingPrimary : 1;                       		// 0x0C88 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bBuildLongPathsForMap : 1;                      		// 0x0C88 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      m_bCinematicSkip : 1;                             		// 0x0C88 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      m_bDisableCinematicSkip : 1;                      		// 0x0C88 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      m_bForceCinematicDamage : 1;                      		// 0x0C88 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      m_bFlushSFHud : 1;                                		// 0x0C88 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      m_bCauseUnscaledDamage : 1;                       		// 0x0C88 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      m_bDebugCameras : 1;                              		// 0x0C88 (0x0004) [0x0000000000004000] [0x00001000] ( CPF_Config )
	unsigned long                                      m_bShowAlignmentGains : 1;                        		// 0x0C88 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      m_bPartyMembersImmuneToExternalForce : 1;         		// 0x0C88 (0x0004) [0x0000000000004000] [0x00004000] ( CPF_Config )
	unsigned long                                      m_bSetGameSpeed : 1;                              		// 0x0C88 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      m_bForceDisableTutorials : 1;                     		// 0x0C88 (0x0004) [0x0000000000004000] [0x00010000] ( CPF_Config )
	unsigned long                                      m_bPausedByFocusLoss : 1;                         		// 0x0C88 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      m_bWaitingForStreamingLoadIdle : 1;               		// 0x0C88 (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      m_bWaitingForStreamingLoadVisibleComplete : 1;    		// 0x0C88 (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      m_bHasPlayerTeleported : 1;                       		// 0x0C88 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      m_bShowVinceSurveys : 1;                          		// 0x0C88 (0x0004) [0x0000000000004000] [0x00200000] ( CPF_Config )
	unsigned long                                      m_bMessageBoxTutorialVisible : 1;                 		// 0x0C88 (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      m_bLastSaveCreatorInvalid : 1;                    		// 0x0C88 (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      m_bLastProfileCreatorInvalid : 1;                 		// 0x0C88 (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      m_bGameWasPaused : 1;                             		// 0x0C88 (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )
	unsigned long                                      bTriggeredGameOver : 1;                           		// 0x0C88 (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	unsigned char                                      m_lstBrowserAlerts[ 0x8 ];                        		// 0x0C8C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_nJournalSortMethod;                             		// 0x0C94 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_LevelType;                                      		// 0x0C95 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventSetPlayersControllerId ( class ULocalPlayer* Player, int ControllerId );
	void eventStartNoBrowserWheelTimer ( );
	bool SaveGamesExist ( );
	void eventUpdateLowestCombatDifficulty ( );
	void eventBioStartMatch ( );
	class UClass* GetSaveObjectClass ( );
	void OnPlayerSquadDeath ( );
	void EndGame ( int srGameOverString );
	void OnSaveGameNotFound ( class UObject* oDelegateObject, struct SFXName nmDelegateFunctionName );
	void GetGlobalEvents ( class UClass* EventClass, TArray<class USequenceEvent*>* aEvents );
	void SetSoundGroupPitch ( struct SFXName SoundGroupName, float fPitch );
	float GetSoundGroupPitch ( struct SFXName SoundGroupName );
	void SetSoundGroupPriority ( struct SFXName SoundGroupName, float fPriority );
	float GetSoundGroupPriority ( struct SFXName SoundGroupName );
	void SetSoundGroupVolume ( struct SFXName SoundGroupName, float fVolume, float fFadeDuration );
	float GetSoundGroupVolume ( struct SFXName SoundGroupName );
	bool GetIsOriginalFileCreator ( );
	void SetInvalidSaveFileCreator ( unsigned char nSaveFileType, unsigned long bInvalid );
	void SetDisplayRealSaveGameNames ( unsigned long i_bValue );
	bool GetDisplayRealSaveGameNames ( );
	void SetGuiStartupSystemsInitialized ( unsigned long i_bValue );
	bool GetGuiStartupSystemsInitialized ( );
	void SetRenderStateOfPlayerToDefault ( unsigned char RenderState );
	void SetRenderStateOfPlayer ( unsigned char RenderState, float fValue );
	float GetRenderStateOfPlayer ( unsigned char RenderState );
	void UpdateEnvironmentEffects ( float fDeltaT );
	void UpdateSubtitles ( float fDeltaT );
	class UBioSubtitles* GetSubtitles ( );
	void ApplyWind ( float fDeltaT );
	void AdjustWind ( float fDeltaT );
	void DoFakeWind ( float fDeltaT );
	void PrintSlowMotionQ ( );
	void ClearAllSlowMotion ( );
	bool EndSlowMoRequest ( int nReqID, float fExpireTime );
	int RequestSlowMotion ( float fSpeed, float fLifeTime, int nPriority );
	void UpdateSlowMotionQ ( float fDeltaTime );
	void SetGlobalTlk ( unsigned long bMale, unsigned long bPurge );
	void LoadDLCTlkFiles ( unsigned long bMale, unsigned long bFemale, unsigned long bAddMale, unsigned long bAddFemale );
	void LoadTlkFiles ( unsigned long bMale, unsigned long bFemale, unsigned long bAddMale, unsigned long bAddFemale );
	void eventBioBeginPlay ( );
	bool IsAbleToSave ( FString* sReason );
	bool eventCheckState ( int nState );
	void InterruptConversation ( class UBioConversation* oConv );
	void UpdateConversation ( float fDeltaT );
	void EndCurrentFaceOnlyVO ( class UBioSeqAct_FaceOnlyVO* pFOVO );
	void EndCurrentConversation ( );
	bool StartConversation ( class UBioConversation* oConv, class AActor* Owner_, class AActor* Target );
	class UBioConversation* eventGetConversation ( );
	void eventClearCurrentGame ( unsigned long bRestorGamerProfilePlotManagerVariables );
	class UBioGlobalVariableTable* GetGlobalVariables ( );
	class UBioGamerProfile* GetBioGamerProfile ( );
	void InitDownloadableContent ( );
	void InitGUIDependentStartupSystems ( class UBioSFPanel* i_oPanel );
	void Tick ( float fDeltaT );
	bool HasFocus ( );
	bool LootBagActivated ( );
	bool CreateLootBag ( class ULevel* spawnLevel, FString const& actorTypeString, struct FVector* SpawnLocation );
	class ABioPlayerController* GetLocalPlayerController ( );
	void TutorialCompletionCallback ( );
	void BioVINCE_MapName_PlayerDeath ( );
	void PlayEndGameMusic ( );
	void OnBioMatchStart ( );
	class UBioCharacterImporter* GetCharacterImporter ( );
	void UpdateVFXPools ( float fDeltaT );
	void UpdateVFXStats ( float fDeltaT );
	bool CheckResetBehavior ( class UBioPawnBehavior* pBehavior );
	void ClearResetBehaviors ( );
	void OverrideVFXPoolSize ( class UBioVFXTemplate* a_pEffect, int a_nMaxPoolSize, int a_nMinPoolSize );
	void GetDefaultVFXPoolSize ( class UBioVFXTemplate* a_pEffect, int* a_rnMaxPoolSize, int* a_rnMinPoolSize );
	class UBioVisualEffectPool* GetVFXPool ( class UBioVFXTemplate* pEffect );
	void OnGameLoaded ( );
	void InitializeForPlay ( );
	FString GetDetailedVersionString ( );
	FString GetEpicVersionString ( );
	FString GetVersionString ( );
	void MoveToArea ( struct SFXName sAreaName, struct SFXName sNextAreaStartPoint );
	void AllBioActors ( struct SFXName MatchTag, class AActor** Actor );
	bool GetLocalBoolVariable ( unsigned char eObjectType, struct SFXName GetFunctionName, struct SFXName sTag );
	float GetLocalFloatVariable ( unsigned char eObjectType, struct SFXName GetFunctionName, struct SFXName sTag );
	int GetLocalIntegerVariable ( unsigned char eObjectType, struct SFXName GetFunctionName, struct SFXName sTag );
	void ExecuteConsequence ( int nConsequence, int nParam );
	void ExecuteStateTransition ( int nTransition, int nParam );
	bool CheckConditional ( int nConditional, int nParam );
	void eventCauseEvent ( struct SFXName EventName );
	void TutorialDismissed ( unsigned long bAButtonPressed, int nContext );
	bool GetGuiInputPermission ( unsigned char nEvent );
	void CancelTutorial ( unsigned long bFadeOut, struct SFXName nmTutorial );
	void ClearTutorialsViewed ( );
	bool IsTutorialRunning ( struct SFXName nmTutorial );
	bool GetTutorialViewed ( struct SFXName nmTutorial );
	void SetTutorialViewed ( struct SFXName nmTutorial );
	void ShowTutorialMessageBox ( class UObject* pCallbackObject, struct SFXName nmCallbackFunction, int srTutorial );
	bool ShowTutorial ( struct SFXName nmTutorial, unsigned long bSetViewed, class UObject* oCallbackObject, struct SFXName oCallbackFunction, unsigned long i_bIgnoreDesignerSuppression );
	void ShowTutorialOverride ( int srTutorialId );
	void SetHasShownPRCMessage ( unsigned long i_bValue );
	bool GetHasShownPRCMessage ( );
	bool GetChallengeLevel ( int* challengeLevel );
	float GetBuybackItemPriceAtIndex ( int Index );
	class UBioItem* RemoveBuybackItem ( int Index );
	void AppendBuybackItemsToInventory ( class UBioInventory** Inventory );
	void AddBuybackItem ( class UBioItem* Item );
	void SetDebugSave ( int nSet );
	void BioDeleteGame ( int nSaveGameSlot );
	void BioLoadGame ( int nSaveGameSlot );
	void BioSaveGame ( int nSaveGameSlot, struct SFXName sArea, unsigned long bStartFromCurrentPosition, struct SFXName sNextAreaStartPoint );
	void OnNewGameStartRequest ( );
	bool TriggerCinematicSkippedEvent ( );
};

// Class SFXGame.BioPartyInfo
// 0x000C (0x006C - 0x0060)
class UBioPartyInfo : public UObject
{
public:
	int                                                m_nCredits;                                       		// 0x0060 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              m_fMediGel;                                       		// 0x0064 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              m_fBlackSand;                                     		// 0x0068 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSPGame
// 0x0024 (0x04D4 - 0x04B0)
class ABioSPGame : public AGameInfo
{
public:
	class UClass*                                      DefaultHenchPawnClass;                            		// 0x04B0 (0x0008) [0x0000000000000000]              
	class UBioPlayerInput*                             m_oPlayerInput;                                   		// 0x04B8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UTextureMovie*                               m_oTextureMovie;                                  		// 0x04C0 (0x0008) [0x0000000000000000]              
	int                                                EnableCombatLogging;                              		// 0x04C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                EnableDamage;                                     		// 0x04CC (0x0004) [0x0000000000000000]              
	int                                                srGameOverString;                                 		// 0x04D0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SpawnGameOverGUI ( );
	void AdjustHeightOfPawnSpawnedAtNavigationPoint ( class APawn* Pawn, class ANavigationPoint* SpawnPoint );
	class ABioPawn* SpawnPawn ( FString const& TheActorType, struct FVector const& SpawnLocation, struct FRotator const& SpawnRotation, unsigned long bIsPlayer );
	class ABioPawn* eventSpawnHenchman ( struct SFXName pawnTag, class AActor* Player, float backOffset, float sideOffset, unsigned long spawnLeft );
	class ABioPawn* SpawnPlayer ( class ABioPlayerController* PlayerController, class ANavigationPoint* playerSpawnPoint );
	class APawn* SpawnPlayerSquadMembers ( class ABioPlayerController* PlayerController, class ANavigationPoint* SpawnPoint );
	void LoadPackage ( FString const& PackageName );
	class APawn* SpawnDefaultPawnFor ( class AController* NewPlayer, class ANavigationPoint* SpawnPoint );
	void SetPlayerDefaults ( class APawn* PlayerPawn );
	bool PreventDeath ( class APawn* Killed_, class AController* Killer_, class UClass* DamageType, struct FVector const& HitLocation );
	void Reset ( );
	class ANavigationPoint* FindPlayerStart ( class AController* Player, unsigned char InTeam, FString const& IncomingName );
	class ANavigationPoint* FindStartingNavPoint ( struct SFXName nmStartPoint );
	void PreloadPackage ( FString const& TheActorType );
	FString GetSimpleString ( int StrRef, unsigned long bParse );
	void CalculateHenchmanSpawn ( class AActor* Player, float backOffset, float sideOffset, unsigned long spawnLeft, struct FVector* SpawnPoint, struct FRotator* SpawnRotation );
	void SetupPartyMemberAttributes ( class UBioPawnBehavior* Behavior, class UClass* attributesClass );
	void ChallengeScalePersistentLevelPawns ( );
};

// Class SFXGame.BioGameEffect
// 0x0029 (0x0089 - 0x0060)
class UBioGameEffect : public UObject
{
public:
	TArray<int>                                        m_aEffectLevelsRows;                              		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct SFXName                                     m_nmGameEffectName;                               		// 0x0070 (0x0008) [0x0000000000000000]              
	class UBio2DA*                                     m_pEffectLevels2DA;                               		// 0x0078 (0x0008) [0x0000000000000000]              
	int                                                m_nGameEffectId;                                  		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                m_nMaxRanks;                                      		// 0x0084 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_priority;                                       		// 0x0088 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Unapply ( class UObject* oTarget );
	class UObject* Apply ( class UObject* oTarget );
	class AActor* GetActorFromTarget ( class UObject* oTarget );
	void Scale ( int nRank );
	void SetScalingData ( class UBio2DA* pEffectLevels2DA, TArray<int>* aEffectLevelRows, int* maxRanks );
	void eventUpdate ( class UObject* oTarget );
	void eventTick ( class UObject* oTarget, float fDeltaTime );
};

// Class SFXGame.BioGameEffectAddForce
// 0x004F (0x00D8 - 0x0089)
class UBioGameEffectAddForce : public UBioGameEffect
{
public:
	struct FVector                                     m_vForce;                                         		// 0x008C (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vPosition;                                      		// 0x0098 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vDestination;                                   		// 0x00A4 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vDeceleration;                                  		// 0x00B0 (0x000C) [0x0000000000000000]              
	struct SFXName                                     m_nmBoneName;                                     		// 0x00BC (0x0008) [0x0000000000000000]              
	class AActor*                                      m_oInstigator;                                    		// 0x00C4 (0x0008) [0x0000000000000000]              
	float                                              m_fMinVelocity;                                   		// 0x00CC (0x0004) [0x0000000000000000]              
	float                                              m_fTimeElapsed;                                   		// 0x00D0 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bDecelerate : 1;                                		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bApplyToAllBones : 1;                           		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bApplied : 1;                                   		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bDestinationReached : 1;                        		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct SFXName GetClosestBone ( class AActor* oTarget );
	void Decelerate ( class AActor* oActor );
	void Tick ( class UObject* oTarget, float fDeltaTime );
	void Unapply ( class UObject* oTarget );
	class UObject* Apply ( class UObject* oTarget );
	void eventCreate ( class UBioGameProperty* oProperty, struct FVector const& vForce, struct SFXName nmBoneName, struct FVector const& vPosition, struct FVector const& vDestination, unsigned long bDecelerateAtDestination, struct FVector const& vDeceleration, float fMinVelocity, class AActor* oInstigator, unsigned long bApplyToAllBones );
};

// Class SFXGame.BioGameEffectAddItemProperty
// 0x0007 (0x0090 - 0x0089)
class UBioGameEffectAddItemProperty : public UBioGameEffect
{
public:
	int                                                m_nItemPropertyID;                                		// 0x008C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Unapply ( class UObject* oTarget );
	class UObject* Apply ( class UObject* oTarget );
};

// Class SFXGame.BioGameEffectAdjustStability
// 0x0007 (0x0090 - 0x0089)
class UBioGameEffectAdjustStability : public UBioGameEffect
{
public:
	float                                              m_fAmount;                                        		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UObject* Apply ( class UObject* oTarget );
	void Create ( class UBioGameProperty* oProperty, float fAmount );
};

// Class SFXGame.BioGameEffectAttribute
// 0x0010 (0x0099 - 0x0089)
class UBioGameEffectAttribute : public UBioGameEffect
{
public:
	struct SFXName                                     m_attributeName;                                  		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nIndex;                                         		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_type;                                           		// 0x0098 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct SFXName eventGetPowerName ( );
	class UBioAttributes* GetAttributes ( class UObject* oTarget );
	void Unapply ( class UObject* oTarget );
	class UObject* Apply ( class UObject* oTarget );
};

// Class SFXGame.BioGameEffectAttributeBool
// 0x0007 (0x00A0 - 0x0099)
class UBioGameEffectAttributeBool : public UBioGameEffectAttribute
{
public:
	unsigned long                                      m_value : 1;                                      		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bSetToOppositeOnUnapply : 1;                    		// 0x009C (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventCreate ( class UBioGameProperty* oProperty, unsigned long bValue, struct SFXName nmAttributeName, unsigned char eType, unsigned long bSetToOppositeOnUnapply );
	void Unapply ( class UObject* oTarget );
	class UObject* Apply ( class UObject* oTarget );
};

// Class SFXGame.BioGameEffectPowerAttributeBool
// 0x0008 (0x00A8 - 0x00A0)
class UBioGameEffectPowerAttributeBool : public UBioGameEffectAttributeBool
{
public:
	struct SFXName                                     m_powerName;                                      		// 0x00A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct SFXName eventGetPowerName ( );
	void Unapply ( class UObject* oTarget );
	class UObject* Apply ( class UObject* oTarget );
};

// Class SFXGame.BioGameEffectAttributeByte
// 0x0008 (0x00A1 - 0x0099)
class UBioGameEffectAttributeByte : public UBioGameEffectAttribute
{
public:
	unsigned long                                      m_bZeroOnUnapply : 1;                             		// 0x009C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      m_value;                                          		// 0x00A0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventCreate ( class UBioGameProperty* oProperty, unsigned char Value, struct SFXName nmAttributeName, unsigned char eType, unsigned long bZeroOnUnapply );
	void Unapply ( class UObject* oTarget );
	class UObject* Apply ( class UObject* oTarget );
};

// Class SFXGame.BioGameEffectAttributeName
// 0x000F (0x00A8 - 0x0099)
class UBioGameEffectAttributeName : public UBioGameEffectAttribute
{
public:
	struct SFXName                                     m_nmValue;                                        		// 0x009C (0x0008) [0x0000000000000000]              
	unsigned long                                      m_bSetToNoneOnUnapply : 1;                        		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventCreate ( class UBioGameProperty* oProperty, struct SFXName nmValue, struct SFXName nmAttributeName, unsigned char eType, unsigned long bSetToNoneOnUnapply );
	void Unapply ( class UObject* oTarget );
	class UObject* Apply ( class UObject* oTarget );
};

// Class SFXGame.BioGameEffectAttributeNumeric
// 0x0009 (0x00A2 - 0x0099)
class UBioGameEffectAttributeNumeric : public UBioGameEffectAttribute
{
public:
	int                                                m_baseOverrideIndex;                              		// 0x009C (0x0004) [0x0000000000000000]              
	unsigned char                                      m_aspect;                                         		// 0x00A0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_modifier;                                       		// 0x00A1 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Unapply ( class UObject* oTarget );
	class UObject* Apply ( class UObject* oTarget );
};

// Class SFXGame.BioGameEffectAttributeFloat
// 0x0006 (0x00A8 - 0x00A2)
class UBioGameEffectAttributeFloat : public UBioGameEffectAttributeNumeric
{
public:
	float                                              m_value;                                          		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventCreate ( class UBioGameProperty* GP, float fValue, struct SFXName nmAttributeName, unsigned char eAspect, unsigned char eModifier, unsigned char eType, int nIndex );
	void Unapply ( class UObject* oTarget );
	class UObject* Apply ( class UObject* oTarget );
};

// Class SFXGame.BioGameEffectPowerAttributeFloat
// 0x0008 (0x00B0 - 0x00A8)
class UBioGameEffectPowerAttributeFloat : public UBioGameEffectAttributeFloat
{
public:
	struct SFXName                                     m_powerName;                                      		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct SFXName eventGetPowerName ( );
	void Unapply ( class UObject* oTarget );
	class UObject* Apply ( class UObject* oTarget );
};

// Class SFXGame.BioGameEffectPowerParameter
// 0x0008 (0x00B0 - 0x00A8)
class UBioGameEffectPowerParameter : public UBioGameEffectAttributeFloat
{
public:
	struct SFXName                                     m_powerName;                                      		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct SFXName eventGetPowerName ( );
	void Unapply ( class UObject* oTarget );
	class UObject* Apply ( class UObject* oTarget );
};

// Class SFXGame.BioGameEffectAttributeInt
// 0x000A (0x00AC - 0x00A2)
class UBioGameEffectAttributeInt : public UBioGameEffectAttributeNumeric
{
public:
	int                                                m_value;                                          		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bSetToZeroOnUnapply : 1;                        		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventCreate ( class UBioGameProperty* GP, int nValue, struct SFXName nmAttributeName, unsigned char eAspect, unsigned char eModifier, unsigned char eType, int nIndex, unsigned long bSetToZeroOnUnapply );
	void Unapply ( class UObject* oTarget );
	void RemoveModifier ( class UBioAttributes* attribs );
	void AddModifier ( class UBioAttributes* attribs );
	void SetBase ( class UBioAttributes* attribs );
};

// Class SFXGame.BioGameEffectAttributeString
// 0x0013 (0x00AC - 0x0099)
class UBioGameEffectAttributeString : public UBioGameEffectAttribute
{
public:
	FString                                            m_value;                                          		// 0x009C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Unapply ( class UObject* oTarget );
	class UObject* Apply ( class UObject* oTarget );
};

// Class SFXGame.BioGameEffectAttributeEnum
// 0x0000 (0x00AC - 0x00AC)
class UBioGameEffectAttributeEnum : public UBioGameEffectAttributeString
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UObject* Apply ( class UObject* oTarget );
};

// Class SFXGame.BioGameEffectDisableAI
// 0x0010 (0x0099 - 0x0089)
class UBioGameEffectDisableAI : public UBioGameEffect
{
public:
	struct SFXName                                     m_nmSubType;                                      		// 0x008C (0x0008) [0x0000000000000000]              
	unsigned long                                      m_bApplied : 1;                                   		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      m_eDisableType;                                   		// 0x0098 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Unapply ( class UObject* oTarget );
	class UObject* Apply ( class UObject* oTarget );
	void eventCreate ( class UBioGameProperty* oProperty, unsigned char eType, struct SFXName nmSubType );
};

// Class SFXGame.BioGameEffectDmgVulnerability
// 0x0007 (0x0090 - 0x0089)
class UBioGameEffectDmgVulnerability : public UBioGameEffect
{
public:
	float                                              m_fDamageVulnerability;                           		// 0x008C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Unapply ( class UObject* oTarget );
	class UObject* Apply ( class UObject* oTarget );
	void eventCreate ( class UBioGameProperty* oProperty, float fDamageVulnerability );
};

// Class SFXGame.BioGameEffectGiveGP
// 0x000B (0x0094 - 0x0089)
class UBioGameEffectGiveGP : public UBioGameEffect
{
public:
	class UBioGameProperty*                            m_pGP;                                            		// 0x008C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Unapply ( class UObject* oTarget );
	class UObject* Apply ( class UObject* oTarget );
	void SetGP ( class UBioGameProperty* pGP );
};

// Class SFXGame.BioGameEffectHackAI
// 0x0013 (0x009C - 0x0089)
class UBioGameEffectHackAI : public UBioGameEffect
{
public:
	class UBioEpicPawnBehavior*                        m_pSourceBehavior;                                		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioBaseSquad*                               m_pOriginalSquad;                                 		// 0x0094 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventCreate ( class UBioGameProperty* oProperty, class UBioEpicPawnBehavior* oHacker );
	void Unapply ( class UObject* pTarget );
	class UObject* Apply ( class UObject* pTarget );
	void eventInitializeHackAI ( class UBioEpicPawnBehavior* pSourceBehavior );
};

// Class SFXGame.BioGameEffectHeadExplode
// 0x0003 (0x008C - 0x0089)
class UBioGameEffectHeadExplode : public UBioGameEffect
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Unapply ( class UObject* oTarget );
	class UObject* Apply ( class UObject* oTarget );
};

// Class SFXGame.BioGameEffectHeal
// 0x000F (0x0098 - 0x0089)
class UBioGameEffectHeal : public UBioGameEffect
{
public:
	float                                              m_fHealthAmount;                                  		// 0x008C (0x0004) [0x0000000000000000]              
	float                                              m_fToxicAmount;                                   		// 0x0090 (0x0004) [0x0000000000000000]              
	float                                              m_fResourcesRequired;                             		// 0x0094 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UObject* Apply ( class UObject* oTarget );
	void eventCreate ( class UBioGameProperty* oProperty, float fHealthAmount, float fToxicAmount, float fResourcesRequired );
};

// Class SFXGame.BioGameEffectItemAddXModSlots
// 0x000B (0x0094 - 0x0089)
class UBioGameEffectItemAddXModSlots : public UBioGameEffect
{
public:
	int                                                m_type;                                           		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                m_count;                                          		// 0x0090 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Unapply ( class UObject* Target );
	class UObject* Apply ( class UObject* Target );
};

// Class SFXGame.BioGameEffectItemPopXModSlots
// 0x000B (0x0094 - 0x0089)
class UBioGameEffectItemPopXModSlots : public UBioGameEffect
{
public:
	int                                                m_type;                                           		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                m_count;                                          		// 0x0090 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Unapply ( class UObject* Target );
	class UObject* Apply ( class UObject* Target );
};

// Class SFXGame.BioGameEffectItemRemoveXModSlot
// 0x000B (0x0094 - 0x0089)
class UBioGameEffectItemRemoveXModSlot : public UBioGameEffect
{
public:
	int                                                m_type;                                           		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                m_index;                                          		// 0x0090 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Unapply ( class UObject* Target );
	class UObject* Apply ( class UObject* Target );
};

// Class SFXGame.BioGameEffectModifyGravity
// 0x000B (0x0094 - 0x0089)
class UBioGameEffectModifyGravity : public UBioGameEffect
{
public:
	float                                              m_fScalingValue;                                  		// 0x008C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bApplied : 1;                                   		// 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Unapply ( class UObject* oTarget );
	class UObject* Apply ( class UObject* oTarget );
	void eventCreate ( class UBioGameProperty* oProperty, float fScalingValue );
};

// Class SFXGame.BioGameEffectPowerBuildUp
// 0x0013 (0x009C - 0x0089)
class UBioGameEffectPowerBuildUp : public UBioGameEffect
{
public:
	class UBioPower*                                   m_oPower;                                         		// 0x008C (0x0008) [0x0000000000000000]              
	float                                              m_fBuildUpTime;                                   		// 0x0094 (0x0004) [0x0000000000000000]              
	float                                              m_fBuildUpTimeout;                                		// 0x0098 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( class UObject* oTarget, float fDeltaTime );
	void Unapply ( class UObject* oTarget );
	class UObject* Apply ( class UObject* oTarget );
	void eventCreate ( class UBioGameProperty* oProperty, class UBioPower* oPower, float fTimeOut );
};

// Class SFXGame.BioGameEffectPowerGive
// 0x000B (0x0094 - 0x0089)
class UBioGameEffectPowerGive : public UBioGameEffect
{
public:
	struct SFXName                                     m_powerName;                                      		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Create ( class UBioGameProperty* GP, struct SFXName powerName );
	class UObject* Apply ( class UObject* oTarget );
};

// Class SFXGame.BioGameEffectPowerText
// 0x0007 (0x0090 - 0x0089)
class UBioGameEffectPowerText : public UBioGameEffect
{
public:
	int                                                m_srText;                                         		// 0x008C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Unapply ( class UObject* oTarget );
	class UObject* Apply ( class UObject* oTarget );
	void eventCreate ( class UBioGameProperty* oProperty, int srText );
};

// Class SFXGame.BioGameEffectRagdoll
// 0x0007 (0x0090 - 0x0089)
class UBioGameEffectRagdoll : public UBioGameEffect
{
public:
	unsigned long                                      m_bApplied : 1;                                   		// 0x008C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Unapply ( class UObject* oTarget );
	class UObject* Apply ( class UObject* oTarget );
	void eventCreate ( class UBioGameProperty* oProperty );
};

// Class SFXGame.BioGameEffectRegenerateShield
// 0x0007 (0x0090 - 0x0089)
class UBioGameEffectRegenerateShield : public UBioGameEffect
{
public:
	float                                              m_fAmount;                                        		// 0x008C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UObject* Apply ( class UObject* oTarget );
	void eventCreate ( class UBioGameProperty* oProperty, float fAmount );
};

// Class SFXGame.BioGameEffectSetMaterialParameter
// 0x000B (0x0094 - 0x0089)
class UBioGameEffectSetMaterialParameter : public UBioGameEffect
{
public:
	struct SFXName                                     m_nmMaterialParameter;                            		// 0x008C (0x0008) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGameEffectSetMaterialParameterColor
// 0x0010 (0x00A4 - 0x0094)
class UBioGameEffectSetMaterialParameterColor : public UBioGameEffectSetMaterialParameter
{
public:
	float                                              m_fRed;                                           		// 0x0094 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              m_fGreen;                                         		// 0x0098 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              m_fBlue;                                          		// 0x009C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              m_fAlpha;                                         		// 0x00A0 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UObject* eventApply ( class UObject* pTarget );
};

// Class SFXGame.BioGameEffectSetMaterialParameterScalar
// 0x0004 (0x0098 - 0x0094)
class UBioGameEffectSetMaterialParameterScalar : public UBioGameEffectSetMaterialParameter
{
public:
	float                                              m_fValue;                                         		// 0x0094 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UObject* eventApply ( class UObject* pTarget );
};

// Class SFXGame.BioGameEffectSetMaterialParameterTexture
// 0x0008 (0x009C - 0x0094)
class UBioGameEffectSetMaterialParameterTexture : public UBioGameEffectSetMaterialParameter
{
public:
	struct SFXName                                     m_nmTexture;                                      		// 0x0094 (0x0008) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UObject* eventApply ( class UObject* pTarget );
};

// Class SFXGame.BioGameEffectSetProperty
// 0x0023 (0x00AC - 0x0089)
class UBioGameEffectSetProperty : public UBioGameEffect
{
public:
	struct SFXName                                     m_nmProperty;                                     		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBio2DA*                                     m_p2DA;                                           		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     m_nmColumn;                                       		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nID;                                            		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bZeroOnUnapply : 1;                             		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Unapply ( class UObject* pTarget );
	class UObject* Apply ( class UObject* pTarget );
};

// Class SFXGame.BioGameEffectSingularity
// 0x0043 (0x00CC - 0x0089)
class UBioGameEffectSingularity : public UBioGameEffect
{
public:
	struct FVector                                     m_vSingularityLocation;                           		// 0x008C (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vPosition;                                      		// 0x0098 (0x000C) [0x0000000000000000]              
	struct SFXName                                     m_nmBoneName;                                     		// 0x00A4 (0x0008) [0x0000000000000000]              
	float                                              m_fForce;                                         		// 0x00AC (0x0004) [0x0000000000000000]              
	float                                              m_fForceInterval;                                 		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              m_fOuterBubbleRange;                              		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              m_fVelocityThresholdOuterBubble;                  		// 0x00B8 (0x0004) [0x0000000000000000]              
	float                                              m_fInnerBubbleRange;                              		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              m_fBubbleForce;                                   		// 0x00C0 (0x0004) [0x0000000000000000]              
	float                                              m_fDeltaTime;                                     		// 0x00C4 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bApplied : 1;                                   		// 0x00C8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void MoveActor ( class AActor* oActor );
	void Tick ( class UObject* oTarget, float fDeltaTime );
	void Unapply ( class UObject* oTarget );
	class UObject* Apply ( class UObject* oTarget );
	void eventCreate ( class UBioGameProperty* oProperty, struct FVector const& vSingularityLocation, float fForce, struct SFXName nmBoneName, struct FVector const& vPosition, float fForceInterval, float fOuterBubbleRange, float fVelocityThresholdOuterBubble, float fInnerBubbleRange, float fBubbleForce );
};

// Class SFXGame.BioGameEffectSuppression
// 0x0007 (0x0090 - 0x0089)
class UBioGameEffectSuppression : public UBioGameEffect
{
public:
	float                                              m_fDuration;                                      		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Unapply ( class UObject* oTarget );
	class UObject* Apply ( class UObject* oTarget );
	void Create ( class UBioGameProperty* oProperty );
};

// Class SFXGame.BioGameEffectTakeDamage
// 0x002F (0x00B8 - 0x0089)
class UBioGameEffectTakeDamage : public UBioGameEffect
{
public:
	struct FVector                                     m_vHitLocation;                                   		// 0x008C (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vMomentum;                                      		// 0x0098 (0x000C) [0x0000000000000000]              
	class AController*                                 m_oInstigatorController;                          		// 0x00A4 (0x0008) [0x0000000000000000]              
	class UBioDamageType*                              m_pDamage;                                        		// 0x00AC (0x0008) [0x0000000000000000]              
	float                                              m_fDamage;                                        		// 0x00B4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UObject* Apply ( class UObject* oTarget );
	void Create ( class UBioGameProperty* oProperty, float fDamage, class AController* oInstigatorController, struct FVector const& vHitLocation, struct FVector const& vMomentum, class UBioDamageType* pDamage );
};

// Class SFXGame.BioGameEffectImporter
// 0x0048 (0x00B4 - 0x006C)
class UBioGameEffectImporter : public UBioBaseComponent
{
public:
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x006C (0x0048) UNKNOWN PROPERTY: MapProperty SFXGame.BioGameEffectImporter.m_EffectCache

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UBioGameEffect* CreateGameEffect ( class UObject* _outer, class UBio2DA* gameEffectTable, int nGameEffectID );
};

// Class SFXGame.BioGameProperty
// 0x009D (0x00FD - 0x0060)
class UBioGameProperty : public UObject
{
public:
	struct FMap_Mirror                                 m_mapApplicationArray;                            		// 0x0060 (0x0048) [0x0000000000001000]              ( CPF_Native )
	TArray<class UBioGamePropertyConditional*>         m_aPropConditionals;                              		// 0x00A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class UBioGameEffect*>                      m_aGameEffects;                                   		// 0x00B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UObject*                                     m_oOwner;                                         		// 0x00C8 (0x0008) [0x0000000000000000]              
	struct SFXName                                     m_nmGamePropertyName;                             		// 0x00D0 (0x0008) [0x0000000000000000]              
	class UBioGamePropertyEventSet*                    m_oGamePropertyEvents;                            		// 0x00D8 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              m_fDuration;                                      		// 0x00E0 (0x0004) [0x0000000000000000]              
	float                                              m_fCooldownTime;                                  		// 0x00E4 (0x0004) [0x0000000000000000]              
	float                                              m_fTickInterval;                                  		// 0x00E8 (0x0004) [0x0000000000000000]              
	int                                                m_nGamePropertyGroup;                             		// 0x00EC (0x0004) [0x0000000000000000]              
	float                                              m_fPower;                                         		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                m_level;                                          		// 0x00F4 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bInCooldown : 1;                                		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bTicked : 1;                                    		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bFireAndForget : 1;                             		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bApplyOnCreation : 1;                           		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned char                                      m_ePropertyType;                                  		// 0x00FC (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool HasEffect ( class UClass* GameEffectClass );
	void Unapply ( class UObject* pTargetObject );
	void Apply ( class UObject* pTargetObject );
	FString eventToLine ( );
	FString eventToString ( FString const& sIndent );
	class UBioGameProperty* eventCreateInstant ( );
	class UBioGameProperty* eventCreateGameProperty ( class UBioGamePropertyContainer* oGPContainer, class UObject* oOwner, unsigned char ePropertyType, float fTimedDuration, float fCoolDownTime, unsigned long bTicked, float fTickInterval, int nGamePropertyGroup, float fPower, unsigned long bFireAndForget );
	void RunTests ( class ABioPawn* oPawn );
	void ScaleToLevel ( int nPowerLevel );
	void RemoveEffects ( class UObject* oTarget );
	void ApplyEffects ( class UObject* oTarget, unsigned long bIsInstant );
	void TickEffects ( float fDeltaTime );
	bool TestConditionals ( class UObject* oTarget );
	void eventAddConditionalToProperty ( class UBioGamePropertyConditional* oConditional );
	void AddGameEffectToProperty ( class UBioGameEffect* oEffect );
};

// Class SFXGame.BioGamePropertyConditional
// 0x0018 (0x0078 - 0x0060)
class UBioGamePropertyConditional : public UObject
{
public:
	TArray<unsigned char>                              m_aEvent;                                         		// 0x0060 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class UBioGameProperty*                            m_oOwnerGameProperty;                             		// 0x0070 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Uninitialize ( );
	void Initialize ( );
};

// Class SFXGame.BioGamePropertyConditionalEquipmentChange
// 0x0001 (0x0079 - 0x0078)
class UBioGamePropertyConditionalEquipmentChange : public UBioGamePropertyConditional
{
public:
	unsigned char                                      m_eSlot;                                          		// 0x0078 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGamePropertyConditionalEquipmentChangeVehicle
// 0x0000 (0x0078 - 0x0078)
class UBioGamePropertyConditionalEquipmentChangeVehicle : public UBioGamePropertyConditional
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGamePropertyConditionalHasNotFired
// 0x0000 (0x0078 - 0x0078)
class UBioGamePropertyConditionalHasNotFired : public UBioGamePropertyConditional
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGamePropertyConditionalIsActorType
// 0x0008 (0x0080 - 0x0078)
class UBioGamePropertyConditionalIsActorType : public UBioGamePropertyConditional
{
public:
	struct SFXName                                     m_nmActorType;                                    		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetActorType ( struct SFXName nmActorType );
};

// Class SFXGame.BioGamePropertyConditionalIsAlive
// 0x0000 (0x0078 - 0x0078)
class UBioGamePropertyConditionalIsAlive : public UBioGamePropertyConditional
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGamePropertyConditionalIsArmor
// 0x0001 (0x0079 - 0x0078)
class UBioGamePropertyConditionalIsArmor : public UBioGamePropertyConditional
{
public:
	unsigned char                                      m_eArmorType;                                     		// 0x0078 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGamePropertyConditionalIsCurrentArmor
// 0x0003 (0x007C - 0x0079)
class UBioGamePropertyConditionalIsCurrentArmor : public UBioGamePropertyConditionalIsArmor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGamePropertyConditionalIsCurrentWeapon
// 0x0000 (0x0078 - 0x0078)
class UBioGamePropertyConditionalIsCurrentWeapon : public UBioGamePropertyConditional
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGamePropertyConditionalIsItem
// 0x0000 (0x0078 - 0x0078)
class UBioGamePropertyConditionalIsItem : public UBioGamePropertyConditional
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGamePropertyConditionalIsItemEquipped
// 0x0000 (0x0078 - 0x0078)
class UBioGamePropertyConditionalIsItemEquipped : public UBioGamePropertyConditional
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGamePropertyConditionalIsPawn
// 0x0000 (0x0078 - 0x0078)
class UBioGamePropertyConditionalIsPawn : public UBioGamePropertyConditional
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGamePropertyConditionalWeapon
// 0x0003 (0x007B - 0x0078)
class UBioGamePropertyConditionalWeapon : public UBioGamePropertyConditional
{
public:
	unsigned char                                      m_eWeaponType;                                    		// 0x0078 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eWeaponMeleeType;                               		// 0x0079 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eWeaponRangedType;                              		// 0x007A (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool TestRangedWeapon ( class UBioItemWeapon* pWeaponItem );
	bool TestMeleeWeapon ( class UBioItemWeapon* pWeaponItem );
	bool TestWeapon ( class UBioItemWeapon* pWeaponItem );
};

// Class SFXGame.BioGamePropertyConditionalIsWeapon
// 0x0001 (0x007C - 0x007B)
class UBioGamePropertyConditionalIsWeapon : public UBioGamePropertyConditionalWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGamePropertyConditionalOnWeaponChange
// 0x0001 (0x007C - 0x007B)
class UBioGamePropertyConditionalOnWeaponChange : public UBioGamePropertyConditionalWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGamePropertyConditionalWeaponPowerUsed
// 0x0000 (0x0078 - 0x0078)
class UBioGamePropertyConditionalWeaponPowerUsed : public UBioGamePropertyConditional
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGamePropertyConditionalXModInstalled
// 0x0000 (0x0078 - 0x0078)
class UBioGamePropertyConditionalXModInstalled : public UBioGamePropertyConditional
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGamePropertyConditionalXModInstalledInCurrentWeapon
// 0x0000 (0x0078 - 0x0078)
class UBioGamePropertyConditionalXModInstalledInCurrentWeapon : public UBioGamePropertyConditionalXModInstalled
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGamePropertyConditionalXModInstalledInEquipment
// 0x0001 (0x0079 - 0x0078)
class UBioGamePropertyConditionalXModInstalledInEquipment : public UBioGamePropertyConditionalXModInstalled
{
public:
	unsigned char                                      m_eSlot;                                          		// 0x0078 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGamePropertyConditionalImporter
// 0x0000 (0x006C - 0x006C)
class UBioGamePropertyConditionalImporter : public UBioBaseComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UBioGamePropertyConditional* LoadGamePropertyConditional ( class UBio2DA* o2DA, int nConditionalId, class UBioGameProperty* oOwner );
};

// Class SFXGame.BioGamePropertyContainer
// 0x0020 (0x0080 - 0x0060)
class UBioGamePropertyContainer : public UObject
{
public:
	TArray<class UBioGameProperty*>                    m_aGameProperties;                                		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioGamePropertyTimer*                       m_oGamePropertyCooldownTimer;                     		// 0x0070 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioGamePropertyEventDispatcher*             m_oEventDispatcher;                               		// 0x0078 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	FString eventToString ( FString const& sIndent );
	void OnGPEvent ( unsigned char eEvent, class UObject* pTarget );
	void eventScaleToLevel ( int nLevel );
	void eventProcessCooldown ( float fDeltaTime );
	void Tick ( float fDeltaTime );
	void OnGamePropCooldownEnd ( class UBioGameProperty* pGameProperty, unsigned char eTimingType, float fDeltaTimeRemaining );
	void eventAddGamePropertyToCountdown ( class UBioGameProperty* oGameProp, float fCountdown );
};

// Class SFXGame.BioGamePropertyEffectLevelIterator
// 0x0010 (0x0070 - 0x0060)
class UBioGamePropertyEffectLevelIterator : public UObject
{
public:
	TArray<struct FBioEffectLevelIteratorPair>         m_aPairs;                                         		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Initialize ( class UBio2DA* o2DA, int nKeyColumn, int nKey );
};

// Class SFXGame.BioGamePropertyEventDispatcher
// 0x0090 (0x00F0 - 0x0060)
class UBioGamePropertyEventDispatcher : public UObject
{
public:
	struct FMap_Mirror                                 m_mapQueued;                                      		// 0x0060 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMap_Mirror                                 m_mapEventRegistry;                               		// 0x00A8 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ProcessQueue ( );
	void UnregisterGameProperty ( class UBioGameProperty* oGameProp );
	void RegisterGameProperty ( class UBioGameProperty* oGameProp );
	void OnEvent ( unsigned char eEvent, class UObject* pTarget );
	void LogDebugInfo ( class UBioGamePropertyEventSet* pEvents, class UObject* pTarget );
};

// Class SFXGame.BioGamePropertyEventSet
// 0x0010 (0x0070 - 0x0060)
class UBioGamePropertyEventSet : public UObject
{
public:
	TArray<unsigned char>                              m_aEvents;                                        		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UBioGamePropertyEventSet* eventCreate3 ( unsigned char eEvent1, unsigned char eEvent2, unsigned char eEvent3, class UObject* oSource );
	class UBioGamePropertyEventSet* eventCreate2 ( unsigned char eEvent1, unsigned char eEvent2, class UObject* oSource );
	class UBioGamePropertyEventSet* eventCreate1 ( unsigned char eEvent1, class UObject* oSource );
	bool CheckForAnyEvents ( class UBioGamePropertyEventSet* oEvents );
	bool CheckForAllEvents ( class UBioGamePropertyEventSet* oEvents );
	bool CheckForEvent ( unsigned char eEvent );
	void RemoveEventSet ( class UBioGamePropertyEventSet* oEvents );
	void RemoveEvents ( TArray<unsigned char> const& aEvents );
	void RemoveEvent ( unsigned char eEvent );
	void AddEventSet ( class UBioGamePropertyEventSet* oEvents );
	void AddEvents ( TArray<unsigned char> const& aEvents );
	void AddEvent ( unsigned char eEvent );
	void Clear ( );
};

// Class SFXGame.BioGamePropertyHolderTraits
// 0x0000 (0x0060 - 0x0060)
class UBioGamePropertyHolderTraits : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UBioGamePropertyContainer* eventGetGPContainer ( class UObject* pObject );
	class UBioGamePropertyManager* eventGetGPManager ( class UObject* oTarget );
};

// Class SFXGame.BioGamePropertyImporter
// 0x005C (0x00C8 - 0x006C)
class UBioGamePropertyImporter : public UBioBaseComponent
{
public:
	struct SFXName                                     m_aGameProperty2DANames[ 0x5 ];                   		// 0x006C (0x0028) [0x0000000000000000]              
	class UBio2DA*                                     m_aGameProperty2DA[ 0x5 ];                        		// 0x0094 (0x0028) [0x0000000000000000]              
	struct SFXName                                     m_nmGameProperty2DAPackage;                       		// 0x00BC (0x0008) [0x0000000000000000]              
	unsigned long                                      m_bDefault2DAsLoaded : 1;                         		// 0x00C4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UBioGameProperty* LoadGameProperty ( struct FBioGPLoadData* oGPData );
};

// Class SFXGame.BioGamePropertyManager
// 0x0078 (0x00D8 - 0x0060)
class UBioGamePropertyManager : public UObject
{
public:
	TArray<class UBioGameProperty*>                    m_apPendingUnapply;                               		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FBioGamePropertyManagerTimedOutTicked> m_aTimedOutTicked;                                		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0080 (0x0048) UNKNOWN PROPERTY: MapProperty SFXGame.BioGamePropertyManager.m_mapActiveGamePropertyGroups
	class UObject*                                     m_oOwner;                                         		// 0x00C8 (0x0008) [0x0000000000000000]              
	class UBioGamePropertyTimer*                       m_oRegisteredGPs;                                 		// 0x00D0 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	FString eventToString ( FString const& sIndent );
	bool IsGameEffectApplied ( class UClass* GameEffectClass );
	bool FindGamePropertyByEffectType ( class UClass* GameEffectClass, int nGamePropertyGroup, TArray<class UBioGameProperty*>* aProperties );
	bool FindGamePropertyByGroup ( int nGamePropertyGroup, TArray<class UBioGameProperty*>* aProperties );
	bool FindGamePropertyByOwner ( class AActor* oOwner, int nGamePropertyGroup, TArray<class UBioGameProperty*>* aProperties );
	bool FindGamePropertyByName ( struct SFXName nmName, int nGamePropertyGroup, TArray<class UBioGameProperty*>* aProperties );
	class UObject* GetOwnerObject ( );
	void Tick ( float fDelta );
	void eventTickInternal ( float fDelta );
	void OnGPTimeOut ( class UBioGameProperty* pGameProperty, unsigned char eTimingType, float fDeltaTimeRemaining );
	void UnapplyGameProperty ( class UBioGameProperty* pGP, class UObject* pTarget );
	void ApplyGameProperty ( class UBioGameProperty* pGP, class UObject* pTarget );
	void EvaluateGameProperty ( class UBioGameProperty* pGP, class UObject* pTarget );
};

// Class SFXGame.BioGamePropertyScalingData
// 0x0240 (0x02AC - 0x006C)
class UBioGamePropertyScalingData : public UBioBaseComponent
{
public:
	struct FMap_Mirror                                 m_mapIntPropertyToValueArray;                     		// 0x006C (0x0048) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FMap_Mirror                                 m_mapFloatPropertyToValueArray;                   		// 0x00B4 (0x0048) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FMap_Mirror                                 m_mapBytePropertyToValueArray;                    		// 0x00FC (0x0048) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FMap_Mirror                                 m_mapBoolPropertyToValueArray;                    		// 0x0144 (0x0048) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FMap_Mirror                                 m_mapNamePropertyToValueArray;                    		// 0x018C (0x0048) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FMap_Mirror                                 m_mapStringPropertyToValueArray;                  		// 0x01D4 (0x0048) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FMap_Mirror                                 m_mapStringRefPropertyToValueArray;               		// 0x021C (0x0048) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FMap_Mirror                                 m_mapObjectPropertyToValueArray;                  		// 0x0264 (0x0048) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ScaleProperties ( int nLevel );
};

// Class SFXGame.BioGamePropertyTimer
// 0x0034 (0x0094 - 0x0060)
class UBioGamePropertyTimer : public UObject
{
public:
	TArray<struct FBioGPTimingData>                    m_aTimedGPs;                                      		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class UBioGameProperty*>                    m_aFrameTickGPs;                                  		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRemoveGameProperty__Delegate;                 		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bMutex : 1;                                     		// 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	FString eventToString ( FString const& sIndent );
	void eventInvokeDelegate ( struct FScriptDelegate pDelegate, class UBioGameProperty* pGP, unsigned char eTimingType, float fDeltaTimeRemaining );
	void RemoveAllNonStatic ( struct FScriptDelegate pDelegate );
	float GetTimeForGamePropertyByName ( struct SFXName nmGamePropertyName, unsigned char eTimingType, class UBioGameProperty** oGameProperty );
	float GetTimeForGameProperty ( class UBioGameProperty* oGameProp, unsigned char eTimingType );
	void Tick ( float fDeltaTime, struct FScriptDelegate oOnRemoveGameProperty );
	void AppendStaticGameProperty ( class UBioGameProperty* oGP );
	int FindGamePropertyIndex ( class UBioGameProperty* oGP, unsigned char eTimingType );
	void RemoveGamePropertyAtIndex ( int nIndex );
	bool RemoveGameProperty ( class UBioGameProperty* oGP );
	void InsertGameProperty ( class UBioGameProperty* oGP, float fTime, unsigned char eTimingType, unsigned long bFrameTicked );
	void OnRemoveGameProperty ( class UBioGameProperty* pGP, unsigned char eTimingType, float fDeltaTimeRemaining );
};

// Class SFXGame.BioGestChainNode
// 0x000C (0x006C - 0x0060)
class UBioGestChainNode : public UObject
{
public:
	class UBioEvtSysTrackGesture*                      m_pGestTrack;                                     		// 0x0060 (0x0008) [0x0000000000000000]              
	int                                                m_nIndex;                                         		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGestChainTree
// 0x0010 (0x007C - 0x006C)
class UBioGestChainTree : public UBioGestChainNode
{
public:
	TArray<class UBioGestChainNode*>                   m_aChildren;                                      		// 0x006C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGestureLangOverride
// 0x0060 (0x00C0 - 0x0060)
class UBioGestureLangOverride : public UObject
{
public:
	struct FMultiMap_Mirror                            m_mapOverrides;                                   		// 0x0060 (0x0048) [0x0000000000001000]              ( CPF_Native )
	TArray<struct FBioGestLangOverride>                m_aData;                                          		// 0x00A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct SFXName                                     m_nmLanguage;                                     		// 0x00B8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGestureRulesData
// 0x0188 (0x01E8 - 0x0060)
class UBioGestureRulesData : public UObject
{
public:
	struct FMap_Mirror                                 m_mapPoseList;                                    		// 0x0060 (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct FMultiMap_Mirror                            m_mapPoseRules;                                   		// 0x00A8 (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct FMultiMap_Mirror                            m_mapGestureRules;                                		// 0x00F0 (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct FMultiMap_Mirror                            m_mapAnimsets;                                    		// 0x0138 (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct FMultiMap_Mirror                            m_mapARPUCurves;                                  		// 0x0180 (0x0048) [0x0000000000001000]              ( CPF_Native )
	TArray<struct FBioGestRuleItem>                    m_aRuleItems;                                     		// 0x01C8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FBioARPUBodyConfig>                  m_aARPUItems;                                     		// 0x01D8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGestureRuntimeData
// 0x0090 (0x00F0 - 0x0060)
class UBioGestureRuntimeData : public UObject
{
public:
	struct FMap_Mirror                                 m_mapAnimSetOwners;                               		// 0x0060 (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct FMap_Mirror                                 m_mapCharTypeOverrides;                           		// 0x00A8 (0x0048) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGrenadeInterface
// 0x0000 (0x0060 - 0x0060)
class UBioGrenadeInterface : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGrenadeInterfaceAI
// 0x000C (0x006C - 0x0060)
class UBioGrenadeInterfaceAI : public UBioGrenadeInterface
{
public:
	struct FVector                                     m_targetPoint;                                    		// 0x0060 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGrenadeInterfacePlayer
// 0x0000 (0x0060 - 0x0060)
class UBioGrenadeInterfacePlayer : public UBioGrenadeInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGUIBox
// 0x0050 (0x00B0 - 0x0060)
class UBioGUIBox : public UObject
{
public:
	struct FCanvasProperties                           m_canvasProperties;                               		// 0x0060 (0x0024) [0x0000000000000000]              
	class UFont*                                       m_font;                                           		// 0x0084 (0x0008) [0x0000000000000000]              
	struct FColor                                      m_colorBackground;                                		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      m_colorForeground;                                		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nCanvasWidth;                                   		// 0x0094 (0x0004) [0x0000000000000000]              
	int                                                m_nCanvasHeight;                                  		// 0x0098 (0x0004) [0x0000000000000000]              
	float                                              m_fX;                                             		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              m_fY;                                             		// 0x00A0 (0x0004) [0x0000000000000000]              
	float                                              m_fWidth;                                         		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              m_fHeight;                                        		// 0x00A8 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bComputeDrawParameters : 1;                     		// 0x00AC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Draw ( class UCanvas* oCanvas );
	void SetFont ( class UFont* Font );
	void PopCanvasProperties ( class UCanvas* oCanvas );
	void PushCanvasProperties ( class UCanvas* oCanvas );
	void RenderContent ( class UCanvas* oCanvas );
	void ComputeDrawParameters ( class UCanvas* oCanvas );
	bool ShouldRender ( );
};

// Class SFXGame.BioMessageBox
// 0x002C (0x00DC - 0x00B0)
class UBioMessageBox : public UBioGUIBox
{
public:
	TArray<FString>                                    m_aRawText;                                       		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<FString>                                    m_aWrappedText;                                   		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nScrollPosition;                                		// 0x00D0 (0x0004) [0x0000000000000000]              
	int                                                m_nLineCount;                                     		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                m_nMaxScrollPosition;                             		// 0x00D8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void PageUp ( );
	void PageDown ( );
	void ScrollUp ( );
	void ScrollDown ( );
	void RenderContent ( class UCanvas* oCanvas );
	bool eventHasText ( );
	void SetTextArray ( TArray<FString>* aText );
	void SetText ( FString const& S );
	bool ShouldRender ( );
	void ComputeDrawParameters ( class UCanvas* oCanvas );
};

// Class SFXGame.BioHUD
// 0x00AC (0x0668 - 0x05BC)
class ABioHUD : public AHUD
{
public:
	TArray<struct FScriptDelegate>                     DebugDrawList;                                    		// 0x05BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __DebugDraw__Delegate;                            		// 0x05CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      m_oActorForInfoDisplay;                           		// 0x05DC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UMaterial*                                   oGUIMaterial;                                     		// 0x05E4 (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  m_oSafeAreaTexture;                               		// 0x05EC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   m_oTargetDetected;                                		// 0x05F4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioBaseSquad*                               m_oTargetSquadPlayPen;                            		// 0x05FC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_oAnimNodeDebugSource;                           		// 0x0604 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_nmAnimNodeDebugName;                            		// 0x060C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioMessageBox*                              m_messageBox;                                     		// 0x0614 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              m_fCanvasOrgX;                                    		// 0x061C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCanvasOrgY;                                    		// 0x0620 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SafeAreaRatioX;                                   		// 0x0624 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SafeAreaRatioY;                                   		// 0x0628 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                nFontTestType;                                    		// 0x062C (0x0004) [0x0000000000000000]              
	float                                              m_fSafeXOffset;                                   		// 0x0630 (0x0004) [0x0000000000000000]              
	float                                              m_fSafeYOffset;                                   		// 0x0634 (0x0004) [0x0000000000000000]              
	int                                                m_textX;                                          		// 0x0638 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_textY;                                          		// 0x063C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_lineHeight;                                     		// 0x0640 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_charWidth;                                      		// 0x0644 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_leftColumnX;                                    		// 0x0648 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_rightColumnX;                                   		// 0x064C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_farrightColumnX;                                		// 0x0650 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_topRowY;                                        		// 0x0654 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      YellowColor;                                      		// 0x0658 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      OrangeColor;                                      		// 0x065C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      DarkGreyColor;                                    		// 0x0660 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      m_bDisplayDialogData : 1;                         		// 0x0664 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      m_bDisplayDialogDataTarget : 1;                   		// 0x0664 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bShowPlayerLocation : 1;                        		// 0x0664 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bDisplayActorInfo : 1;                          		// 0x0664 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bLockActorInfo : 1;                             		// 0x0664 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bDisplaySafeArea : 1;                             		// 0x0664 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bGUIResourcesLoaded : 1;                        		// 0x0664 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bShowHUDThisFrame : 1;                          		// 0x0664 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      m_bUseGeneratedItemNames : 1;                     		// 0x0664 (0x0004) [0x0000000000006000] [0x00000100] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bShowAnimNodeDebug : 1;                         		// 0x0664 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ProfileCamera ( );
	void ShowPawnAnimNodeDebug ( class UClass* aClass, struct SFXName nmStartingPoint );
	void ShowWeapAnimNodeDebug ( struct SFXName nmStartingPoint );
	void ShowAnimNodeDebug ( struct SFXName nmStartingPoint );
	void UpdateActorInfo ( );
	void HideLocation ( );
	void ShowLocation ( );
	void LockActorInfo ( );
	void DisplayActorInfo ( );
	void LoadGUIResources ( );
	void SetGUITexture ( FString const& sMaterial );
	void eventDrawTextWithColor ( FString const& valuename, FString const& Value, struct FColor const& LabelColor, struct FColor const& DataColor );
	void eventDrawText ( FString const& valuename, FString const& Value, struct FColor const& LabelColor, struct FColor const& DataColor );
	void DisplayProfiling ( );
	void DrawCircle ( float fX, float fY, float Radius );
	bool PointInsideBox ( float X, float Y, float CX, float CY, float nSize );
	void GetBoxCoordsFromAngle ( float X, float Y, float Size, float Angle, float* XSt, float* YSt );
	bool BoxesIntersecting ( int X1, int Y1, int nSize1, int X2, int Y2, int nSize2 );
	void CDrawVertLine ( float X, float Y1, float Y2 );
	void CDrawHorzLine ( float X1, float X2, float Y );
	void ConnectBoxes ( float X1, float Y1, float nSize1, float X2, float Y2, float nSize2 );
	struct FColor GetStabilityColor ( float fCurrentStability );
	float SmartWrapStringToArray ( FString const& sText, int nTextWidth, TArray<FString>* OutArray );
	void DrawFakeShadowText ( int X, int Y, struct FColor const& DrawColor, FString const& sText );
	void DrawEngineHUD ( );
	bool IsDrawing ( struct FScriptDelegate DebugDrawFunc );
	void ToggleDebugDraw ( struct FScriptDelegate DebugDrawFunc );
	void DebugDraw ( class ABioHUD* H );
	void DrawHUD ( );
	void eventPostRender ( );
	void DrawTestFont ( int Y, FString const& sFontName, int nPoint, unsigned long bScaled, float fScale );
	void ToggleSafeArea ( );
	void DisplaySafeArea ( );
	void eventProfileConversationExtra ( class UBioConversation* oCurConv );
	struct FVector eventProxyCanvasProject ( struct FVector const& V );
	void eventProxyCanvasDrawMaterialTile ( class UMaterialInstanceConstant* Mat, float XL, float YL );
	void eventProxyCanvasSetPos ( float X, float Y );
	struct FLinearColor eventProxyMakeLinearColor ( float R, float G, float B, float A );
	void DisplayCapability ( int X, int Y, int Idx, class UBioCapability* oCap, unsigned long bShowOwner );
	int DisplaySquadMember ( int X, int Y, class UBioPawnBehavior* targetBehavior, class ABioPawn* oBP );
	int DisplayStreaming ( int X, int Y, class ABioPawn* oBP, class UBioPawnBehavior* targetBehavior );
	int DisplaySquad_QA ( int X, int Y, class UBioPawnBehavior* targetBehavior );
	int DisplaySquad ( int X, int Y, class UBioPawnBehavior* targetBehavior );
	int DisplayPerceptionList ( int X, int Y, class ABioPawn* oBP );
	int DisplayActionQueue ( int X, int Y, class ABioAiController* oAIC );
	int DisplayActionStack ( int X, int Y, class ABioAiController* oAIC );
	struct SFXName GetNameOfEnumEntry ( int nIndex, FString const& EnumName );
	void DisplayIcon ( class UMaterialInstanceConstant* oMatInstance, struct FVector const& vWorldLocation, unsigned long bScaleWithDistance, float fMinTextureSize, float fMaxTextureSize, float fScaleRange );
	void DisplayWeaponAttributes ( class ABioWeapon* oWeapon );
	void DisplaySquadPlaypen ( class UBioActorBehavior* targetActorBehavior, unsigned long bShowPlaypen );
	void ProfileTrilogy ( );
	void ProfileComponents ( class UBioActorBehavior* targetActorBehavior );
	void ProfileStasis ( class UBioActorBehavior* targetActorBehavior );
	void ProfilePerception ( class UBioActorBehavior* targetActorBehavior );
	void ProfileSquadCaps ( class UBioActorBehavior* targetActorBehavior );
	void ProfileCaps ( class UBioActorBehavior* targetActorBehavior );
	void ProfileGestures ( class UBioActorBehavior* targetActorBehavior );
	void ProfileSave ( );
	void ProfileAnim ( class UBioActorBehavior* targetActorBehavior );
	void ProfileSquadFollow ( class UBioActorBehavior* targetActorBehavior );
	void ProfileQAAI ( class UBioActorBehavior* targetActorBehavior );
	void ProfileVehicleWeapons ( class UBioActorBehavior* targetActorBehavior );
	void ProfileVehicle ( class UBioActorBehavior* targetActorBehavior );
	void ProfileGrenade ( class UBioActorBehavior* targetActorBehavior );
	void ProfileRagdoll ( class UBioActorBehavior* targetActorBehavior );
	void ProfileConversation ( class UBioActorBehavior* targetActorBehavior );
	void ProfileConversationBug ( class UBioActorBehavior* targetActorBehavior );
	void ProfileNoise ( class UBioActorBehavior* targetActorBehavior );
	void ProfilePath ( class UBioActorBehavior* targetActorBehavior );
	void ProfileAvoid ( class UBioActorBehavior* targetActorBehavior );
	void ProfileSquad ( class UBioActorBehavior* targetActorBehavior );
	void ProfileLookAt ( class UBioActorBehavior* targetActorBehavior );
	void ProfileMovement ( class UBioActorBehavior* targetActorBehavior );
	void ProfileCover ( class UBioActorBehavior* targetActorBehavior );
	void ProfileAI_Player ( class UBioActorBehavior* targetActorBehavior );
	void ProfileAI_AI ( class UBioActorBehavior* targetActorBehavior );
	void ProfileAI ( class UBioActorBehavior* targetActorBehavior );
	void ProfileHopper ( class UBioActorBehavior* targetActorBehavior );
	void ProfileInventory ( class UBioActorBehavior* targetActorBehavior );
	void ProfilePower ( class UBioActorBehavior* targetActorBehavior, struct SFXName nmPower );
	void ProfilePowers ( class UBioActorBehavior* targetActorBehavior, struct SFXName nmPower );
	void ProfileWeaponAttributes ( class UBioActorBehavior* targetActorBehavior );
	void ProfilePawnAttributes ( class UBioActorBehavior* targetActorBehavior );
	void ProfileTalents ( class UBioActorBehavior* targetActorBehavior );
	void ProfileCombat ( class UBioActorBehavior* targetActorBehavior );
};

// Class SFXGame.BioMoviePlayer
// 0x0020 (0x0080 - 0x0060)
class UBioMoviePlayer : public UObject
{
public:
	struct FScriptDelegate                             __OnMovieFinished__Delegate;                      		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UMaterial*                                   m_material;                                       		// 0x0070 (0x0008) [0x0000000000000000]              
	class UTextureMovie*                               m_textureMovie;                                   		// 0x0078 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventShutdownMovie ( );
	void Draw ( class UCanvas* Canvas );
	void SetMaterial ( class UMaterial* Material );
	void SetTextureMovie ( class UTextureMovie* TextureMovie );
	void InitializeMovie ( );
	void OnMovieFinished ( class UTextureMovie* TextureMovie );
};

// Class SFXGame.BioSubtitles
// 0x0022 (0x0082 - 0x0060)
class UBioSubtitles : public UObject
{
public:
	FString                                            m_sSubtitle;                                      		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FColor                                      m_FontColor;                                      		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              m_FontSize;                                       		// 0x0074 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeRemaining;                                 		// 0x0078 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bAlert : 1;                                     		// 0x007C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      m_DefaultRenderMode;                              		// 0x0080 (0x0001) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      m_CurrentRenderMode;                              		// 0x0081 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UpdateSubtitles ( float fDeltaT );
	void ClearHistory ( );
	unsigned char SetRenderMode ( unsigned char RenderMode, unsigned long bForceDisplay );
	unsigned char GetRenderMode ( );
	bool HasSubtitle ( );
	void DisplaySubtitle ( FString const& sSubtitle, float fDuration );
};

// Class SFXGame.BioUIWorld
// 0x01BC (0x021C - 0x0060)
class UBioUIWorld : public UObject
{
public:
	struct FPostProcessSettings                        m_CurrentPostProcessSettings;                     		// 0x0060 (0x00E0) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<FPointer>                                   m_aCommandQueue;                                  		// 0x0140 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray<class AActor*>                              m_aoInitialActors;                                		// 0x0150 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	FString                                            m_sMapFile;                                       		// 0x0160 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	FPointer                                           m_pWorld;                                         		// 0x0170 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	FPointer                                           m_pCriticalSection;                               		// 0x0178 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0180 (0x0048) UNKNOWN PROPERTY: MapProperty SFXGame.BioUIWorld.m_mSpawnedPawnMap
	struct SFXName                                     m_fnCameraActorName;                              		// 0x01C8 (0x0008) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class ACameraActor*                                m_pCameraActor;                                   		// 0x01D0 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class UBioVFXTemplate*                             m_pFullBioticEffectTemplate;                      		// 0x01D8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioVFXTemplate*                             m_pHalfBioticEffectTemplate;                      		// 0x01E0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioVFXTemplate*                             m_pTechToolEffectTemplate;                        		// 0x01E8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioVisualEffect*                            m_pFullBioticEffect;                              		// 0x01F0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioVisualEffect*                            m_pHalfBioticEffect;                              		// 0x01F8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioVisualEffect*                            m_pTechToolEffect;                                		// 0x0200 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioSFHandler_NewCharacter*                  m_oNCHandler;                                     		// 0x0208 (0x0008) [0x0000000000000000]              
	class UPostProcessChain*                           m_PostProcessChain;                               		// 0x0210 (0x0008) [0x0000000000000000]              
	unsigned long                                      m_bEnabled : 1;                                   		// 0x0218 (0x0004) [0x0000000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	unsigned long                                      m_bLoaded : 1;                                    		// 0x0218 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void HidePawn ( class ABioPawn* a_pOriginalPawn, unsigned long bHidden );
	void AttachOmnitool ( class ABioPawn* a_pSourcePawn, unsigned long a_fnClassName );
	void PrimeTextures ( class ABioPawn* a_pSourcePawn );
	void AttachBioticsAndTech ( class ABioPawn* a_pSourcePawn, struct SFXName a_fnClassName );
	void MovePawn ( class ABioPawn* a_pOriginalPawn, struct SFXName a_fnNewLocation );
	void SwapPawn ( class ABioPawn* a_pSourcePawn, struct SFXName a_fnSourceVarName, class ABioPawn* a_pOtherPawn, struct SFXName a_fnOtherVarName );
	void ResetActors ( );
	void SetNameVariable ( struct SFXName a_fnVariableName, struct SFXName a_nmValue );
	void SetPawnVariable ( struct SFXName a_fnVariableName, class ABioPawn* a_pSourcePawn );
	void SetObjectVariable ( struct SFXName a_fnVariableName, class UObject* a_pValue );
	void UpdateHeadGearVisibility ( class ABioPawn* pOriginalPawn );
	void UpdateAppearance ( class ABioPawn* a_pOriginalPawn, struct SFXName a_fnClassAnimSet );
	void DestroyPawn ( class ABioPawn* a_pOriginalPawn );
	void SpawnPawn ( class ABioPawn* a_pOriginalPawn, struct SFXName a_fnSpawnLocation, struct SFXName a_fnSpawnVariable, struct SFXName a_fnClassAnimSet, struct SFXName a_fnRemoteEvent );
	void TriggerEvent ( struct SFXName a_fnEventName, class AActor* a_pCaller );
};

// Class SFXGame.BioInGamePropertyEditor
// 0x00C0 (0x0120 - 0x0060)
class UBioInGamePropertyEditor : public UObject
{
public:
	FString                                            m_sFooterText;                                    		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sFileName;                                      		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sEditableRootName;                              		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sCameraRootName;                                		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sAnimNodeName;                                  		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sLoadSaveNodeName;                              		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sNewLoadSaveNodeName;                           		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sStateNodeName;                                 		// 0x00D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sActionMappingName;                             		// 0x00E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioPropertyEditorBaseNode*                  m_oPropertyEditorNodes;                           		// 0x00F0 (0x0008) [0x0000000000000000]              
	float                                              m_fHUDRelativePropertyEditorOriginX;              		// 0x00F8 (0x0004) [0x0000000000000000]              
	float                                              m_fHUDRelativePropertyEditorOriginY;              		// 0x00FC (0x0004) [0x0000000000000000]              
	float                                              m_fPropertyEditorSizeX;                           		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              m_fPropertyEditorSizeY;                           		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              m_fPropertyEditorRelativeColumnOneX;              		// 0x0108 (0x0004) [0x0000000000000000]              
	float                                              m_fPropertyEditorRelativeColumnTwoX;              		// 0x010C (0x0004) [0x0000000000000000]              
	float                                              m_fPropertyEditorRelativeColumnThreeX;            		// 0x0110 (0x0004) [0x0000000000000000]              
	float                                              m_fPropertyEditorRelativeColumnY;                 		// 0x0114 (0x0004) [0x0000000000000000]              
	float                                              m_fColumnHeight;                                  		// 0x0118 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIsActive : 1;                                  		// 0x011C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bDebugBones : 1;                                		// 0x011C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bSortByType : 1;                                		// 0x011C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bSortByName : 1;                                		// 0x011C (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	FString filterString ( FString const& Input );
	void DrawToHUD ( class ABioHUD* oHUD );
	void DrawBones ( class ABioHUD* oHUD );
	bool PerformRightShoulderAction ( );
	bool PerformLeftShoulderAction ( );
	bool PerformRightTriggerAction ( );
	bool PerformLeftTriggerAction ( );
	bool ActivateMainMenu ( );
	bool PerformLeftAction ( );
	bool PerformRightAction ( );
	bool PerformDownAction ( );
	bool PerformUpAction ( );
	bool PerformDeactivateAction ( );
	bool PerformActivateAction ( );
	bool CreateNodeTestData ( );
	bool WriteTreeDataToHUD ( class ABioHUD* oHUD );
	bool UpdateSystem ( float fDeltaTime );
	bool DeactivateSystem ( );
	bool ActivateSystem ( );
	bool Initialize ( );
};

// Class SFXGame.BioPropertyEditorBaseNode
// 0x0064 (0x00C4 - 0x0060)
class UBioPropertyEditorBaseNode : public UObject
{
public:
	FString                                            m_sNodeDisplayName;                               		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class UBioPropertyEditorBaseNode*>          m_aChildren;                                      		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class UBioPropertyEditorBaseNode*>          m_aTraversedStack;                                		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sParentGenName;                                 		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioInGamePropertyEditor*                    m_oTop;                                           		// 0x00A0 (0x0008) [0x0000000000000000]              
	class UBioPropertyEditorBaseNode*                  m_oParent;                                        		// 0x00A8 (0x0008) [0x0000000000000000]              
	int                                                m_nCurrentlySelectedChild;                        		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                m_nScrollBoxFirstIndex;                           		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                m_nScrollBoxSize;                                 		// 0x00B8 (0x0004) [0x0000000000000000]              
	struct FColor                                      m_colour;                                         		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                m_nGeneration;                                    		// 0x00C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UBioInGamePropertyEditor* getTop ( );
	FString getDisplayText ( unsigned long selectable );
	struct FColor getColour ( );
	void setColour ( struct FColor const& Col );
	void RightShoulderAction ( );
	void LeftShoulderAction ( );
	void RightTriggerAction ( );
	void LeftTriggerAction ( );
	void DecrementCurrentSelection ( );
	void IncrementCurrentSelection ( );
	class UBioPropertyEditorBaseNode* GetSelectablesParent ( );
	class UBioPropertyEditorBaseNode* GetSelectedChildOnStackTop ( );
	class UBioPropertyEditorBaseNode* GetSelectedChild ( );
	bool SelectionAction ( );
};

// Class SFXGame.BioPropertyEditorBoneNode
// 0x0010 (0x00D4 - 0x00C4)
class UBioPropertyEditorBoneNode : public UBioPropertyEditorBaseNode
{
public:
	class USkeletalMesh*                               m_oSkeletalMesh;                                  		// 0x00C4 (0x0008) [0x0000000000000000]              
	int                                                m_iLodIndex;                                      		// 0x00CC (0x0004) [0x0000000000000000]              
	int                                                m_iBoneIndex;                                     		// 0x00D0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool SelectionAction ( );
};

// Class SFXGame.BioPropertyEditorLevelNode
// 0x0010 (0x00D4 - 0x00C4)
class UBioPropertyEditorLevelNode : public UBioPropertyEditorBaseNode
{
public:
	FString                                            m_sCommand;                                       		// 0x00C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool SelectionAction ( );
};

// Class SFXGame.BioPropertyEditorLoadNode
// 0x0010 (0x00D4 - 0x00C4)
class UBioPropertyEditorLoadNode : public UBioPropertyEditorBaseNode
{
public:
	FString                                            Filename;                                         		// 0x00C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DecrementCurrentSelection ( );
	void IncrementCurrentSelection ( );
	bool SelectionAction ( );
};

// Class SFXGame.BioPropertyEditorPropertyNode
// 0x0028 (0x00EC - 0x00C4)
class UBioPropertyEditorPropertyNode : public UBioPropertyEditorBaseNode
{
public:
	FString                                            m_sValueString;                                   		// 0x00C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sDeliminator;                                   		// 0x00D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FPointer                                           Base;                                             		// 0x00E4 (0x0008) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DecrementCurrentSelection ( );
	void IncrementCurrentSelection ( );
	void RightTriggerAction ( );
	void LeftTriggerAction ( );
	bool SelectionAction ( );
	FString getDisplayText ( unsigned long selectable );
	bool MakeNodes ( FString const& thisOneOnly );
	void SetObject ( class UObject* Obj );
};

// Class SFXGame.BioPropertyEditorArrayNode
// 0x0008 (0x00F4 - 0x00EC)
class UBioPropertyEditorArrayNode : public UBioPropertyEditorPropertyNode
{
public:
	class UProperty*                                   m_Property;                                       		// 0x00EC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool SelectionAction ( );
};

// Class SFXGame.BioPropertyEditorEditNode
// 0x0014 (0x0100 - 0x00EC)
class UBioPropertyEditorEditNode : public UBioPropertyEditorPropertyNode
{
public:
	class UProperty*                                   prop;                                             		// 0x00EC (0x0008) [0x0000000000000000]              
	float                                              StepSize;                                         		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              floatVal;                                         		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                otherVal;                                         		// 0x00FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	FString getDisplayText ( unsigned long selectable );
	bool SelectionAction ( );
};

// Class SFXGame.BioPropertyEditorEditableNode
// 0x0029 (0x0115 - 0x00EC)
class UBioPropertyEditorEditableNode : public UBioPropertyEditorPropertyNode
{
public:
	class UProperty*                                   prop;                                             		// 0x00EC (0x0008) [0x0000000000000000]              
	class UProperty*                                   m_arrayProperty;                                  		// 0x00F4 (0x0008) [0x0000000000000000]              
	int                                                integerVal;                                       		// 0x00FC (0x0004) [0x0000000000000000]              
	float                                              floatVal;                                         		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                m_iOffset;                                        		// 0x0104 (0x0004) [0x0000000000000000]              
	int                                                m_iIndex;                                         		// 0x0108 (0x0004) [0x0000000000000000]              
	float                                              StepSize;                                         		// 0x010C (0x0004) [0x0000000000000000]              
	unsigned long                                      boolVal : 1;                                      		// 0x0110 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      alreadyEdited : 1;                                		// 0x0110 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      byteVal;                                          		// 0x0114 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void AcceptNewValue ( );
	void DoChange ( float Delta );
	void RightTriggerAction ( );
	void LeftTriggerAction ( );
	void DecrementCurrentSelection ( );
	void IncrementCurrentSelection ( );
	bool SelectionAction ( );
};

// Class SFXGame.BioPropertyEditorReadOnlyNode
// 0x0010 (0x00FC - 0x00EC)
class UBioPropertyEditorReadOnlyNode : public UBioPropertyEditorPropertyNode
{
public:
	FString                                            sDisplay;                                         		// 0x00EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool SelectionAction ( );
};

// Class SFXGame.BioPropertyEditorSaveNode
// 0x0010 (0x00D4 - 0x00C4)
class UBioPropertyEditorSaveNode : public UBioPropertyEditorBaseNode
{
public:
	FString                                            Filename;                                         		// 0x00C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DecrementCurrentSelection ( );
	void IncrementCurrentSelection ( );
	bool SelectionAction ( );
};

// Class SFXGame.BioPropertyEditorVolatileNode
// 0x0000 (0x00C4 - 0x00C4)
class UBioPropertyEditorVolatileNode : public UBioPropertyEditorBaseNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool SelectionAction ( );
};

// Class SFXGame.BioConvNodeTrackDebug
// 0x0010 (0x00B8 - 0x00A8)
class UBioConvNodeTrackDebug : public UBioInterpTrack
{
public:
	TArray<FString>                                    m_aDbgStrings;                                    		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	FString eventKeyDataDisplayName ( );
	FString eventKeyDataArrayName ( );
	FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.BioConvNodeTrackDebugInst
// 0x0008 (0x006C - 0x0064)
class UBioConvNodeTrackDebugInst : public UBioInterpTrackInst
{
public:
	class UBioSeqAct_DebugMessage*                     m_pMsgObj;                                        		// 0x0064 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioEvtSysTrackDOF
// 0x002C (0x00D4 - 0x00A8)
class UBioEvtSysTrackDOF : public UBioInterpTrack
{
public:
	TArray<struct FBioDOFTrackData>                    m_aDOFData;                                       		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              m_fDOFDefaultBlurKernel;                          		// 0x00B8 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fDOFDefaultExponent;                            		// 0x00BC (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fDOFDefaultFStop;                               		// 0x00C0 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fDOFDefaultMaxNearBlur;                         		// 0x00C4 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fDOFDefaultMaxFarBlur;                          		// 0x00C8 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fBloomScale;                                    		// 0x00CC (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fBlurBloomKernelSize;                           		// 0x00D0 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	FString eventGetNewTrackSubMenuName ( );
	FString eventKeyDataDisplayName ( );
	FString eventKeyDataArrayName ( );
	FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.BioEvtSysTrackDOFInst
// 0x0034 (0x0098 - 0x0064)
class UBioEvtSysTrackDOFInst : public UBioInterpTrackInst
{
public:
	struct FVector                                     m_vOldFocusPosition;                              		// 0x0064 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fOldFalloffExponent;                            		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fOldFStop;                                      		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fOldBlurKernelSize;                             		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fOldMaxNearBlurAmount;                          		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fOldMaxFarBlurAmount;                           		// 0x0080 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      m_cOldModulateBlurColor;                          		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fOldFocusInnerRadius;                           		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fOldFocusDistance;                              		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fInterpolateElapsed;                            		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nCurEffect;                                     		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioEvtSysTrackFuncShot
// 0x0018 (0x00C0 - 0x00A8)
class UBioEvtSysTrackFuncShot : public UBioInterpTrack
{
public:
	TArray<struct FBioFuncShotData>                    m_aShotData;                                      		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct SFXName                                     m_nmOldShotType;                                  		// 0x00B8 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	FString eventGetNewTrackSubMenuName ( );
	FString eventKeyDataDisplayName ( );
	FString eventKeyDataArrayName ( );
	FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.BioEvtSysTrackFuncShotInst
// 0x0000 (0x0064 - 0x0064)
class UBioEvtSysTrackFuncShotInst : public UBioInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioEvtSysTrackGesture
// 0x0063 (0x010B - 0x00A8)
class UBioEvtSysTrackGesture : public UBioInterpTrack
{
public:
	TArray<struct FBioGestureData>                     m_aGestures;                                      		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	FString                                            sActorTag;                                        		// 0x00B8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	FString                                            m_sOldActorTag;                                   		// 0x00C8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct SFXName                                     nmStartingPoseSet;                                		// 0x00D8 (0x0008) [0x0000000000000000]              
	struct SFXName                                     nmStartingPoseAnim;                               		// 0x00E0 (0x0008) [0x0000000000000000]              
	class UBioGestureRulesData*                        pRulesData;                                       		// 0x00E8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioGestureRuntimeData*                      pRuntimeData;                                     		// 0x00F0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UMaterial*                                   m_pRightArrow;                                    		// 0x00F8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fStartPoseOffset;                               		// 0x0100 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bActorChanged : 1;                              		// 0x0104 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bReloadPreviewAnimsets : 1;                     		// 0x0104 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bARPUGenerated : 1;                             		// 0x0104 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bAllowMovingChainKeys : 1;                      		// 0x0104 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bUseDynamicAnimsets : 1;                        		// 0x0104 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned char                                      eStartingPose;                                    		// 0x0108 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      eOverrideType;                                    		// 0x0109 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      eFindActorMode;                                   		// 0x010A (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	FString eventGetNewTrackSubMenuName ( );
	FString eventKeyDataDisplayName ( );
	FString eventKeyDataArrayName ( );
	FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.BioEvtSysTrackGestureInst
// 0x0054 (0x00B8 - 0x0064)
class UBioEvtSysTrackGestureInst : public UBioInterpTrackInst
{
public:
	struct FMap_Mirror                                 m_mapCachedAnimsets;                              		// 0x0064 (0x0048) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class ABioPawn*                                    m_pPawn;                                          		// 0x00AC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bActiveTrack : 1;                               		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class AActor* FindActorByTagForScript ( struct SFXName nmTagToFind, class UInterpTrackInst* pTrackInst );
};

// Class SFXGame.BioEvtSysTrackLookAt
// 0x0024 (0x00CC - 0x00A8)
class UBioEvtSysTrackLookAt : public UBioInterpTrack
{
public:
	TArray<struct FBioLookAtTrackData>                 m_aLookAtKeys;                                    		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	FString                                            m_sActorTag;                                      		// 0x00B8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      m_bActorChanged : 1;                              		// 0x00C8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	FString eventGetNewTrackSubMenuName ( );
	FString eventKeyDataDisplayName ( );
	FString eventKeyDataArrayName ( );
	FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.BioEvtSysTrackLookAtInst
// 0x0008 (0x006C - 0x0064)
class UBioEvtSysTrackLookAtInst : public UBioInterpTrackInst
{
public:
	class ABioPawn*                                    m_pPawn;                                          		// 0x0064 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioEvtSysTrackSetFacing
// 0x0034 (0x00DC - 0x00A8)
class UBioEvtSysTrackSetFacing : public UBioInterpTrack
{
public:
	TArray<struct FBioSetFacingData>                   m_aFacingKeys;                                    		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	FString                                            m_sActorTag;                                      		// 0x00B8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	FString                                            m_sOldActorTag;                                   		// 0x00C8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      m_bActorChanged : 1;                              		// 0x00D8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	FString eventGetNewTrackSubMenuName ( );
	FString eventKeyDataDisplayName ( );
	FString eventKeyDataArrayName ( );
	FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.BioEvtSysTrackSetFacingInst
// 0x0008 (0x006C - 0x0064)
class UBioEvtSysTrackSetFacingInst : public UBioInterpTrackInst
{
public:
	class AActor*                                      m_pActor;                                         		// 0x0064 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioEvtSysTrackSubtitles
// 0x0018 (0x00C0 - 0x00A8)
class UBioEvtSysTrackSubtitles : public UBioInterpTrack
{
public:
	TArray<struct FBioSubtitleTrackData>               m_aSubtitleData;                                  		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UBioTlkFileSet*                              m_pTlkFileSet;                                    		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	FString eventGetNewTrackSubMenuName ( );
	FString eventKeyDataDisplayName ( );
	FString eventKeyDataArrayName ( );
	FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.BioEvtSysTrackSubtitlesInst
// 0x0004 (0x0068 - 0x0064)
class UBioEvtSysTrackSubtitlesInst : public UBioInterpTrackInst
{
public:
	unsigned long                                      m_bAddRefTlkTable : 1;                            		// 0x0064 (0x0004) [0x0000000000001000] [0x00000001] ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioEvtSysTrackSwitchCamera
// 0x0010 (0x00B8 - 0x00A8)
class UBioEvtSysTrackSwitchCamera : public UBioInterpTrack
{
public:
	TArray<struct FBioCameraSwitchData>                m_aCameras;                                       		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	FString eventGetNewTrackSubMenuName ( );
	FString eventKeyDataDisplayName ( );
	FString eventKeyDataArrayName ( );
	FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.BioEvtSysTrackSwitchCameraInst
// 0x0008 (0x006C - 0x0064)
class UBioEvtSysTrackSwitchCameraInst : public UBioInterpTrackInst
{
public:
	class UBioEvtSysTrackDOF*                          m_pDOFTrack;                                      		// 0x0064 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioEvtSysTrackVOElements
// 0x006C (0x0114 - 0x00A8)
class UBioEvtSysTrackVOElements : public UBioInterpTrack
{
public:
	struct FFaceFXInfo                                 fxInfo;                                           		// 0x00A8 (0x0030) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	FString                                            sActorTag;                                        		// 0x00D8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sAnimSetName;                                   		// 0x00E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sAnimName;                                      		// 0x00F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nStrRefID;                                      		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPreviewLeadInTime;                             		// 0x010C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bIgnoreExportShrinking : 1;                     		// 0x0110 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bIgnoreExportGrowing : 1;                       		// 0x0110 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bPlaySound : 1;                                 		// 0x0110 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	FString eventGetNewTrackSubMenuName ( );
	FString eventKeyDataDisplayName ( );
	FString eventKeyDataArrayName ( );
	FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class SFXGame.BioEvtSysTrackVOElementsInst
// 0x00C4 (0x0128 - 0x0064)
class UBioEvtSysTrackVOElementsInst : public UBioInterpTrackInst
{
public:
	struct FMap_Mirror                                 m_mapPawnHistory;                                 		// 0x0064 (0x0048) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray<struct FBioVOActorType>                     m_aDefaultActorTypes;                             		// 0x00AC (0x0010) [0x0000000000406000]              ( CPF_Transient | CPF_Config | CPF_NeedCtorLink )
	struct FVector                                     m_vCamPos;                                        		// 0x00BC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    m_rCamRot;                                        		// 0x00C8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FBioStageDOFData                            m_tDOFData;                                       		// 0x00D4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_nProceduralCameraClass;                         		// 0x00E0 (0x0008) [0x0000000000004000]              ( CPF_Config )
	class UBioActorFactory*                            m_pFactory;                                       		// 0x00E8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_pConvOwner;                                     		// 0x00F0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_nmConvOwnerTag;                                 		// 0x00F8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioStage*                                   m_pConvStage;                                     		// 0x0100 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioConversation*                            m_pConversation;                                  		// 0x0108 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioPawn*                                    m_pPawn;                                          		// 0x0110 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nSpeakerIndex;                                  		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fFOV;                                           		// 0x011C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fNearPlane;                                     		// 0x0120 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bGoodCamData : 1;                               		// 0x0124 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bMale : 1;                                      		// 0x0124 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioScalarParameterInstTrack
// 0x0004 (0x0064 - 0x0060)
class UBioScalarParameterInstTrack : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                       		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioScalarParameterTrack
// 0x0014 (0x00BC - 0x00A8)
class UBioScalarParameterTrack : public UInterpTrackFloatBase
{
public:
	struct SFXName                                     PropertyName;                                     		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioVisualEffect*                            m_pParentEffect;                                  		// 0x00B0 (0x0008) [0x0000000000000000]              
	float                                              InterpValue;                                      		// 0x00B8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioVectorParameterInstTrack
// 0x000C (0x006C - 0x0060)
class UBioVectorParameterInstTrack : public UInterpTrackInst
{
public:
	struct FVector                                     ResetVector;                                      		// 0x0060 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioVectorParameterTrack
// 0x001C (0x00C4 - 0x00A8)
class UBioVectorParameterTrack : public UInterpTrackVectorBase
{
public:
	struct FVector                                     InterpValue;                                      		// 0x00A8 (0x000C) [0x0000000000000000]              
	struct SFXName                                     PropertyName;                                     		// 0x00B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioVisualEffect*                            m_pParentEffect;                                  		// 0x00BC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioVisualEffectTrack
// 0x0018 (0x00A8 - 0x0090)
class UBioVisualEffectTrack : public UInterpTrack
{
public:
	TArray<struct FBioVisualEffectTrackKey>            VisualEffects;                                    		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ABioVisualEffect*                            Properties;                                       		// 0x00A0 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioVisualEffectTrackInst
// 0x000C (0x006C - 0x0060)
class UBioVisualEffectTrackInst : public UInterpTrackInst
{
public:
	class ABioVisualEffect*                            m_VFX;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	float                                              LastUpdatePosition;                               		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Create ( class ABioVisualEffect* Base );
};

// Class SFXGame.BioInterpolator
// 0x0000 (0x0060 - 0x0060)
class UBioInterpolator : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void InterpolateFloatCurve ( float Source, float Target, float normalizedDisplacement, float* Output, struct FInterpCurveFloat* Curve );
	void InterpolateFloat ( unsigned char InterpolationMethod, float Source, float Target, float normalizedDisplacement, float* Output );
	void InterpolateVector ( unsigned char InterpolationMethod, struct FVector const& Source, struct FVector const& Target, float normalizedDisplacement, struct FVector* Output );
	void InterpolateRotator ( unsigned char InterpolationMethod, struct FRotator const& Source, struct FRotator const& Target, float normalizedDisplacement, struct FRotator* Output );
};

// Class SFXGame.BioInventory
// 0x0088 (0x00F4 - 0x006C)
class UBioInventory : public UBioBaseComponent
{
public:
	TArray<class UBioItem*>                            m_aItem;                                          		// 0x006C (0x0010) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray<struct FBioPlotPseudoItem>                  m_aPlotItem;                                      		// 0x007C (0x0010) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBio2DA*                                     m_oTreasureLookupTable;                           		// 0x008C (0x0008) [0x0000000000000000]              
	class UBio2DA*                                     m_oTreasureTable;                                 		// 0x0094 (0x0008) [0x0000000000000000]              
	class UBio2DA*                                     m_oTreasureDistribution;                          		// 0x009C (0x0008) [0x0000000000000000]              
	class UBio2DA*                                     m_oPlotItemTable;                                 		// 0x00A4 (0x0008) [0x0000000000000000]              
	class UBio2DA*                                     m_xModType2DA;                                    		// 0x00AC (0x0008) [0x0000000000000000]              
	int                                                srInventoryTitle;                                 		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nResourceCredits;                               		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                m_nResourceGrenades;                              		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              m_fResourceMedigel;                               		// 0x00C0 (0x0004) [0x0000000000000000]              
	float                                              m_fResourceSalvage;                               		// 0x00C4 (0x0004) [0x0000000000000000]              
	int                                                m_nMaxCredits;                                    		// 0x00C8 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                m_nMaxGrenades;                                   		// 0x00CC (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              m_fMaxMedigel;                                    		// 0x00D0 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              m_fMaxSalvage;                                    		// 0x00D4 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                m_nResourceIdOffset;                              		// 0x00D8 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                m_nPlotItemOffset;                                		// 0x00DC (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              m_fTreasureStdDev;                                		// 0x00E0 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              m_fNormalRandom2;                                 		// 0x00E4 (0x0004) [0x0000000000000000]              
	int                                                m_nMinScalingLevel;                               		// 0x00E8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_nMaxScalingLevel;                               		// 0x00EC (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      m_bUseLast : 1;                                   		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float GetMaxMedigel ( );
	int GetMaxGrenades ( );
	void Sort ( );
	void ClearNewItemFlags ( );
	bool IsPlotItem ( class UBioItem* oItem );
	class UClass* GetSaveObjectClass ( );
	void eventReadSaveObject ( class UBioBaseSaveObject* Save );
	class UBioBaseSaveObject* eventWriteSaveObject ( class UObject* InOuter, class UBioBaseSaveObject* Save );
	bool GrantScaledCredits ( int nSize, unsigned long i_bTickResource );
	float GetInventoryResourceFloat ( unsigned char eInvResType );
	void GetAttributeAdjustedAmountFloat ( unsigned char eInvResType, float* fAmt );
	void GetAttributeAdjustedAmountInt ( unsigned char eInvResType, int* nAmt );
	int GetInventoryResourceInt ( unsigned char eInvResType );
	void AdjustInventoryResourceFloat ( unsigned char eInvResType, float fAmt, unsigned long bUseTalentAdjustedResources, unsigned long bTickerResource );
	void AdjustInventoryResourceInt ( unsigned char eInvResType, int nAmt, unsigned long bUseTalentAdjustedResources, unsigned long bTickerResource );
	void Empty ( );
	bool IsEmpty ( );
	void TickerResources ( class UBioEventNotifier* notifier );
	void TickerItems ( class UBioEventNotifier* notifier );
	bool SubsumePlotItems ( class UBioInventory* Other, unsigned long bFlagAsNew );
	bool SubsumeResources ( class UBioInventory* Other, class UBioEventNotifier* notifier, unsigned long bUseTalentAdjustedResources, unsigned long bFlagAsNew );
	bool SubsumeItems ( class UBioInventory* Other, unsigned long bFlagAsNew );
	bool Subsume ( class UBioInventory* Other, unsigned long bFlagAsNew );
	void GenerateTreasure ( int treasureID, int challengeLevel, unsigned long shouldFilterItemsByConditional );
	class UBioItem* eventSwap ( int nIndex, class UBioItem* pItem );
	float Appraise ( int nIndex, unsigned char eResource );
	class UBioItem* Remove ( int nIndex );
	int Add ( class UBioItem* Item );
	int GetMaxSophistication ( );
	int GetMinSophistication ( );
	FString eventGetStringRepresentation ( );
};

// Class SFXGame.BioInventoryView
// 0x0020 (0x0080 - 0x0060)
class UBioInventoryView : public UObject
{
public:
	class ABioPawn*                                    m_pawn;                                           		// 0x0060 (0x0008) [0x0000000000000000]              
	class UBioInventory*                               m_oInventory;                                     		// 0x0068 (0x0008) [0x0000000000000000]              
	class UBioEquipment*                               m_oEquipment;                                     		// 0x0070 (0x0008) [0x0000000000000000]              
	class UBioItemSelection*                           m_itemSelection;                                  		// 0x0078 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetShieldRatio ( float ratio );
	float GetShieldRatio ( );
	void ReplaceSelectedItem ( );
	void RemoveSelectedItem ( );
	bool IsSelectedItemVolatile ( );
	class UBioItem* GetSelectedItem ( );
	bool UninstallXMod ( int xModType, int xModIndexInItem );
	bool InstallXMod ( int filteredIndex, int xModTypeUsedForFilter );
	bool Drop ( );
	bool Equip ( int filteredIndex, unsigned long bXferXMods );
	bool Unequip ( );
	bool SetTargetInventory ( class UBioInventory* pInv );
	bool SetTargetEquipment ( class UBioEquipment* pEqp );
	bool SetTarget ( class ABioPawn* pPawn );
	bool ResetTarget ( );
	bool SelectQuickslotItem ( unsigned char eType );
	bool SelectEquipmentItem ( unsigned char eSlot );
	bool SelectInventoryItem ( int Index );
	void ExtractXModIndices ( int nXModTypeID, TArray<int>* aIndices );
	void ExtractXModIndicesByEquipmentType ( unsigned char eEquipType, int xModTypeUsedForFilter, TArray<int>* aIndices );
	void ExtractEquippableIndices ( unsigned char eEquipType, TArray<int>* aEquipIndices );
	void ExtractWeaponIndices ( unsigned char eWeaponRangedType, TArray<int>* aEquipIndices );
	void ClearObjectRefs ( );
};

// Class SFXGame.BioInventoryGuiInterface
// 0x00D5 (0x0155 - 0x0080)
class UBioInventoryGuiInterface : public UBioInventoryView
{
public:
	struct FMultiMap_Mirror                            m_CachedItemInfo;                                 		// 0x0080 (0x0048) [0x0000000000001000]              ( CPF_Native )
	TArray<int>                                        lstRacialLabels;                                  		// 0x00C8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<struct FGuiEquipSlotDetails>                lstSlotDetails;                                   		// 0x00D8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<unsigned char>                              lstEquipSlotOrder;                                		// 0x00E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FItemInfo>                           EquippableItemsList;                              		// 0x00F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FResourceInfo>                       ResourcesList;                                    		// 0x0108 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              MaxDamagePerSecond;                               		// 0x0118 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxRange;                                         		// 0x011C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxHeatsinkEfficiency;                            		// 0x0120 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxKickbackEfficiency;                            		// 0x0124 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxChargeEfficiency;                              		// 0x0128 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxEffectBoost;                                   		// 0x012C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxDamageResistance;                              		// 0x0130 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxShieldStrength;                                		// 0x0134 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxTechResistance;                                		// 0x0138 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxGrenadeDamage;                                 		// 0x013C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxGrenadeImpulse;                                		// 0x0140 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxGrenadeRadius;                                 		// 0x0144 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                internalSortIndex;                                		// 0x0148 (0x0004) [0x0000000000000000]              
	int                                                m_nInventorySize;                                 		// 0x014C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bInventoryChangedSize : 1;                      		// 0x0150 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bDebugLoggingEnabled : 1;                       		// 0x0150 (0x0004) [0x0000000000006000] [0x00000002] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_shouldSortInventory : 1;                        		// 0x0150 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bShouldCacheInventoryInfo : 1;                  		// 0x0150 (0x0004) [0x0000000004000008] [0x00000008] ( CPF_ExportObject | CPF_EditInline )
	unsigned char                                      m_eCurrentSlot;                                   		// 0x0154 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void BuildEquippableXModList ( int nXModSlotType );
	float Appraise ( int nIndex, unsigned char eResource );
	void ConvertItemIntoResource ( int nFilteredIndex, unsigned char eResource, unsigned long SellAllJunked );
	int GetStatLabel ( unsigned char eStat );
	unsigned char GetPrevEquipSlot ( unsigned char eCompareSlot );
	unsigned char GetNextEquipSlot ( unsigned char eCompareSlot );
	unsigned char GetFirstEquipSlot ( );
	bool HasEquipSlot ( unsigned char eSlot );
	void DescribeGuiItemStats ( struct FBioInventoryGuiInterfaceItemStats const& Stats );
	void DescribeGuiItem ( struct FItemInfo const& ItemToDescribe );
	void ComplementAndScale ( float FMax, float* fValue );
	void Scale ( float FMax, float* fValue );
	bool Drop ( );
	bool Equip ( int filteredIndex, unsigned long bXferXMods );
	bool Unequip ( );
	bool DirectSetTargetInventory ( class UBioInventory* pInv );
	bool SetTargetInventory ( class UBioInventory* pInv );
	bool DirectSetTarget ( class ABioPawn* pPawn );
	bool SetTarget ( class ABioPawn* pPawn );
	bool GetEquippedItem ( struct FItemInfo* stEquippedItem );
	void SelectItemSlot ( unsigned char eSlot );
	void MapSlotToType ( unsigned char eSlot, int* nWeapon, int* nEquipment );
	void ItemStatValue ( class UBioItem* oItem, unsigned char eItemStatType, struct FBioInventoryGuiInterfaceItemStat* Stat );
	bool CanBearArmorWeight ( class ABioPawn* oPawn, class UBioItemArmor* oArmor );
	void PrepareSlotList ( unsigned char Slot, TArray<unsigned char>* SlotList );
	void BuildResourcesList ( );
	void BuildEquippableItemList ( );
	void BuildResourceInfo ( unsigned char eResource, float fQty, struct FResourceInfo* oResourceInfo );
	bool IsMerchandisable ( unsigned char eItemsSlot );
	struct FXModInfo eventCreateXModInfo ( class UBioItemXMod* oItem, int nXModType );
	struct FItemInfo eventCreateItemInfo ( class UBioItem* oItem, unsigned char slotType, int nOverrideIndex );
	void FullReset ( );
	void ClearCachedItemInfo ( );
	void CacheItemInfo ( class UBioItem* oItem, struct FItemInfo* rItemInfo );
	bool FindCachedItemInfo ( class UBioItem* oItem, unsigned char slotType, struct FItemInfo* rItemInfo );
	struct FBioInventoryGuiInterfaceItemStats ExtractRawItemStats ( class UBioItemSophisticated* oItem, unsigned char ePrimaryStatType, unsigned char eSecondaryStatType, unsigned char eTertiaryStatType );
	void GetStatTypes ( unsigned char eSlot, unsigned char* ePrimaryStatType, unsigned char* eSecondaryStatType, unsigned char* eTertiaryStatType );
	void FilterEquippableItemsByPlotConditional ( class ABioWorldInfo* WorldInfo );
	void SortEquippableItems ( int nSortMode );
};

// Class SFXGame.BioInventoryViewConsole
// 0x0000 (0x0080 - 0x0080)
class UBioInventoryViewConsole : public UBioInventoryView
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioItem
// 0x0048 (0x00B4 - 0x006C)
class UBioItem : public UBioBaseComponent
{
public:
	TArray<struct FBioItemPropertyStatus>              m_aItemPropertyStatus;                            		// 0x006C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioAppearanceItem*                          m_oAppearance;                                    		// 0x007C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBio2DA*                                     m_p2DA;                                           		// 0x0084 (0x0008) [0x0000000000000000]              
	class UBio2DA*                                     m_pCategory2DA;                                   		// 0x008C (0x0008) [0x0000000000000000]              
	class UBio2DA*                                     m_pItemProperty2DA;                               		// 0x0094 (0x0008) [0x0000000000000000]              
	class UBioAttributesItem*                          m_oAttributes;                                    		// 0x009C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                m_nID;                                            		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                m_plotConditionalID;                              		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                ItemSalvage;                                      		// 0x00AC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned long                                      m_bNewInInventory : 1;                            		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bJunkItem : 1;                                    		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UClass* GetSaveObjectClass ( );
	bool ComputeCategoryDisplayInfo ( int* categoryNameRef, int* categoryDescRef, int* categoryGuiIcon );
	void GenerateName ( FString* sName );
	bool GetItemPropertyInfo ( int nItemPropertyIndex, struct FBioItemPropertyInfo* stPropInfo );
	int GetNumItemProperties ( );
	int GetMaxItemPropertyCount ( );
	int GetItemGuiClassIcon ( );
	void eventRemoveItemProperty ( int nItemPropertyID );
	void eventAddItemProperty ( int nItemPropertyID );
	void Initialize ( );
	struct SFXName eventGetItemTypeName ( );
	float CalculateSalvageValue ( );
	float CalculatePrice ( );
	float CalculateBasePrice ( );
	bool ValidateItem ( );
	void eventDescribeItem ( );
};

// Class SFXGame.BioItemSophisticated
// 0x0037 (0x00EB - 0x00B4)
class UBioItemSophisticated : public UBioItem
{
public:
	TArray<int>                                        m_srSophistication;                               		// 0x00B4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UBio2DA*                                     m_pManufacturer2DA;                               		// 0x00C4 (0x0008) [0x0000000000000000]              
	class UBioMaterialOverride*                        m_pMaterialParameters;                            		// 0x00CC (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioGamePropertyContainer*                   m_oGameProperties;                                		// 0x00D4 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioGamePropertyManager*                     m_oAppliedGameProperties;                         		// 0x00DC (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                m_manufacturer;                                   		// 0x00E4 (0x0004) [0x0000000000000000]              
	unsigned char                                      m_MIN_ITEM_SOPHISTICATION;                        		// 0x00E8 (0x0001) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	unsigned char                                      m_MAX_ITEM_SOPHISTICATION;                        		// 0x00E9 (0x0001) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	unsigned char                                      m_eSophistication;                                		// 0x00EA (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UBioMaterialOverride* GetMaterialParameters ( );
	void GenerateName ( FString* sName );
	void GetManufacturerInfo ( struct FBioManufacturerDetails* stManufacturerDetails );
	void Initialize ( );
	void eventDescribeItem ( );
	void eventTickItem ( float fDeltaTime );
	class UPhysicsAsset* GetPhysicsAsset ( );
	class UAnimTree* GetAnimationTree ( );
	class UAnimSet* GetAnimationSet ( );
	void ApplyMaterials ( class USkeletalMeshComponent* oSkelMesh );
	class USkeletalMesh* GetSkeletalMesh ( );
	int ComputeSophistication ( class UBioPawnBehavior* oBehavior );
	void SetSophistication ( unsigned char sophistication );
	int ComputeNonWeaponSophistication ( class UBioPawnBehavior* oBehavior, unsigned char eEquipmentSlot );
};

// Class SFXGame.BioItemEquippable
// 0x0002 (0x00ED - 0x00EB)
class UBioItemEquippable : public UBioItemSophisticated
{
public:
	unsigned char                                      m_eEquipmentType;                                 		// 0x00EC (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnGPEvent ( unsigned char eEvent, class UObject* pTarget );
	void eventDescribeItem ( );
	void OnUnequipInternal ( class ABioPawn* oPawn );
	void eventOnUnequip ( class ABioPawn* oPawn );
	void OnEquipInternal ( class ABioPawn* oPawn );
	void eventOnEquip ( class ABioPawn* oPawn );
};

// Class SFXGame.BioItemXModdable
// 0x0013 (0x0100 - 0x00ED)
class UBioItemXModdable : public UBioItemEquippable
{
public:
	TArray<struct FBioItemXModdableSlotSpec>           m_slotSpecs;                                      		// 0x00F0 (0x0010) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnGPEvent ( unsigned char eEvent, class UObject* pTarget );
	void Load ( class UBioItemXModdableSaveObject* pData );
	void Save ( class UBioItemXModdableSaveObject* pData );
	class UBioItemXMod* GetXMod ( int nType, int nIndex );
	int FindXMod ( class UBioItemXMod* pXMod );
	class UBioItemXMod* UninstallXMod ( int Type, int Index );
	int InstallXMod ( class UBioItemXMod* xMod, int Index );
	class UClass* GetSaveObjectClass ( );
	bool RetrieveXModAtVirtualSlot ( int nSlot, struct FBioItemXModVirtualSlot* strVSlot );
	int TotalVirtualXModSlots ( );
	void eventTickItem ( float fDeltaTime );
	void eventDescribeItem ( );
	float AddPriceOfAllXMods ( );
};

// Class SFXGame.BioItemArmor
// 0x0001 (0x0101 - 0x0100)
class UBioItemArmor : public UBioItemXModdable
{
public:
	unsigned char                                      m_eArmorType;                                     		// 0x0100 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnUnequipInternal ( class ABioPawn* oPawn );
	void OnEquipInternal ( class ABioPawn* oPawn );
	void eventDescribeItem ( );
	int ComputeSophistication ( class UBioPawnBehavior* oBehavior );
	struct SFXName eventGetItemTypeName ( );
};

// Class SFXGame.BioItemArmorShielded
// 0x000B (0x010C - 0x0101)
class UBioItemArmorShielded : public UBioItemArmor
{
public:
	class UBioAttributesShield*                        m_pShieldAttributes;                              		// 0x0104 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Initialize ( );
	void eventDescribeItem ( );
	struct SFXName eventGetItemTypeName ( );
	void OnUnequipInternal ( class ABioPawn* oPawn );
	void OnEquipInternal ( class ABioPawn* oPawn );
	void InitializeShields ( class ABioPawn* oPawn );
};

// Class SFXGame.BioItemBioAmp
// 0x0000 (0x0100 - 0x0100)
class UBioItemBioAmp : public UBioItemXModdable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventDescribeItem ( );
	int ComputeSophistication ( class UBioPawnBehavior* oBehavior );
};

// Class SFXGame.BioItemGrenade
// 0x0040 (0x0140 - 0x0100)
class UBioItemGrenade : public UBioItemXModdable
{
public:
	class UBioVISGrenade*                              m_pVisualImpactSet;                               		// 0x0100 (0x0008) [0x0000000000000000]              
	class UBioVISGrenade*                              m_pVisualImpactSetDefault;                        		// 0x0108 (0x0008) [0x0000000000000000]              
	class USkeletalMesh*                               m_pMesh;                                          		// 0x0110 (0x0008) [0x0000000000000000]              
	class USkeletalMesh*                               m_pMeshDefault;                                   		// 0x0118 (0x0008) [0x0000000000000000]              
	class UPhysicsAsset*                               m_pPhysicsAsset;                                  		// 0x0120 (0x0008) [0x0000000000000000]              
	class UPhysicsAsset*                               m_pPhysicsAssetDefault;                           		// 0x0128 (0x0008) [0x0000000000000000]              
	class UBioDeathVFX*                                m_pDeathVFX;                                      		// 0x0130 (0x0008) [0x0000000000000000]              
	class UBioAttributesDamage*                        m_pDamageAttributes;                              		// 0x0138 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void GenerateName ( FString* sName );
	void SetDeathVFX ( class UBioDeathVFX* oDeathVFX );
	class UBioDeathVFX* GetDeathVFX ( );
	void SetPhysicsAsset ( class UPhysicsAsset* oPhysicsAsset );
	class UPhysicsAsset* GetPhysicsAsset ( );
	void SetMesh ( class USkeletalMesh* oMesh );
	class USkeletalMesh* GetMesh ( );
	void SetVisualImpactSet ( class UBioVISGrenade* oVisualImpactSet );
	class UBioVISGrenade* GetVisualImpactSet ( );
	float CalculatePrice ( );
	void Initialize ( );
	void OnUnequipInternal ( class ABioPawn* oPawn );
	void OnEquipInternal ( class ABioPawn* oPawn );
	struct SFXName eventGetItemTypeName ( );
};

// Class SFXGame.BioItemVehicleBase
// 0x0000 (0x0100 - 0x0100)
class UBioItemVehicleBase : public UBioItemXModdable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventDescribeItem ( );
};

// Class SFXGame.BioItemWeapon
// 0x0029 (0x0129 - 0x0100)
class UBioItemWeapon : public UBioItemXModdable
{
public:
	class UClass*                                      m_weaponClass;                                    		// 0x0100 (0x0008) [0x0000000000000000]              
	struct SFXName                                     m_nmHook;                                         		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     m_nmOffhandHook;                                  		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioWeaponSoundsSet*                         m_oSounds;                                        		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioAttributesDamage*                        m_pDamageAttributes;                              		// 0x0120 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned char                                      m_eWeaponType;                                    		// 0x0128 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventDescribeItem ( );
	struct SFXName eventGetItemTypeName ( );
	void Initialize ( );
};

// Class SFXGame.BioItemWeaponMelee
// 0x0004 (0x012D - 0x0129)
class UBioItemWeaponMelee : public UBioItemWeapon
{
public:
	unsigned char                                      m_eWeaponMeleeType;                               		// 0x012C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventDescribeItem ( );
	struct SFXName eventGetItemTypeName ( );
};

// Class SFXGame.BioItemWeaponRanged
// 0x0010 (0x0139 - 0x0129)
class UBioItemWeaponRanged : public UBioItemWeapon
{
public:
	float                                              m_fMinRangeConst;                                 		// 0x012C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fBestRangeConst;                                		// 0x0130 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fMaxRangeConst;                                 		// 0x0134 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      m_eWeaponRangedType;                              		// 0x0138 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float GetRoundsPerSecond ( );
	float GetKickback ( );
	float GetDriftAngleMax ( );
	float GetDriftAngleMin ( );
	void eventDescribeItem ( );
	void Initialize ( );
	void WeaponRanges ( float* MinRange, float* BestRange, float* MaxRange );
	int ComputeSophistication ( class UBioPawnBehavior* oBehavior );
	struct SFXName eventGetItemTypeName ( );
};

// Class SFXGame.BioItemXMod
// 0x0005 (0x00F0 - 0x00EB)
class UBioItemXMod : public UBioItemSophisticated
{
public:
	int                                                m_type;                                           		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UClass* GetSaveObjectClass ( );
	void OnGPEvent ( unsigned char eEvent, class UObject* pTarget );
	void eventDescribeItem ( );
};

// Class SFXGame.BioItemEnumerations
// 0x0000 (0x0060 - 0x0060)
class UBioItemEnumerations : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioItemImporter
// 0x0028 (0x0094 - 0x006C)
class UBioItemImporter : public UBioBaseComponent
{
public:
	struct SFXName                                     m_aItem2DANames[ 0x2 ];                           		// 0x006C (0x0010) [0x0000000000000000]              
	class UBio2DA*                                     m_aItem2DA[ 0x2 ];                                		// 0x007C (0x0010) [0x0000000000000000]              
	struct SFXName                                     m_nmDefaultItem2DAPackage;                        		// 0x008C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UBioItem* LoadGameItemByLabel ( FString const& sLabel, unsigned char sophistication, struct SFXName nmPackage, class UObject* InOuter, int manuID );
	class UBioItem* LoadGameItem ( int nID, unsigned char sophistication, struct SFXName nmPackage, class UObject* InOuter, int manuID, class UObject* InExistingObject );
};

// Class SFXGame.BioWeaponSoundsSet
// 0x0010 (0x0070 - 0x0060)
class UBioWeaponSoundsSet : public UObject
{
public:
	TArray<struct FBioSoundSet>                        m_aSoundSets;                                     		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioItemSelection
// 0x000C (0x006C - 0x0060)
class UBioItemSelection : public UObject
{
public:
	class UBioItem*                                    m_item;                                           		// 0x0060 (0x0008) [0x0000000000000000]              
	unsigned long                                      m_isVolatile : 1;                                 		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioItemSelectionPawn
// 0x0008 (0x0074 - 0x006C)
class UBioItemSelectionPawn : public UBioItemSelection
{
public:
	class UBioPawnItemInterface*                       m_itemInterface;                                  		// 0x006C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioItemSelectionEquipment
// 0x0001 (0x0075 - 0x0074)
class UBioItemSelectionEquipment : public UBioItemSelectionPawn
{
public:
	unsigned char                                      m_slot;                                           		// 0x0074 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioItemSelectionInventory
// 0x0000 (0x0074 - 0x0074)
class UBioItemSelectionInventory : public UBioItemSelectionPawn
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioItemSelectionQuickslot
// 0x0005 (0x0079 - 0x0074)
class UBioItemSelectionQuickslot : public UBioItemSelectionPawn
{
public:
	unsigned long                                      m_isActiveQuickslot : 1;                          		// 0x0074 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      m_weaponType;                                     		// 0x0078 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioItemSelectionSimple
// 0x0000 (0x006C - 0x006C)
class UBioItemSelectionSimple : public UBioItemSelection
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioActorFactoryLedgeMesh
// 0x0000 (0x00A0 - 0x00A0)
class UBioActorFactoryLedgeMesh : public UActorFactoryStaticMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioLedgeMeshActor
// 0x0000 (0x0294 - 0x0294)
class ABioLedgeMeshActor : public AStaticMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioLevelUpSystem
// 0x0074 (0x00E0 - 0x006C)
class UBioLevelUpSystem : public UBioBaseComponent
{
public:
	TArray<class UBio2DA*>                             m_aAutoLevelUpTemplate2DA;                        		// 0x006C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct SFXName                                     m_aLevelUp2DANames[ 0x5 ];                        		// 0x007C (0x0028) [0x0000000000000000]              
	class UBio2DA*                                     m_aLevelUp2DA[ 0x5 ];                             		// 0x00A4 (0x0028) [0x0000000000000000]              
	struct SFXName                                     m_nmLevelUpPackageName;                           		// 0x00CC (0x0008) [0x0000000000000000]              
	struct SFXName                                     m_nmAutoLevelUpTemplatePrefix;                    		// 0x00D4 (0x0008) [0x0000000000000000]              
	unsigned long                                      m_bDefault2DAsLoaded : 1;                         		// 0x00DC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool AutoLevelUp ( class UBioTalentContainer* talents, int templateID );
	bool ImmediateAutoLevelUp ( class UBioPawnBehavior* Target );
	bool LoadAutoLevelUpInformation ( int templateID, int* classID, int* DisplayName, int* DisplayDescription );
	bool ExperienceNeededForLevel ( int Level, int* experience );
	bool LevelUpPawn ( class ABioPawn* Pawn, int newLevel );
	bool AttemptLevelUp ( class ABioPlayerSquad* PlayerSquad );
};

// Class SFXGame.BioLookAt
// 0x0034 (0x0094 - 0x0060)
class UBioLookAt : public UObject
{
public:
	TArray<class UBioPawnLookAtController*>            m_Controllers;                                    		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      m_oTarget;                                        		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioPawn*                                    m_oPawn;                                          		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioLookAtDefinition*                        m_Definition;                                     		// 0x0080 (0x0008) [0x0000000000000000]              
	int                                                m_nRank;                                          		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fLookAtNoticeTimer;                             		// 0x008C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bDisabling : 1;                                 		// 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioLookAtDefinition
// 0x0022 (0x0082 - 0x0060)
class UBioLookAtDefinition : public UObject
{
public:
	TArray<struct FLookAtBoneDefinition>               BoneDefinitions;                                  		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct SFXName                                     RootAnimBoneName;                                 		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValidTargetAngleRange;                            		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      RootAnimBoneLookAtInverted : 1;                   		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RootAnimBoneUpInverted : 1;                       		// 0x007C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      RootBoneYawOnly : 1;                              		// 0x007C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      RootAnimBoneLookAtAxis;                           		// 0x0080 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RootAnimBoneUpAxis;                               		// 0x0081 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_SetLookAtTarget
// 0x0020 (0x0118 - 0x00F8)
class UBioSeqAct_SetLookAtTarget : public USequenceAction
{
public:
	TArray<class ABioPawn*>                            m_oPawn;                                          		// 0x00F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      m_oTarget;                                        		// 0x0108 (0x0008) [0x0000000000000000]              
	float                                              m_fTurnSpeed;                                     		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bEyes : 1;                                      		// 0x0114 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bHead : 1;                                      		// 0x0114 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bTorso : 1;                                     		// 0x0114 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bBody : 1;                                      		// 0x0114 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_SetLookAtTargetWithBoneDefs
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_SetLookAtTargetWithBoneDefs : public USequenceAction
{
public:
	class AActor*                                      m_oTarget;                                        		// 0x00F8 (0x0008) [0x0000000000000000]              
	class ABioPawn*                                    m_oPawn;                                          		// 0x0100 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_ToggleGlobalLookAt
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_ToggleGlobalLookAt : public USequenceAction
{
public:
	unsigned long                                      ForceState : 1;                                   		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      State : 1;                                        		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      Instant : 1;                                      		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMaterialExpressionAnisoSpec
// 0x0060 (0x00C0 - 0x0060)
class UBioMaterialExpressionAnisoSpec : public UMaterialExpression
{
public:
	struct FExpressionInput                            Direction;                                        		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            SpecColor;                                        		// 0x0080 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            SpecPower;                                        		// 0x00A0 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMaterialExpressionBlinnSpec
// 0x0060 (0x00C0 - 0x0060)
class UBioMaterialExpressionBlinnSpec : public UMaterialExpression
{
public:
	struct FExpressionInput                            Normal;                                           		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            SpecColor;                                        		// 0x0080 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            SpecPower;                                        		// 0x00A0 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMaterialExpressionDirt
// 0x0038 (0x0098 - 0x0060)
class UBioMaterialExpressionDirt : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060 (0x0020) [0x0000000000000000]              
	struct SFXName                                     GrimeScaleParamName;                              		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     GrimeTexParamName;                                		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  GrimeTex;                                         		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMaterialExpressionFresnel
// 0x0028 (0x0088 - 0x0060)
class UBioMaterialExpressionFresnel : public UMaterialExpression
{
public:
	struct FExpressionInput                            Normal;                                           		// 0x0060 (0x0020) [0x0000000000000000]              
	float                                              Power;                                            		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      Inverted : 1;                                     		// 0x0084 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMaterialExpressionHalfAngle
// 0x0000 (0x0060 - 0x0060)
class UBioMaterialExpressionHalfAngle : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMaterialExpressionKeyedFlipbook
// 0x0050 (0x00B0 - 0x0060)
class UBioMaterialExpressionKeyedFlipbook : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coord;                                            		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            Time;                                             		// 0x0080 (0x0020) [0x0000000000000000]              
	class UTexture2D*                                  FlipTex;                                          		// 0x00A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                FlipTexRows;                                      		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FlipTexCols;                                      		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMaterialExpressionPhongSpec
// 0x0060 (0x00C0 - 0x0060)
class UBioMaterialExpressionPhongSpec : public UMaterialExpression
{
public:
	struct FExpressionInput                            Normal;                                           		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            SpecColor;                                        		// 0x0080 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            SpecPower;                                        		// 0x00A0 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMaterialExpressionSineSubtend
// 0x0040 (0x00A0 - 0x0060)
class UBioMaterialExpressionSineSubtend : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0080 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMaterialExpressionSpecPower
// 0x0020 (0x0080 - 0x0060)
class UBioMaterialExpressionSpecPower : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMaterialOverride
// 0x0030 (0x0090 - 0x0060)
class UBioMaterialOverride : public UObject
{
public:
	TArray<struct FTextureParameter>                   m_aTextureOverrides;                              		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FColorParameter>                     m_aColorOverrides;                                		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FScalarParameter>                    m_aScalarOverrides;                               		// 0x0080 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UClass* GetSaveObjectClass ( );
};

// Class SFXGame.BioMorphFace
// 0x0070 (0x00D0 - 0x0060)
class UBioMorphFace : public UObject
{
public:
	TArray<FPointer>                                   m_aVertexBuffers;                                 		// 0x0060 (0x0010) [0x0000000000001000]              ( CPF_Native )
	TArray<class USkeletalMesh*>                       m_oOtherMeshes;                                   		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FMorphFeature>                       m_aMorphFeatures;                                 		// 0x0080 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FOffsetBonePos>                      m_aFinalSkeleton;                                 		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FPointer                                           ReleaseResourcesFence;                            		// 0x00A0 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class USkeletalMesh*                               m_oBaseHead;                                      		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               m_oHairMesh;                                      		// 0x00B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMorphTargetSet*                             m_oMorphTargetSet;                                		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAnimTree*                                   m_oAnimTree;                                      		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioMaterialOverride*                        m_oMaterialOverrides;                             		// 0x00C8 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UClass* GetSaveObjectClass ( );
	void SetPosition ( int Buffer, int vert, struct FVector const& V );
	struct FVector GetPosition ( int Buffer, int vert );
	int GetNumVerts ( int Buffer );
	int GetNumVertexBuffers ( );
	void ScriptUpdateMorph ( );
	void RefreshBuffers ( TArray<int> const& BufferIndices );
};

// Class SFXGame.BioMorphFaceFESliderBase
// 0x001C (0x007C - 0x0060)
class UBioMorphFaceFESliderBase : public UObject
{
public:
	FString                                            m_nName;                                          		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioMorphFaceFrontEnd*                       m_oMorphFaceFrontEnd;                             		// 0x0070 (0x0008) [0x0000000000000000]              
	unsigned long                                      m_bStepped : 1;                                   		// 0x0078 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMorphFaceFESliderColour
// 0x0020 (0x009C - 0x007C)
class UBioMorphFaceFESliderColour : public UBioMorphFaceFESliderBase
{
public:
	FString                                            m_sParameterName;                                 		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FColor>                              m_acColours;                                      		// 0x008C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMorphFaceFESliderHair
// 0x0000 (0x007C - 0x007C)
class UBioMorphFaceFESliderHair : public UBioMorphFaceFESliderBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMorphFaceFESliderMorph
// 0x002C (0x00A8 - 0x007C)
class UBioMorphFaceFESliderMorph : public UBioMorphFaceFESliderBase
{
public:
	FString                                            m_sMorph_Positive;                                		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sMorph_Negative;                                		// 0x008C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fRange;                                         		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              m_fRandomRange;                                   		// 0x00A0 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bSingle : 1;                                    		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMorphFaceFESliderScalar
// 0x0020 (0x009C - 0x007C)
class UBioMorphFaceFESliderScalar : public UBioMorphFaceFESliderBase
{
public:
	FString                                            m_sParameterName;                                 		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<float>                                      m_afValues;                                       		// 0x008C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMorphFaceFESliderSetMorph
// 0x0020 (0x009C - 0x007C)
class UBioMorphFaceFESliderSetMorph : public UBioMorphFaceFESliderBase
{
public:
	FString                                            m_sMorphName;                                     		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<float>                                      m_afValues;                                       		// 0x008C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMorphFaceFESliderTexture
// 0x0020 (0x009C - 0x007C)
class UBioMorphFaceFESliderTexture : public UBioMorphFaceFESliderBase
{
public:
	FString                                            m_sParameterName;                                 		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class UTexture*>                            m_atTexture;                                      		// 0x008C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMorphUtility
// 0x0000 (0x0060 - 0x0060)
class UBioMorphUtility : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMorphFaceFrontEnd
// 0x0244 (0x02A4 - 0x0060)
class UBioMorphFaceFrontEnd : public UBioMorphUtility
{
public:
	struct FSlider                                     m_pModifierData;                                  		// 0x0060 (0x0064) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FFaceData                                   m_oFaceData;                                      		// 0x00C4 (0x0040) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_s2DAPackage;                                    		// 0x0104 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	FString                                            m_sMorph2DA;                                      		// 0x0114 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	FString                                            m_sMasterMorphPackage;                            		// 0x0124 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	FString                                            m_sMorphPackageMale;                              		// 0x0134 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	FString                                            m_sMorphPackageFemale;                            		// 0x0144 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	FString                                            m_sMorphBaseMale;                                 		// 0x0154 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	FString                                            m_sMorphBaseFemale;                               		// 0x0164 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	FString                                            m_sMorphMaleHairPackage;                          		// 0x0174 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	FString                                            m_sMorphFemaleHairPackage;                        		// 0x0184 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	FString                                            m_sMorphMaleMaterialPackage;                      		// 0x0194 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	FString                                            m_sMorphFemaleMaterialPackage;                    		// 0x01A4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	FString                                            m_sPlayerName;                                    		// 0x01B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FBaseHeads                                  m_oBaseSettings;                                  		// 0x01C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FBaseHeads>                          m_aBaseHeads;                                     		// 0x01D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sHairPackage;                                   		// 0x01E4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sMaterialPackage;                               		// 0x01F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class UObject*>                             m_aoObjectsInUse_2DAs;                            		// 0x0204 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class UObject*>                             m_aoObjectsInUse_Hair;                            		// 0x0214 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class UObject*>                             m_aoObjectsInUse_Materials;                       		// 0x0224 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class UTexture2D*>                          m_aoTexturesToBePrimed;                           		// 0x0234 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USkeletalMeshComponent*                      m_oHeadMeshComp;                                  		// 0x0244 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      m_oHairMeshComp;                                  		// 0x024C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioMorphFace*                               m_oOriginalFace;                                  		// 0x0254 (0x0008) [0x0000000000000000]              
	class UBioMorphFace*                               m_oMorphFace;                                     		// 0x025C (0x0008) [0x0000000000000000]              
	class UMaterialInstanceConstant*                   m_oOriginalMaterial;                              		// 0x0264 (0x0008) [0x0000000000000000]              
	class USkeletalMesh*                               m_oOriginalMesh;                                  		// 0x026C (0x0008) [0x0000000000000000]              
	class UBioPawnBehavior*                            m_oBehavior;                                      		// 0x0274 (0x0008) [0x0000000000000000]              
	class ABioPawn*                                    m_oPawn;                                          		// 0x027C (0x0008) [0x0000000000000000]              
	class UPackage*                                    m_pMorph2DAPackage;                               		// 0x0284 (0x0008) [0x0000000000000000]              
	class UPackage*                                    m_pMaterialsPackage;                              		// 0x028C (0x0008) [0x0000000000000000]              
	class UPackage*                                    m_pHairPackage;                                   		// 0x0294 (0x0008) [0x0000000000000000]              
	int                                                m_iCurrentBaseHead;                               		// 0x029C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bDebugStrings : 1;                              		// 0x02A0 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      m_bPlayerIsMale : 1;                              		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bMale2DAsLoaded : 1;                            		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bFemale2DAsLoaded : 1;                          		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void LogSliders ( );
	void SelectPreviousBaseHead ( );
	void SelectNextBaseHead ( );
	void SetPlayerName ( FString const& sPlayerName );
	void CheckEverythingPreloaded ( );
	void Preload2DAPackage ( unsigned long bPlayerIsMale );
	void Cleanup ( );
	void HandleSliderChange ( int categoryIndex, int sliderIndex, int SliderValue, unsigned long bUpdate );
	bool GetSliderNotched ( int categoryIndex, int sliderIndex );
	int GetSliderValue ( int categoryIndex, int sliderIndex );
	int GetSliderStep ( int categoryIndex, int sliderIndex );
	int GetSliderMax ( int categoryIndex, int sliderIndex );
	int GetSliderMin ( int categoryIndex, int sliderIndex );
	int GetSliderDesc ( int categoryIndex, int sliderIndex );
	int GetSliderLabel ( int categoryIndex, int sliderIndex );
	int GetNumSlidersInCategory ( int categoryIndex );
	int GetCategoryDescription ( int categoryIndex );
	int GetCategoryString ( int categoryIndex );
	int GetNumberOfFeatureCategories ( );
	void ResetCategory ( int nCategory, unsigned long bUpdate );
	void ResetAll ( );
	void Load2DAs ( unsigned long bPlayerIsMale, FString const& sPlayerName );
	void RandomizeCategory ( int nCategory, unsigned long bUpdate );
	void RandomizeAll ( );
	void Initialize ( class ABioPawn* pThePlayer, unsigned long bPlayerIsMale, unsigned long bReset );
};

// Class SFXGame.BioEmissionAreaList
// 0x0000 (0x0060 - 0x0060)
class UBioEmissionAreaList : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioEmissionAreaListBoneList
// 0x0010 (0x0070 - 0x0060)
class UBioEmissionAreaListBoneList : public UBioEmissionAreaList
{
public:
	TArray<struct FBoneListEmissionArea>               m_EmissionAreas;                                  		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioParticleModuleCollisionDecal
// 0x0037 (0x0170 - 0x0139)
class UBioParticleModuleCollisionDecal : public UParticleModuleCollision
{
public:
	FString                                            CollisionEmitter;                                 		// 0x013C (0x0010) [0x0000000002400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear )
	TArray<struct SFXName>                             ColorParams;                                      		// 0x014C (0x0010) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UBioDecalComponent*                          DecalTemplate;                                    		// 0x015C (0x0008) [0x0000000006080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	class UParticleSystem*                             CollisionEmitterTemplate;                         		// 0x0164 (0x0008) [0x0000000000000000]              
	unsigned long                                      bEnableMultiHitDecal : 1;                         		// 0x016C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioParticleModuleEmitterSpeedBase
// 0x0003 (0x0068 - 0x0065)
class UBioParticleModuleEmitterSpeedBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioParticleModuleMultiplyByEmitterSpeed
// 0x0011 (0x0079 - 0x0068)
class UBioParticleModuleMultiplyByEmitterSpeed : public UBioParticleModuleEmitterSpeedBase
{
public:
	float                                              MinUsedSpeed;                                     		// 0x0068 (0x0004) [0x000000000200000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NoClear )
	float                                              MaxUsedSpeed;                                     		// 0x006C (0x0004) [0x000000000200000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NoClear )
	float                                              MultiplierAtMin;                                  		// 0x0070 (0x0004) [0x000000000200000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NoClear )
	float                                              MultiplierAtMax;                                  		// 0x0074 (0x0004) [0x000000000200000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NoClear )
	unsigned char                                      MultipliedProperty;                               		// 0x0078 (0x0001) [0x000000000200000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioParticleModuleLocationAttachedMesh
// 0x0031 (0x00A5 - 0x0074)
class UBioParticleModuleLocationAttachedMesh : public UParticleModuleLocationBase
{
public:
	TArray<struct FEmissionAreaWeight>                 m_EmissionAreaWeights;                            		// 0x0074 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct SFXName>                             m_ValidEmissionSet;                               		// 0x0084 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioEmissionAreaList*                        m_EmissionAreaList;                               		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                BoneUpdateTickTag;                                		// 0x009C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      m_bCheckAgainstValidEmissionSet : 1;              		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUseAttachedLocalSpace : 1;                       		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseRenderMeshAsSource : 1;                       		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      m_SpecificationType;                              		// 0x00A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioParticleModuleLocationPrimitiveNearestSurface
// 0x001A (0x00E2 - 0x00C8)
class UBioParticleModuleLocationPrimitiveNearestSurface : public UParticleModuleLocationPrimitiveBase
{
public:
	TArray<struct FVector>                             m_aSearchDirections;                              		// 0x00C8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              fRadius;                                          		// 0x00D8 (0x0004) [0x0000000002000009]              ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	unsigned long                                      bInitialLocationOnly : 1;                         		// 0x00DC (0x0004) [0x0000000002000009] [0x00000001] ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	unsigned long                                      bMovingLocationOnly : 1;                          		// 0x00DC (0x0004) [0x0000000002000009] [0x00000002] ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	unsigned long                                      bDirectionRelativeToEmitter : 1;                  		// 0x00DC (0x0004) [0x0000000002000009] [0x00000004] ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	unsigned long                                      bTestActors : 1;                                  		// 0x00DC (0x0004) [0x0000000002000009] [0x00000008] ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	unsigned char                                      eIfNoCollision;                                   		// 0x00E0 (0x0001) [0x0000000002000009]              ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	unsigned char                                      eOnCollision;                                     		// 0x00E1 (0x0001) [0x0000000002000009]              ( CPF_Edit | CPF_ExportObject | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioParticleModuleSoundBase
// 0x0003 (0x0068 - 0x0065)
class UBioParticleModuleSoundBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioParticleModuleSound
// 0x0010 (0x0078 - 0x0068)
class UBioParticleModuleSound : public UBioParticleModuleSoundBase
{
public:
	class USoundCue*                                   oSoundCue;                                        		// 0x0068 (0x0008) [0x0000000002000009]              ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	int                                                ObjInstanceVersion;                               		// 0x0070 (0x0004) [0x0000000000000000]              
	unsigned long                                      bPerParticle : 1;                                 		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioParticleModuleVelocityWorldSpace
// 0x0000 (0x00BC - 0x00BC)
class UBioParticleModuleVelocityWorldSpace : public UParticleModuleVelocity
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioPawn
// 0x040A (0x0A57 - 0x064D)
class ABioPawn : public APawn
{
public:
	struct FMultiMap_Mirror                            m_mAnimsetRegistration;                           		// 0x0650 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray<class USkeletalMeshComponent*>              m_aoMeshes;                                       		// 0x0698 (0x0010) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray<class USkeletalMeshComponent*>              m_aoAccessories;                                  		// 0x06A8 (0x0010) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray<struct SFXName>                             AimNodes;                                         		// 0x06B8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FVector>                             AimNodeOffsets;                                   		// 0x06C8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	FString                                            m_sAudioAppearancePrefix;                         		// 0x06D8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FBioGestDataKey>                     m_aNewGestureData;                                		// 0x06E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FPawnFootStepData>                   m_PawnFootStepData;                               		// 0x06F8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<class UAnimSet*>                            m_aOriginalAnimSets;                              		// 0x0708 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<struct SFXName>                             m_afnCinematicLevels;                             		// 0x0718 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	FString                                            m_sWrinkleMaterialIdentifier;                     		// 0x0728 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<class UObject*>                             m_aAdditionalResourcesToCook;                     		// 0x0738 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      AIController;                                     		// 0x0748 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                IconicFemaleSkinToneColor;                        		// 0x0750 (0x0010) [0x0000000000000000]              
	struct FVector                                     m_vAimDirection;                                  		// 0x0760 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vSpawnLocation;                                 		// 0x076C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vSafeTeleportLocation;                          		// 0x0778 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    m_rLastGoodRotation;                              		// 0x0784 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vLastGoodLocation;                              		// 0x0790 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vLastGoodNormal;                                		// 0x079C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vBumpLastPosition;                              		// 0x07A8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vFinalRigidBodyPosition;                        		// 0x07B4 (0x000C) [0x0000000000000000]              
	struct FVector                                     CoverNormal;                                      		// 0x07C0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UBioEventDispatcher*                         m_oEventDispatcher;                               		// 0x07CC (0x0008) [0x0000000000000000]              
	class UBioPawnBehavior*                            m_oBehavior;                                      		// 0x07D4 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	struct SFXName                                     m_nmCustomAnimationOneShot;                       		// 0x07DC (0x0008) [0x0000000000000000]              
	struct SFXName                                     m_nmCustomAnimationLooping;                       		// 0x07E4 (0x0008) [0x0000000000000000]              
	class USkeletalMeshComponent*                      m_oHeadMesh;                                      		// 0x07EC (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      m_oHairMesh;                                      		// 0x07F4 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      m_oHeadGearMesh;                                  		// 0x07FC (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      m_oVisorMesh;                                     		// 0x0804 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMeshComponent*                      m_oFacePlateMesh;                                 		// 0x080C (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ABioVisualEffect*                            m_LifeCrust;                                      		// 0x0814 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioVisualEffect*                            m_LoopedFootstepEffect;                           		// 0x081C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ANavigationPoint*                            m_oLastPlayPenAnchor;                             		// 0x0824 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct SFXName                                     m_nmRagdollRecoverBone;                           		// 0x082C (0x0008) [0x0000000000000000]              
	struct SFXName                                     m_nmRagdollRecoverDirSwapBone;                    		// 0x0834 (0x0008) [0x0000000000000000]              
	struct SFXName                                     m_nmEventWeaponEquipStart;                        		// 0x083C (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct SFXName                                     m_nmEventWeaponEquipEnd;                          		// 0x0844 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            HopStartNav;                                      		// 0x084C (0x0008) [0x0000000000000000]              
	class ANavigationPoint*                            HopEndNav;                                        		// 0x0854 (0x0008) [0x0000000000000000]              
	class UBioLookAt*                                  m_oLookAtData;                                    		// 0x085C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ULightEnvironmentComponent*                  m_pLightEnvComponent;                             		// 0x0864 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioCoverCollisonCube*                       m_oCustomCollision;                               		// 0x086C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             m_oRollingIdle;                                   		// 0x0874 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             m_oRollingStartMoving;                            		// 0x087C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             m_pSndSetCurSound;                                		// 0x0884 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UBioCreatureSoundSet*                        m_pOverrideSndSetVOPkg;                           		// 0x088C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UFaceFXAnimSet*                              m_pOverrideSndSetFaceFXPkg;                       		// 0x0894 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioChatterSystem*                           m_pChatterSystem;                                 		// 0x089C (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UAudioComponent*                             m_pFacialAudioComp;                               		// 0x08A4 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAnimTree*                                   m_pOriginalAnimTree;                              		// 0x08AC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UAudioComponent*                             m_pHeartbeatSound;                                		// 0x08B4 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ASFXDynamicEdgeMarker*                       CurrentEdge;                                      		// 0x08BC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     EyeNoiseNodeName;                                 		// 0x08C4 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct SFXName                                     IconicFemaleSkinToneName;                         		// 0x08CC (0x0008) [0x0000000000000000]              
	class UBioGestureAnimSetMgr*                       m_pAnimSetMgr;                                    		// 0x08D4 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                m_nTalkedToCount;                                 		// 0x08DC (0x0004) [0x0000000000000000]              
	float                                              m_fBioFallHeight;                                 		// 0x08E0 (0x0004) [0x0000000000000000]              
	float                                              m_fGrimeGrimeLevel;                               		// 0x08E4 (0x0004) [0x0000000000000000]              
	float                                              m_fGrimeDirtLevel;                                		// 0x08E8 (0x0004) [0x0000000000000000]              
	float                                              m_fGrimeCombatLevel;                              		// 0x08EC (0x0004) [0x0000000000000000]              
	float                                              m_fLifeCrustCount;                                		// 0x08F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fRagdollStartTime;                              		// 0x08F4 (0x0004) [0x0000000000000000]              
	float                                              m_fRagdollRecoverPhysBlendTime;                   		// 0x08F8 (0x0004) [0x0000000000000000]              
	float                                              m_fCorpseCleanupFirstAttemptTime;                 		// 0x08FC (0x0004) [0x0000000000006002]              ( CPF_Const | CPF_Transient | CPF_Config )
	float                                              m_fCorpseCleanupAttemptRetryTime;                 		// 0x0900 (0x0004) [0x0000000000006002]              ( CPF_Const | CPF_Transient | CPF_Config )
	int                                                m_nMaxCorpseVisibilityCleanupAttempts;            		// 0x0904 (0x0004) [0x0000000000006002]              ( CPF_Const | CPF_Transient | CPF_Config )
	float                                              m_fMaxCorpseCleanupDistanceThreshold;             		// 0x0908 (0x0004) [0x0000000000006002]              ( CPF_Const | CPF_Transient | CPF_Config )
	float                                              m_fMaxCorpseCleanupScreenSizeThreshold;           		// 0x090C (0x0004) [0x0000000000006002]              ( CPF_Const | CPF_Transient | CPF_Config )
	int                                                m_nCorpseCleanupAttempts;                         		// 0x0910 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLookAtSpeed;                                   		// 0x0914 (0x0004) [0x0000000000000000]              
	float                                              m_fLookAtMinHoldTime;                             		// 0x0918 (0x0004) [0x0000000000000000]              
	float                                              m_fLookAtMaxHoldTime;                             		// 0x091C (0x0004) [0x0000000000000000]              
	float                                              m_fLookAtMaxAngle;                                		// 0x0920 (0x0004) [0x0000000000000000]              
	float                                              m_fLookAtHoldTime;                                		// 0x0924 (0x0004) [0x0000000000000000]              
	float                                              m_fRunAnimPlaybackPos;                            		// 0x0928 (0x0004) [0x0000000000000000]              
	float                                              m_fRunAnimPlaybackRate;                           		// 0x092C (0x0004) [0x0000000000000000]              
	float                                              m_fRunAnimPlaybackLen;                            		// 0x0930 (0x0004) [0x0000000000000000]              
	float                                              m_fWalkAnimPlaybackPos;                           		// 0x0934 (0x0004) [0x0000000000000000]              
	float                                              m_fWalkAnimPlaybackRate;                          		// 0x0938 (0x0004) [0x0000000000000000]              
	float                                              m_fWalkAnimPlaybackLen;                           		// 0x093C (0x0004) [0x0000000000000000]              
	float                                              m_fWalkStopDistance;                              		// 0x0940 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fRunStopDistance;                               		// 0x0944 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fCollisionReadyHeight;                          		// 0x0948 (0x0004) [0x0000000000000000]              
	int                                                m_nRootMotionEnabledCount;                        		// 0x094C (0x0004) [0x0000000000000000]              
	int                                                AnimationTransitionCount;                         		// 0x0950 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                AnimationTransitionPending;                       		// 0x0954 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              m_fGestureBlendTime;                              		// 0x0958 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fBumpMultiplierMin;                             		// 0x095C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fBumpMultiplierMax;                             		// 0x0960 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fLookMultiplier;                                		// 0x0964 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PortArmsTimer;                                    		// 0x0968 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PortArmsPlayerInterval;                           		// 0x096C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              PortArmsNPCInterval;                              		// 0x0970 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              PortArmsWedgeHeight;                              		// 0x0974 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              PortArmsWedgeRadius;                              		// 0x0978 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              CoverPlayerInterval;                              		// 0x097C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              CoverNPCInterval;                                 		// 0x0980 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              CoverTimer;                                       		// 0x0984 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CoverTestDistance;                                		// 0x0988 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              CoverFireTestDistance;                            		// 0x098C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              CoverTestAngle;                                   		// 0x0990 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              CoverTestCameraAngle;                             		// 0x0994 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CoverFireTestRadius;                              		// 0x0998 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              CoverFireTestHeight;                              		// 0x099C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              CoverStepTestRadius;                              		// 0x09A0 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              CoverStepTestHeight;                              		// 0x09A4 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                nCoverLeanFlags;                                  		// 0x09A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SnapToEdgeRange;                                  		// 0x09AC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                nCoverLeanRequests;                               		// 0x09B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fProximityAlarm;                                		// 0x09B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ProximityAlarmInterval;                           		// 0x09B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ProximityTimer;                                   		// 0x09BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fBumpCheckTimer;                                		// 0x09C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fRBSleepEnergyThreshold;                        		// 0x09C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fEnableCCDMultiplierThreshold;                  		// 0x09C8 (0x0004) [0x0000000000006002]              ( CPF_Const | CPF_Transient | CPF_Config )
	float                                              m_fWalkNoiseModifier;                             		// 0x09CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fRunNoiseModifier;                              		// 0x09D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fCrouchNoiseModifier;                           		// 0x09D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fDeathTimer;                                    		// 0x09D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fDeathNoisePeriod;                              		// 0x09DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fDeathNoiseMagnitude;                           		// 0x09E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fWeaponLOSThreshold;                            		// 0x09E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nTickCount;                                     		// 0x09E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMaxRelevancyDistance;                          		// 0x09EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nWrinkleHighestLOD;                             		// 0x09F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nHiddenRequestCount;                            		// 0x09F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fChatterSuppressionDuration;                    		// 0x09F8 (0x0004) [0x0000000000006002]              ( CPF_Const | CPF_Transient | CPF_Config )
	float                                              WalkSpeed;                                        		// 0x09FC (0x0004) [0x0000000000000000]              
	float                                              CombatWalkSpeed;                                  		// 0x0A00 (0x0004) [0x0000000000000000]              
	float                                              CombatGroundSpeed;                                		// 0x0A04 (0x0004) [0x0000000000000000]              
	float                                              CoverGroundSpeed;                                 		// 0x0A08 (0x0004) [0x0000000000000000]              
	float                                              CoverCrouchGroundSpeed;                           		// 0x0A0C (0x0004) [0x0000000000000000]              
	float                                              CrouchGroundSpeed;                                		// 0x0A10 (0x0004) [0x0000000000000000]              
	float                                              StormSpeed;                                       		// 0x0A14 (0x0004) [0x0000000000000000]              
	float                                              CombatStormSpeed;                                 		// 0x0A18 (0x0004) [0x0000000000000000]              
	float                                              StormTurnSpeed;                                   		// 0x0A1C (0x0004) [0x0000000000000000]              
	float                                              CoverMidHeight;                                   		// 0x0A20 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CoverStandHeight;                                 		// 0x0A24 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CoverCollisionRadius;                             		// 0x0A28 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CoverCamPeekToDefaultThreshold;                   		// 0x0A2C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CoverCamPeekToMidDefaultThresholdIn;              		// 0x0A30 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CoverCamPeekToMidDefaultThresholdOut;             		// 0x0A34 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                DisableEyeBlinkRefCount;                          		// 0x0A38 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bCustomAnimationActive : 1;                     		// 0x0A3C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bRetryInitRagdoll : 1;                          		// 0x0A3C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bBioFallHeightOk : 1;                           		// 0x0A3C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_isAnimTreeDirty : 1;                            		// 0x0A3C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bOldUpdateSkelWhenNotRendered : 1;              		// 0x0A3C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bDesiredUpdateSkelWhenNotRendered : 1;            		// 0x0A3C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bEnableExploreDeathAnim : 1;                    		// 0x0A3C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bInvertRagdollRecoverBoneAxis : 1;              		// 0x0A3C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bRecoverDirSwap : 1;                            		// 0x0A3C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      m_bInvertRagdollRecoverDirSwapBoneAxis : 1;       		// 0x0A3C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      m_bCanCleanupCorpse : 1;                          		// 0x0A3C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      m_bEnableLookAtTargeting : 1;                     		// 0x0A3C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      m_bHACKIsGethArmature : 1;                        		// 0x0A3C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      m_bSuppressCrawlerRoll : 1;                       		// 0x0A3C (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      m_bEnableStartRootMotion : 1;                     		// 0x0A3C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      m_bEnableStopRootMotion : 1;                      		// 0x0A3C (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      m_bTurnInPlaceRequested : 1;                      		// 0x0A3C (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      m_bInGestures : 1;                                		// 0x0A3C (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      m_bEnteringGestures : 1;                          		// 0x0A3C (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      m_bAutoLeaveGestures : 1;                         		// 0x0A3C (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      m_bKillGesturesNow : 1;                           		// 0x0A3C (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      m_bKillPoseNow : 1;                               		// 0x0A3C (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      m_bLeavingGestures : 1;                           		// 0x0A3C (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      m_bSafeTeleportQueued : 1;                        		// 0x0A3C (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      m_bUseBoneCameraHookOffset : 1;                   		// 0x0A3C (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      m_bRagDollEnabled : 1;                            		// 0x0A3C (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      m_bInConversation : 1;                            		// 0x0A3C (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      m_bCanBeBumped : 1;                               		// 0x0A3C (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      m_bAutoLookAtPlayer : 1;                          		// 0x0A3C (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned long                                      m_bDisableLookAtNotice : 1;                       		// 0x0A3C (0x0004) [0x0000000000000001] [0x20000000] ( CPF_Edit )
	unsigned long                                      m_bLookAtNotice : 1;                              		// 0x0A3C (0x0004) [0x0000000000002000] [0x40000000] ( CPF_Transient )
	unsigned long                                      m_bNoWrinkleMapData : 1;                          		// 0x0A3C (0x0004) [0x0000000000002000] [0x80000000] ( CPF_Transient )
	unsigned long                                      bPortArmsEnabled : 1;                             		// 0x0A40 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bCanUsePortArms : 1;                              		// 0x0A40 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bInPortArms : 1;                                  		// 0x0A40 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bDebugCover : 1;                                  		// 0x0A40 (0x0004) [0x0000000000002001] [0x00000008] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bDebugCoverAlign : 1;                             		// 0x0A40 (0x0004) [0x0000000000002001] [0x00000010] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bInCover : 1;                                     		// 0x0A40 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bTestNPCCover : 1;                                		// 0x0A40 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bCanLeanWeaponFire : 1;                         		// 0x0A40 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bDisableAnimatedTransitions : 1;                  		// 0x0A40 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      m_bLastGoodInitalized : 1;                        		// 0x0A40 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      m_bBumpLastMoving : 1;                            		// 0x0A40 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bUseAutoGeneratedHitCollision : 1;                		// 0x0A40 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      m_bAlwaysTick : 1;                                		// 0x0A40 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      m_bRollingSoundUsed : 1;                          		// 0x0A40 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      m_bRollingNotMoving : 1;                          		// 0x0A40 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      m_bDisableSoundSets : 1;                          		// 0x0A40 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      m_bPreviewBegun : 1;                              		// 0x0A40 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      m_bDroneLanded : 1;                               		// 0x0A40 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      m_bClassificationOverriden : 1;                   		// 0x0A40 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      m_bSkipLifeCrust : 1;                             		// 0x0A40 (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      m_bOverrideActorTypePhysics : 1;                  		// 0x0A40 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      m_bAllowedToLeavePlaypen : 1;                     		// 0x0A40 (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      m_bRagdollRecoveryDisabledAIAbilities : 1;        		// 0x0A40 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      m_bIsChatterSuppressed : 1;                       		// 0x0A40 (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      bWasInCover : 1;                                  		// 0x0A40 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bNotifyCoverAlignment : 1;                        		// 0x0A40 (0x0004) [0x0000000000002000] [0x02000000] ( CPF_Transient )
	unsigned long                                      bSyncToCoverActive : 1;                           		// 0x0A40 (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	unsigned long                                      m_bHideWithCameraCollision : 1;                   		// 0x0A40 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      DisableEyeNoiseDuringFXA : 1;                     		// 0x0A40 (0x0004) [0x0000000000004000] [0x10000000] ( CPF_Config )
	unsigned long                                      bEyeBlinkDisabled : 1;                            		// 0x0A40 (0x0004) [0x0000000000002000] [0x20000000] ( CPF_Transient )
	unsigned char                                      m_eGrenadeThrowAnimationState;                    		// 0x0A44 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eRagdollRecoverState;                           		// 0x0A45 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eRagdollRecoverBoneAxis;                        		// 0x0A46 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eRagdollRecoverDirSwapBoneAxis;                 		// 0x0A47 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_AsyncDelayTurn;                                 		// 0x0A48 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_AsyncDelayUpdates;                              		// 0x0A49 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      ePhysHopState;                                    		// 0x0A4A (0x0001) [0x0000000000000000]              
	unsigned char                                      eCurrentHopSurface;                               		// 0x0A4B (0x0001) [0x0000000000000000]              
	unsigned char                                      eCoverState;                                      		// 0x0A4C (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      eLeanAnimationState;                              		// 0x0A4D (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      eDesiredLeanAnimationState;                       		// 0x0A4E (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_eUseRollingInPhysicsMode;                       		// 0x0A4F (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eGesturePriority;                               		// 0x0A50 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eClassification;                                		// 0x0A51 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_ePendingChatter;                                		// 0x0A52 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CoverMoveDirection;                               		// 0x0A53 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CoverLeanBias;                                    		// 0x0A54 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CoverType;                                        		// 0x0A55 (0x0001) [0x0000000000000000]              
	unsigned char                                      CoverAction;                                      		// 0x0A56 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventUpdatePrimaryAndSecondaryWeapons ( );
	void eventDrawPrimaryWeapon ( );
	void eventOutsideWorldBounds ( );
	bool IsHostile ( class APawn* Other );
	unsigned char GetDesiredLeanState ( );
	void StopMovement ( unsigned long bStopRotation );
	void eventApplyFemaleSkinToneOverride ( );
	void eventOnFaceFXAnimStopped ( );
	void eventOnFaceFXAnimStarted ( );
	void EnableEyeBlinks ( );
	void DisableEyeBlinks ( );
	unsigned char GetWalkingSpeedMode ( );
	void eventSetShouldCrouch ( unsigned long bCrouch );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void UnsuppressChatter ( );
	void eventOnChatterLinePlayed ( unsigned char SoundSet );
	void eventHandleChatterEvent ( unsigned char eSoundSet, unsigned long bForceChatter );
	class UClass* GetSaveObjectClass ( );
	bool IsCombatActionState ( unsigned char EActionState );
	void MakeVulnerable ( );
	void eventCorpseCleanupTimer ( );
	void SpawnDefaultController ( );
	void SetBaseEyeheight ( );
	void UpdateSkelWhenNotRendered ( );
	void PostBeginPlay ( );
	bool Resurrect ( float fPercentOfHealthRegained, unsigned long bIsInstantaneous );
	void KillAttachedVFX ( );
	void FadeLifeCrust ( );
	int GetXLASTClassContextID ( );
	void eventSetRichPresence ( );
	bool eventDied ( class AController* Killer, class UClass* DamageType, struct FVector const& HitLocation );
	void PostTeleport ( class ATeleporter* OutTeleporter );
	bool PreTeleport ( class ATeleporter* InTeleporter );
	void eventMoveWeaponToRightHand ( );
	void eventMoveWeaponToLeftHand ( );
	class UAudioComponent* eventGetFaceFXAudioComponent ( );
	void KillSoundSet ( );
	bool PlaySoundSet ( unsigned char eType );
	void gibbedBy ( class AActor* Other );
	void OnTeleportArrived ( );
	void ReleasePowersCamera ( );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void OnTeleport ( class USeqAct_Teleport* Action );
	void eventPlayFootStepSound ( int FootDown );
	void eventsetHeadFaceFX ( );
	void OnPlayFaceFXAnim ( class USeqAct_PlayFaceFXAnim* inAction );
	void SetScale ( float fScale );
	void OnEffectsMaterial ( class UBioSeqAct_EffectsMaterial* Action );
	void ReleasePower ( );
	void eventLeaveCover ( );
	bool IsPoppingUp ( );
	bool IsPeeking ( );
	bool IsBlindFiring ( );
	bool IsLeaning ( );
	void SetCoverLeanBias ( unsigned char NewLeanBias );
	void SetCoverAction ( unsigned char NewCoverAction );
	void eventNotifyFinishedCoverAlign ( );
	void OnExitedAimback ( unsigned long bReturningToCover );
	void OnEnteredAimback ( );
	void eventPlayerAcquiredCover ( );
	bool DoesCoverStateAllowFiring ( );
	bool CanDoCoverAction ( unsigned char CovAction, unsigned long bPrecise, unsigned long bTestCamera );
	unsigned char GetDefaultCoverAction ( );
	bool IsInAnimatedLeanTransition ( );
	bool IsInCoverLeaning ( );
	struct FVector GetPawnViewLocation ( );
	bool IsInCombatActionState ( );
	bool IsThrowingGrenade ( );
	bool IsUsingPower ( unsigned long bIgnoreWeaponPowers );
	bool IsSwitchingWeapons ( );
	bool IsInCover ( );
	void DecreaseWeaponPowerCount ( );
	struct SFXName GetWeaponPowerName ( );
	bool IsPastRightEdgeSlot ( );
	bool IsPastLeftEdgeSlot ( );
	bool IsAtRightEdgeSlot ( float Tolerance, unsigned long bMustLean );
	bool IsAtLeftEdgeSlot ( float Tolerance, unsigned long bMustLean );
	void RestoreCollisionFromCover ( );
	void ShrinkCollisionForCover ( );
	void SetAnimatedTransitionPending ( );
	bool IsAnimatedTransitionPending ( );
	bool GetAimNodeLocation ( unsigned char AimNode, unsigned long bLogError, struct FVector* AimLocation );
	void EndAnimatedTransition ( );
	void BeginAnimatedTransition ( );
	bool IsInAnimatedTransition ( );
	bool eventCanMount ( );
	unsigned char FactionRelationship ( class APawn* oOtherPawn );
	void GenerateTakeDamageEvent ( float fPreMitigationDamage, float Damage, class AController* InstigatedBy, class UClass* DamageType );
	bool DoReachedWaypointEvent ( class ABioPathPoint* oPoint );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventSetAnimPosition ( struct SFXName SlotName, int ChannelIndex, struct SFXName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	void OnToggle ( class USeqAct_Toggle* Action );
	void ClearUnregisteredAnimsets ( );
	void ClearRegisteredCustomAnimsets ( struct SFXName nmSetGroupName );
	void RegisterCustomAnimset ( struct SFXName nmSetGroupName, class UAnimSet* oAnim );
	void eventCustomAnimFinished ( struct SFXName nmAnimName, unsigned long bIsLooping );
	void PlayCustomAnimOneShotAnim ( struct SFXName nmAnimName );
	void PlayCustomAnimLoopAnim ( struct SFXName nmAnimName );
	void SetCustomAnimState ( unsigned long bState );
	void eventEncroachedBy ( class AActor* Other );
	void eventRanInto ( class AActor* Other );
	struct FVector GetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon );
	struct FVector eventGetPulledInMuzzleLocation ( class ABioWeaponRanged* Wpn, struct FVector const& AimDir );
	void eventStartCrouch ( float HeightAdjust );
	void eventEndCrouch ( float HeightAdjust );
	void HopperAnimLand ( );
	void HopperAnimJump ( );
	void StopThrowGrenade ( );
	void ThrowGrenade ( );
	void CreateGrenade ( );
	void StartThrowGrenade ( );
	void eventFinishDrawAnim ( );
	void eventFadeOutDrawAnim ( );
	void eventSwapDrawAnim ( );
	void eventFinishHolsterAnim ( );
	void eventFadeOutHolsterAnim ( );
	void eventSwapHolsterAnim ( );
	void eventFadeOutExitCombatAnim ( );
	void eventFadeOutEnterCombatAnim ( );
	void eventFadeOutStopAnim ( );
	void eventFadeOutSkidAnim ( );
	void eventFadeOutStartAnim ( );
	void eventUnlockAnimRotation ( );
	void eventSetCombatState ( unsigned char eState );
	void RagdollRecoverTimer ( );
	void PostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	float StandardDeviation ( TArray<float> const& Data, float M );
	void UpdateDefaultSpeeds ( );
	float GetBaseSpeed ( );
	bool InPlayerParty ( );
	void eventClearAllActions ( FString const& sClearLabel );
	int FindWaypointPathLength ( struct SFXName List );
	class AActor* FindWaypointName ( struct SFXName List, int Index );
	void CacheWayPointSet ( struct SFXName WaypointSetTag );
	void eventPlayDying ( class UClass* DamageType, struct FVector const& HitLoc );
	void ShouldCrouch ( unsigned long bCrouch );
	bool IsMetaActionInProgress ( );
	void Tick ( float DeltaTime );
	void eventOnWeaponFired ( class ABioWeaponRanged* InWeapon );
	bool IsFiring ( );
	bool CanFireWeapon ( );
	void Destroyed ( );
	void BioBeginPlay ( );
	bool GetCurrentMoveTarget ( class AActor** oMoveTarget, struct FVector* vTarget );
	void BioProcessDamageIndicator ( class AController* InstigatedBy );
	unsigned char GetClassification ( );
	void SetClassification ( unsigned char a_eClassification, unsigned long a_bAsDefault );
	void DroneStartLanding ( );
	void DroneFinishedTakingOff ( );
	void UpdateGrimeGrimeLevel ( float a_fGrimeValue );
	void UpdateGrimeDirtLevel ( float a_fDirtValue );
	void UpdateGrimeCombatLevel ( float a_fCombatValue );
	bool IsShowingHelmet ( );
	bool IsShowingFacePlate ( );
	bool IsShowingVisor ( );
	void RequestHelmetVisible ( unsigned long B );
	void RequestFacePlateVisible ( unsigned long B );
	void RequestVisorVisible ( unsigned long B );
	void OverrideHeadGearVisibility ( unsigned long B );
	bool IsHeadGearVisiblePreferenceRelevant ( );
	bool GetHeadGearVisiblePreference ( );
	void SetHeadGearVisiblePreference ( unsigned long B );
	void RestoreCachedHeadGearVisibilityOverride ( );
	void CacheHeadGearVisibilityOverride ( );
	void CleanUpHopState ( );
	void SetPhysHopState ( unsigned char eNewPhysHopState );
	void SafeSetLocation ( struct FVector const& vDest );
	bool PlayFaceFX ( FString const& AnimGroup, FString const& AnimSeq );
	bool SetDefaultFaceFXAsset ( );
	void RequestHidden ( unsigned long B );
	void SetLookAtTarget ( class AActor* oTarget, unsigned char a_eTransition, int nRank );
	void SetAmbientLookAtTarget ( class AActor* oTarget, int nRank );
	bool ExploreMode ( float fDelaySeconds );
	bool ReadyMode ( float fDelaySeconds );
	bool UnlockTarget ( );
	bool LockTarget ( class AActor* oTarget );
	float GetFractionOfEffectsMaterialEnabled ( );
	void SetFractionOfEffectsMaterialEnabled ( float FractionEnabled );
	unsigned char GetEffectsMaterialType ( class USkeletalMeshComponent* Component );
	void SetEffectsMaterialType ( unsigned char EffectsMaterialType );
	void InitializeForPlay ( );
	void CancelCapability ( class UBioCapability* oCapability );
	float GetCapabilityPowerBuildUp ( class UBioCapability* oCapability );
	float GetCapabilityImpactRadius ( class UBioCapability* oCapability );
	bool GetCapabilityIsEnabled ( class UBioCapability* oCapability );
	float GetCapabilityCoolDownTimeRemaining ( class UBioCapability* oCapability );
	bool HasCapability ( class UBioCapability* oCapability );
	class UBioSeqData* AddCapability ( class UBioCapability* oCapability, float fReqStabilityRatio, float fAbortStabilityRatio, float fTimeOut, class APawn* oTarget, struct FVector const& vTarget );
	class UBioSeqData* DoCapability ( class UBioCapability* oCapability, float fReqStabilityRatio, float fAbortStabilityRatio, float fTimeOut, class APawn* oTarget, struct FVector const& vTarget );
	void AppendPawnCapabilitiesToList ( unsigned char nCapType, TArray<class UBioCapability*>* oOutCaps );
	void RecomputeCapabilities ( );
	bool IsDead ( );
	void AnimNodeBlendComplete ( struct SFXName sBlendName, int nChild );
	void AnimNodePlayFinished ( struct SFXName sBlendName );
	bool CanPlayAnimNode ( struct SFXName sBlendName, int nFlags, float* fWeight );
	bool GetAnimLengthAndPos ( struct SFXName sAnimName, float* fAnimLength, float* fAnimPos );
	bool IsAnimOnRightFoot ( unsigned long bCycle );
	bool RequestTurnInPlace ( struct FRotator const& rDesDir );
	void StartAnimStartMove ( );
	bool CanAnimMoveStop ( float fDeltaTime );
	bool CanAnimSkidTurn ( );
	bool CanAnimMoveStart ( float fDeltaTime, unsigned long bIgnoreSpeedAndTime );
	void TickMoveControl ( float fDeltaTime );
	float CalcYawDifference ( struct FRotator const& rDesDir, float* fDir );
	bool CalcYawInterpolation ( float fDeltaTime, struct FRotator const& rDesDir, float fDegPerSec, float* fDeltaYaw );
	bool CalcSpeedInterpolation ( float fDeltaTime, float fDesiredSpeed, float* fDeltaSpeed );
	void GetRotationRate ( int* nPitch, int* nYaw, int* nRoll );
	float GetMaxSpeed ( );
	void SetDesiredRotation ( struct FRotator const& rDesiredRotation, unsigned long bForce );
	void SetDesiredSpeed ( float fDesiredSpeed, unsigned long bForce );
	bool CanRagdoll ( );
	bool TermRagdoll ( );
	bool InitRagdoll ( );
	bool IsFalling ( );
	void UnapplyMaterialParameters ( class UBioMaterialOverride* pMaterialParameters );
	void ApplyMaterialParameters ( class UBioMaterialOverride* pMaterialParameters );
	void SetTextureParameterValue ( struct SFXName ParameterName, class UTexture* Value );
	void SetScalarParameterValue ( struct SFXName ParameterName, float Value );
	void SetVectorParameterValue ( struct SFXName ParameterName, struct FColor* Value );
	bool GetStepOutRelativeLocationToTarget ( class AActor* Other, struct FVector* OutVector );
	void ClearCoverState ( );
};

// Class SFXGame.BioPawnInfoComponent
// 0x0004 (0x0224 - 0x0220)
class UBioPawnInfoComponent : public UPrimitiveComponent
{
public:
	int                                                m_nShowFlagCache;                                 		// 0x0220 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioPawnItemInterface
// 0x0028 (0x0094 - 0x006C)
class UBioPawnItemInterface : public UBioBaseComponent
{
public:
	struct FScriptDelegate                             __QuickSlotIter__Delegate;                        		// 0x006C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __EBioWeaponTypeOp__Delegate;                     		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioPawnBehavior*                            m_oFriend;                                        		// 0x008C (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool PrevQuickSlot ( );
	bool NextQuickSlot ( );
	void ChangeToQuickSlot ( unsigned char eSlot );
	void DeactivateCurrentQuickSlot ( );
	void ActivateCurrentQuickSlot ( );
	int ClearQuickSlot ( unsigned char Type );
	int SetQuickSlot ( unsigned char Type, int nInvItem );
	bool UpdatePawnAppearance ( unsigned char eSlot, class ABioPawn* Pawn );
	int Unequip ( unsigned char eSlot );
	int Equip ( int nItemIndex );
	class UClass* CreateClassFromString ( class UClass* clsBase, FString const& sClass );
	bool GetStringEntryIN ( class UBio2DA* tbl, int nRow, struct SFXName nmColumn, FString* S );
	bool GetIntEntryIN ( class UBio2DA* tbl, int nRow, struct SFXName nmColumn, int* N );
	bool GetNameEntryIN ( class UBio2DA* tbl, int nRow, struct SFXName nmColumn, struct SFXName* nm );
	bool eventIsArmored ( );
	bool EBioWeaponTypeOp ( unsigned char* eSlot );
	bool QuickSlotIter ( );
};

// Class SFXGame.BioScout
// 0x0000 (0x06C4 - 0x06C4)
class ABioScout : public AScout
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioLookAtTarget
// 0x0018 (0x029C - 0x0284)
class ABioLookAtTarget : public AActor
{
public:
	float                                              m_fDelay;                                         		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fConeDeg;                                       		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMinDistance;                                   		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCODelayRemaining;                              		// 0x0290 (0x0004) [0x0000000000000000]              
	float                                              m_fConeCos;                                       		// 0x0294 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bCOSeen : 1;                                    		// 0x0298 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioPhysicsActor
// 0x0008 (0x03B0 - 0x03A8)
class ABioPhysicsActor : public AKActor
{
public:
	float                                              m_fHealth;                                        		// 0x03A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCurrentHealth;                                 		// 0x03AC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventTakeDamage ( float Damage, class AController* InstigatedBy, struct FVector const& HitLocation, struct FVector const& Momentum, class UClass* DamageType, struct FTraceHitInfo const& HitInfo, class AActor* DamageCauser, class UDamageType* pDamage );
	void ChangeMaterialParameters ( );
};

// Class SFXGame.BioSVehicleSimTank
// 0x0088 (0x01B4 - 0x012C)
class UBioSVehicleSimTank : public USVehicleSimTank
{
public:
	struct FInterpCurveFloat                           m_fLatFrictionScaleSteerCurve;                    		// 0x012C (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           m_fLongFrictionScaleSteerCurve;                   		// 0x0140 (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           m_TorqueSplitRight;                               		// 0x0154 (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInterpCurveFloat                           m_TorqueSplitLeft;                                		// 0x0168 (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInterpCurveFloat                           m_TorqueCurve;                                    		// 0x017C (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInterpCurveFloat                           StiffnessByFramerate;                             		// 0x0190 (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fPrevInputYaw;                                  		// 0x01A4 (0x0004) [0x0000000000000000]              
	float                                              m_fCurrentInputYaw;                               		// 0x01A8 (0x0004) [0x0000000000000000]              
	float                                              m_fYawDeltaRate;                                  		// 0x01AC (0x0004) [0x0000000000000000]              
	float                                              MinTrackVelocity;                                 		// 0x01B0 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioCodexMap
// 0x0090 (0x00F0 - 0x0060)
class UBioCodexMap : public UObject
{
public:
	struct FMap_Mirror                                 SectionMap;                                       		// 0x0060 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMap_Mirror                                 PageMap;                                          		// 0x00A8 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioDiscoveredCodexMap
// 0x0048 (0x00A8 - 0x0060)
class UBioDiscoveredCodexMap : public UObject
{
public:
	struct FMap_Mirror                                 DiscoveredCodex;                                  		// 0x0060 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Clear ( );
};

// Class SFXGame.BioGlobalVariableTable
// 0x0038 (0x0098 - 0x0060)
class UBioGlobalVariableTable : public UObject
{
public:
	TArray<int>                                        BoolVariables;                                    		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<int>                                        IntVariables;                                     		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<float>                                      FloatVariables;                                   		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBio2DA*                                     oNameLookupTable;                                 		// 0x0090 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventClearAllVariables ( );
	void SetFloatByName ( struct SFXName nmLabel, float fValue );
	float GetFloatByName ( struct SFXName nmLabel );
	void SetIntByName ( struct SFXName nmLabel, int nValue );
	int GetIntByName ( struct SFXName nmLabel );
	void SetBoolByName ( struct SFXName nmLabel, unsigned long bValue );
	bool GetBoolByName ( struct SFXName nmLabel );
	void SetFloat ( int nIndex, float fValue );
	float GetFloat ( int nIndex );
	void SetInt ( int nIndex, int nValue );
	int GetInt ( int nIndex );
	void SetBool ( int nIndex, unsigned long bValue, unsigned long bEvaluateAchievement );
	bool GetBool ( int nIndex );
};

// Class SFXGame.BioOutcomeMap
// 0x0048 (0x00A8 - 0x0060)
class UBioOutcomeMap : public UObject
{
public:
	struct FMap_Mirror                                 OutcomeMapping;                                   		// 0x0060 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioQuestMap
// 0x0120 (0x0180 - 0x0060)
class UBioQuestMap : public UObject
{
public:
	struct FMap_Mirror                                 QuestMap;                                         		// 0x0060 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMap_Mirror                                 TaskEvalMap;                                      		// 0x00A8 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMap_Mirror                                 IntTaskEvalMap;                                   		// 0x00F0 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMap_Mirror                                 FloatTaskEvalMap;                                 		// 0x0138 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioQuestProgressionMap
// 0x004C (0x00AC - 0x0060)
class UBioQuestProgressionMap : public UObject
{
public:
	struct FMap_Mirror                                 QuestProgression;                                 		// 0x0060 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                nQuestProgressCounter;                            		// 0x00A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Clear ( );
};

// Class SFXGame.BioStateEventMap
// 0x0048 (0x00A8 - 0x0060)
class UBioStateEventMap : public UObject
{
public:
	struct FMap_Mirror                                 StateEventMap;                                    		// 0x0060 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioProbeCombat
// 0x0034 (0x0094 - 0x0060)
class UBioProbeCombat : public UObject
{
public:
	FString                                            m_nAreaName;                                      		// 0x0060 (0x0010) [0x0000000000001000]              ( CPF_Native )
	FString                                            m_nChunkName;                                     		// 0x0070 (0x0010) [0x0000000000001000]              ( CPF_Native )
	struct SFXName                                     m_nSquadName;                                     		// 0x0080 (0x0008) [0x0000000000001000]              ( CPF_Native )
	struct SFXName                                     m_nSquadTag;                                      		// 0x0088 (0x0008) [0x0000000000001000]              ( CPF_Native )
	float                                              m_fStartTime;                                     		// 0x0090 (0x0004) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Reset ( );
	void Stop ( unsigned char CombatResult );
	void Start ( );
	bool IsRecording ( );
	void Initialize ( struct SFXName SquadName, struct SFXName SquadTag );
};

// Class SFXGame.BioCurveDrivenParameter
// 0x0040 (0x00A0 - 0x0060)
class UBioCurveDrivenParameter : public UObject
{
public:
	struct FRawDistributionFloat                       m_curve;                                          		// 0x0060 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	FString                                            sParameterName;                                   		// 0x0084 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct SFXName                                     nmParameterName;                                  		// 0x0094 (0x0008) [0x0000000000000000]              
	unsigned long                                      bScaleToLifetime : 1;                             		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLoop : 1;                                        		// 0x009C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float GetValue ( float fTime, float fScale );
};

// Class SFXGame.BioDecalComponent
// 0x013E (0x04B0 - 0x0372)
class UBioDecalComponent : public UDecalComponent
{
public:
	struct FRawDistributionFloat                       FadeInTime;                                       		// 0x0374 (0x0024) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRawDistributionFloat                       FadeOutTime;                                      		// 0x0398 (0x0024) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRawDistributionFloat                       DecalLifetime;                                    		// 0x03BC (0x0024) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRawDistributionFloat                       DecalSize;                                        		// 0x03E0 (0x0024) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRawDistributionFloat                       DecalRoll;                                        		// 0x0404 (0x0024) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRawDistributionFloat                       DecalYaw;                                         		// 0x0428 (0x0024) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRawDistributionFloat                       DecalPitch;                                       		// 0x044C (0x0024) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRawDistributionFloat                       SizeScale;                                        		// 0x0470 (0x0024) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray<class UBioCurveDrivenParameter*>            aDecalMaterialParameters;                         		// 0x0494 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	class UMaterialInstanceConstant*                   m_MaterialInstance;                               		// 0x04A4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bScaleByDistance : 1;                             		// 0x04AC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bProjectOnShields : 1;                            		// 0x04AC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioDecalLifetimeAgeFadeInOut
// 0x0000 (0x0080 - 0x0080)
class UBioDecalLifetimeAgeFadeInOut : public UDecalLifetimeAge
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioDecalLifetimeDataAgeFadeInOut
// 0x0014 (0x008C - 0x0078)
class UBioDecalLifetimeDataAgeFadeInOut : public UDecalLifetimeDataAge
{
public:
	class UParticleModuleColorOverLife*                ParticleColorModule;                              		// 0x0078 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              FadeInTime;                                       		// 0x0080 (0x0004) [0x0000000000000000]              
	float                                              FadeOutTime;                                      		// 0x0084 (0x0004) [0x0000000000000000]              
	unsigned long                                      bReused : 1;                                      		// 0x0088 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioEffectsMaterialsPriorityMap
// 0x0018 (0x0078 - 0x0060)
class UBioEffectsMaterialsPriorityMap : public UObject
{
public:
	TArray<struct FEffectMaterialPriority>             PriorityMap;                                      		// 0x0060 (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	class UBioEffectsMaterialsPriorityMap*             m_GlobalEffectsPriorityMap;                       		// 0x0070 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGrenadeVFXAppearance
// 0x0000 (0x0060 - 0x0060)
class UBioGrenadeVFXAppearance : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMetaVFX
// 0x0020 (0x0080 - 0x0060)
class UBioMetaVFX : public UObject
{
public:
	TArray<class UBioVFXTemplate*>                     m_aCreatureVFXs;                                  		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<class UBioVFXTemplate*>                     m_aPlaceableVFXs;                                 		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ApplyEffect ( class UBioMetaVFX* MetaEffect, class UObject* Target, float fLifeTime );
	void ApplyEffectByName ( FString const& sEffect, class UObject* Target, float fLifeTime );
};

// Class SFXGame.BioPowerVFXAppearance
// 0x008C (0x00EC - 0x0060)
class UBioPowerVFXAppearance : public UObject
{
public:
	struct FPowerVFXData                               PlayerCrust;                                      		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FPowerVFXData                               PlayerMaterial;                                   		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FPowerVFXData                               UsingEffect;                                      		// 0x0078 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FPowerVFXData                               FramebufferEffect;                                		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FPowerVFXData                               TargetCrust;                                      		// 0x0090 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FPowerVFXData                               TargetMaterial;                                   		// 0x009C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FPowerVFXData                               ImpactVisualEffect;                               		// 0x00A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FPowerVFXData                               WorldImpactVisualEffect;                          		// 0x00B4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FPowerVFXData                               CastingBeam;                                      		// 0x00C0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     nmProjectileAttachPoint;                          		// 0x00CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioDeathVFX*                                m_pDeathVFX;                                      		// 0x00D4 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UBioVFXTemplate*                             vfxProjectileEffect;                              		// 0x00DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             vfxReleaseEffect;                                 		// 0x00E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioVFXAppearanceVehicleThruster
// 0x0008 (0x0068 - 0x0060)
class UBioVFXAppearanceVehicleThruster : public UObject
{
public:
	class UBioVFXTemplate*                             vfxThrusterBurner;                                		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioVFXTemplate
// 0x00EF (0x014F - 0x0060)
class UBioVFXTemplate : public UObject
{
public:
	struct FRawDistributionFloat                       m_rawIntensityVsDistanceDistribution;             		// 0x0060 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	TArray<class USoundCue*>                           m_aSoundsForIntensityLevels;                      		// 0x0084 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<class UBioCurveDrivenParameter*>            aPostProcessParameters;                           		// 0x0094 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	TArray<class UBioCurveDrivenParameter*>            aInstanceParameters;                              		// 0x00A4 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	TArray<class UBioDecalComponent*>                  Decals;                                           		// 0x00B4 (0x0010) [0x0000000006480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear | CPF_EditInline )
	float                                              m_afCostTable[ 0x5 ];                             		// 0x00C4 (0x0014) [0x0000000000004000]              ( CPF_Config )
	class UPrefab*                                     oPrefab;                                          		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   oSoundCue;                                        		// 0x00E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPostProcessChain*                           oFrameBufferEffect;                               		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             oSharedFramebufferEffect;                         		// 0x00F0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioVisualEffect*                            oInstancedSharedFrameBufferEffect;                		// 0x00F8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_nmEffectsMaterial;                              		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioCameraShake*                             m_cameraShake;                                    		// 0x0108 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              fLifeTime;                                        		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fFadeInTime;                                    		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fFadeOutTime;                                   		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fImpactRadius;                                    		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fParticleTimeout;                                 		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fEffectMaterialTimeout;                           		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInstancePoolRechargePeriod;                    		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nInstancePoolMax;                               		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nDefaultPoolMax;                                		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nDefaultPoolMin;                                		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nMaxInstancesAllowed;                             		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nNumActiveInstances;                              		// 0x013C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fMaxRange;                                      		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPercentageOfDirection;                           		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCreateNewSoundEverySpawn : 1;                    		// 0x0148 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bFadeOnPause : 1;                               		// 0x0148 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnableCollision : 1;                             		// 0x0148 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseActorScale : 1;                               		// 0x0148 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bIsCrustEffect : 1;                               		// 0x0148 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bIsImpactCrustEffect : 1;                         		// 0x0148 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bAllowParticlesToFinish : 1;                      		// 0x0148 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bAttachToNearestBone : 1;                         		// 0x0148 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bIsInitialized : 1;                               		// 0x0148 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      m_bInstancePoolEnabled : 1;                       		// 0x0148 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      m_bIgnorePooling : 1;                             		// 0x0148 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      m_bDisableBoolDecay : 1;                          		// 0x0148 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bPlayerOnly : 1;                                  		// 0x0148 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bSharedBetweenInstances : 1;                      		// 0x0148 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      m_bUseIntensityCurve : 1;                         		// 0x0148 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned char                                      ePriority;                                        		// 0x014C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      eCost;                                            		// 0x014D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      eCharacterMaterial;                               		// 0x014E (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventInitializeTemplate ( );
};

// Class SFXGame.BioVisualEffect
// 0x023C (0x05AC - 0x0370)
class ABioVisualEffect : public APrefabInstance
{
public:
	FString                                            sStateNames[ 0x3 ];                               		// 0x0370 (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FCachedInstanceParameter>            m_CachedInstanceParameters;                       		// 0x03A0 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FBioActorReBase                             m_SavedBaseData;                                  		// 0x03B0 (0x0030) [0x0000000000082000]              ( CPF_Transient | CPF_Component )
	class UBioDecalComponent*                          aDecalList[ 0x3 ];                                		// 0x03E0 (0x0018) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              fStateDurations[ 0x3 ];                           		// 0x03F8 (0x000C) [0x0000000000000000]              
	float                                              fStateStartTimes[ 0x3 ];                          		// 0x0404 (0x000C) [0x0000000000000000]              
	float                                              fStateEndTimes[ 0x3 ];                            		// 0x0410 (0x000C) [0x0000000000000000]              
	class UBioVFXTemplate*                             pTemplate;                                        		// 0x041C (0x0008) [0x0000000000000000]              
	class USeqAct_Interp*                              Matinee;                                          		// 0x0424 (0x0008) [0x0000000000000000]              
	class UBioDecalComponent*                          pLastDecal;                                       		// 0x042C (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class USoundCue*                                   oSoundCue;                                        		// 0x0434 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             oAudioComponent;                                  		// 0x043C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioCameraShake*                             m_cameraShake;                                    		// 0x0444 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_cameraShakenActor;                              		// 0x044C (0x0008) [0x0000000000000000]              
	class UBioVisualEffectObserver*                    m_observer;                                       		// 0x0454 (0x0008) [0x0000000000000000]              
	class UObject*                                     m_pInstigator;                                    		// 0x045C (0x0008) [0x0000000000000000]              
	float                                              fLifeDuration;                                    		// 0x0464 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_accruedTime;                                    		// 0x0468 (0x0004) [0x0000000000000000]              
	float                                              fTotalDuration;                                   		// 0x046C (0x0004) [0x0000000000000000]              
	float                                              fTotalDurationOrig;                               		// 0x0470 (0x0004) [0x0000000000000000]              
	float                                              fCurrentTime;                                     		// 0x0474 (0x0004) [0x0000000000000000]              
	int                                                nMaxDecals;                                       		// 0x0478 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                nLastDecal;                                       		// 0x047C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nAttachedToBoneCount;                           		// 0x0480 (0x0004) [0x0000000000000000]              
	unsigned long                                      bDeleteSelf : 1;                                  		// 0x0484 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPaused : 1;                                      		// 0x0484 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bActive : 1;                                      		// 0x0484 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bLoopLife : 1;                                    		// 0x0484 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bPauseOnDeath : 1;                                		// 0x0484 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bCancelSpawn : 1;                                 		// 0x0484 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bIsComponentOnly : 1;                             		// 0x0484 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bBaseHasValidPose : 1;                            		// 0x0484 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned char                                      eCurrentState;                                    		// 0x0488 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FMultiMap_Mirror                            m_mObjectFloatPropertyMap;                        		// 0x048C (0x0048) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FMultiMap_Mirror                            m_mTrackMaterialFloatMap;                         		// 0x04D4 (0x0048) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FMultiMap_Mirror                            m_mObjectVectorPropertyMap;                       		// 0x051C (0x0048) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FMultiMap_Mirror                            m_mTrackMaterialVectorMap;                        		// 0x0564 (0x0048) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool SetSound ( int nIndexInSoundArray );
	class ABioVisualEffect* CreateVFXOnPosition ( class UBioVFXTemplate* a_pTemplate, struct FVector const& vPosition, struct FRotator const& rOrientation, float fLifeTime, unsigned long bUseVFXPool );
	class ABioVisualEffect* CreateVFXOnMesh ( class UBioVFXTemplate* a_pTemplate, class AActor* Target, struct SFXName sBoneName, float fLifeTime, class USkeletalMeshComponent* mTargetMesh, unsigned long bUseVFXPool );
	class ABioVisualEffect* CreateCrustEffect ( class UBioVFXTemplate* a_pTemplate, class AActor* Target, float fLifeTime, unsigned long bUseVFXPool );
	void SetLifeTime ( float fLife );
	void SetVectorParameter ( struct SFXName sParameter, struct FVector const& vValue );
	void SetScalarParameter ( struct SFXName sParameter, float fValue );
	float GetStateDuration ( unsigned char eState );
	float GetEffectDuration ( );
	void DestroyInstance ( );
	bool IsAttached ( );
	bool SetBasePrefab ( class UPrefab* pBase );
	bool SetState ( unsigned char eState, unsigned long bForceSetState, unsigned long bPlayAudio, unsigned long bForceKill );
	bool SetPaused ( unsigned long bPause, unsigned long bForceRefresh );
	void PauseOnDeath ( unsigned long bPause );
	void LoopDuration ( unsigned long bLoop );
};

// Class SFXGame.BioVisualEffectObserver
// 0x0000 (0x0060 - 0x0060)
class UBioVisualEffectObserver : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioVisualEffectObserverActor
// 0x000C (0x006C - 0x0060)
class UBioVisualEffectObserverActor : public UBioVisualEffectObserver
{
public:
	class AActor*                                      m_actor;                                          		// 0x0060 (0x0008) [0x0000000000000000]              
	unsigned long                                      m_isActorDeletedOnEffectDeath : 1;                		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioVisualEffectPool
// 0x003C (0x009C - 0x0060)
class UBioVisualEffectPool : public UObject
{
public:
	TArray<class ABioVisualEffect*>                    m_EffectPool;                                     		// 0x0060 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UBioVFXTemplate*                             m_VFXTemplate;                                    		// 0x0070 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nMinEffectsInPool;                              		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                m_nMaxEffectsInPool;                              		// 0x007C (0x0004) [0x0000000000000000]              
	float                                              m_fInstancePoolRechargePeriod;                    		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                m_nInstancePoolMax;                               		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                m_nInstancePoolCurrent;                           		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fInstancePoolTimeAccumulator;                   		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fTimeTillDecay;                                 		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fDecayPeriod;                                   		// 0x0094 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bInstancePoolEnabled : 1;                       		// 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void PrimePoolEffects ( int a_nNumEffects );
	class ABioVisualEffect* GetEffect ( );
	void SetPoolSize ( int a_nMaxSize, int a_nMinSize );
	void Initialize ( class UBioVFXTemplate* a_oTemplate, int nMaxNumEffects, int nMinNumEffects );
};

// Class SFXGame.BioVisualImpactSet
// 0x0000 (0x0060 - 0x0060)
class UBioVisualImpactSet : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioVISSimple
// 0x004C (0x00AC - 0x0060)
class UBioVISSimple : public UBioVisualImpactSet
{
public:
	struct FRawDistributionVector                      rRotationBias;                                    		// 0x0060 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	TArray<struct FBioVISSData>                        VisualEffectMappings;                             		// 0x0084 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	class UBioVISSimple*                               MaterialParent;                                   		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             vfxDefaultVisualEffect;                           		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             vfxDefaultMaterialEffect;                         		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void PreloadEffects ( );
	class ABioVisualEffect* ApplyVisualImpact ( struct FVector const& vImpactLocation, struct FRotator const& rImpactRotation, struct FRotator const& rDirectionOfImpact, struct FTraceHitInfo const& oHitInfo, class AActor* oBase, unsigned long bApplyMaterialEffect, unsigned long bApplyVisualEffect );
};

// Class SFXGame.BioVISFootstep
// 0x0010 (0x00BC - 0x00AC)
class UBioVISFootstep : public UBioVISSimple
{
public:
	TArray<struct FBioVISFootstepData>                 DirtGrimeMappings;                                		// 0x00AC (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class ABioVisualEffect* ApplyFootstepVisualImpact ( struct FVector const& vFootstepLocation, struct FRotator const& rFootstepRotation, struct FTraceHitInfo const& oHit, float fSpeedRatio, class AActor* oActor );
	float GetCombatValue ( class UPhysicalMaterial* oPhysMat );
	float GetDirtValue ( class UPhysicalMaterial* oPhysMat );
	float GetGrimeValue ( class UPhysicalMaterial* oPhysMat );
};

// Class SFXGame.BioVISGrenade
// 0x000C (0x00B8 - 0x00AC)
class UBioVISGrenade : public UBioVISSimple
{
public:
	class UBioVFXTemplate*                             vfxExplosionEffect;                               		// 0x00AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpactRadius;                                     		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class ABioVisualEffect* ApplyGrenadeVisualImpact ( struct FVector const& vPosition, struct FVector const& vHitNormal, struct FVector const& vDirection );
	void PreloadEffects ( );
};

// Class SFXGame.BioVISWeapon
// 0x0004 (0x00B0 - 0x00AC)
class UBioVISWeapon : public UBioVISSimple
{
public:
	unsigned long                                      m_bApplyMaterialEffectToFriendlies : 1;           		// 0x00AC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bApplyVisualEffectToFriendlies : 1;             		// 0x00AC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioVISXModSet
// 0x0010 (0x0070 - 0x0060)
class UBioVISXModSet : public UBioVisualImpactSet
{
public:
	TArray<struct FBioVISXData>                        VisualEffectMappings;                             		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ApplyVisualImpact ( struct FVector const& vHitLocation, struct FRotator const& rHitRotation, struct FRotator const& rDirectionOfImpact, class UBioVISWeapon* oWeaponVIS, struct FTraceHitInfo const& oHit, class AActor* oBase );
};

// Class SFXGame.BioWeaponVFXAppearance
// 0x008C (0x00EC - 0x0060)
class UBioWeaponVFXAppearance : public UObject
{
public:
	struct SFXName                                     nmMuzzleFlash;                                    		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     nmMuzzleFlash2;                                   		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     nmTracer;                                         		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     nmCoolDown;                                       		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     nmSabotage;                                       		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVISWeapon*                               VisualImpactSet;                                  		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVISGrenade*                              m_VisualExplosionSet;                             		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioDeathVFX*                                m_pDeathVFX;                                      		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             vfxMuzzleFlash;                                   		// 0x00A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             vfxMuzzleFlash2;                                  		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             vfxTracer;                                        		// 0x00B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             vfxCoolDown;                                      		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             vfxSabotage;                                      		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             vfxImpactCrust;                                   		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             vfxGunCrust;                                      		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             vfxWhileFiring;                                   		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fPerShotIncrease;                                 		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fIncreaseTime;                                    		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fCooldownPerSecond;                               		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioProjectile
// 0x002C (0x0314 - 0x02E8)
class ABioProjectile : public AProjectile
{
public:
	struct FBioProjectilePhysicsCollisionContext       m_oPhysicsCollisionContext;                       		// 0x02E8 (0x0020) [0x0000000004000008]              ( CPF_ExportObject | CPF_EditInline )
	class UBioDamageType*                              m_pDamage;                                        		// 0x0308 (0x0008) [0x0000000000000000]              
	unsigned long                                      m_bEnablePhysicsTouch : 1;                        		// 0x0310 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventProcessPhysicsTouch ( class AActor* oOther, struct FVector const& vHitLocation, struct FVector const& vHitNormal );
	void ProcessTouch ( class AActor* oOther, struct FVector const& vHitLocation, struct FVector const& vHitNormal );
	void Explode ( struct FVector const& vHitLocation, struct FVector const& vHitNormal );
	bool IsValidTarget ( class AActor* oActor );
};

// Class SFXGame.BioGrenadeProjectile
// 0x0034 (0x0348 - 0x0314)
class ABioGrenadeProjectile : public ABioProjectile
{
public:
	struct FVector                                     m_ExpHitLocation;                                 		// 0x0314 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_ExpHitNormal;                                   		// 0x0320 (0x000C) [0x0000000000000000]              
	class USkeletalMeshComponent*                      m_Mesh;                                           		// 0x032C (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class URB_Handle*                                  m_GrenadeHandle;                                  		// 0x0334 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UBioItemGrenade*                             m_pItem;                                          		// 0x033C (0x0008) [0x0000000000000000]              
	unsigned long                                      m_bInstigatorIsPlayer : 1;                        		// 0x0344 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bShowDebugAiming : 1;                           		// 0x0344 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventDetonate ( );
	void SetVelocity ( struct FVector const& vVelocity );
	void SetTargetPoint ( struct FVector const& vTarget );
	void SetTargetActor ( class AActor* oTarget );
	bool HurtRadius ( float fBaseDamage, float fDamageRadius, class UClass* clsDamageType, float fMomentum, struct FVector const& vHurtOrigin, class AActor* oIgnoredActor, class AController* oInstigatedByController, unsigned long bDoFullDamage, class UDamageType* pDamage );
	void Explode ( struct FVector const& HitLocation, struct FVector const& HitNormal );
	bool ShouldExplode ( float DeltaTime );
	void eventTick ( float DeltaTime );
	void Initialize ( class UBioDamageType* pDamage, class UBioItemGrenade* pItem );
	struct FVector GetActorTargetLocation ( class AActor* oActor );
	bool IsValidTarget ( class AActor* oActor );
	void InitializeUpgradableStats ( );
};

// Class SFXGame.BioGrenadeProjectileBallistic
// 0x0004 (0x034C - 0x0348)
class ABioGrenadeProjectileBallistic : public ABioGrenadeProjectile
{
public:
	float                                              m_fProximityRadius;                               		// 0x0348 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool ShouldExplode ( float DeltaTime );
	void SetVelocity ( struct FVector const& vVelocity );
	void SetTargetPoint ( struct FVector const& vTarget );
	void SetTargetActor ( class AActor* oTarget );
};

// Class SFXGame.BioGrenadeProjectileFrisbee
// 0x0040 (0x0388 - 0x0348)
class ABioGrenadeProjectileFrisbee : public ABioGrenadeProjectile
{
public:
	struct FVector                                     m_vHitNormal;                                     		// 0x0348 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_vIntendedTargetLocation;                        		// 0x0354 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vStartLocation;                                 		// 0x0360 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_oHeatSeekTarget;                                		// 0x036C (0x0008) [0x0000000000000000]              
	class AActor*                                      m_oIntendedTarget;                                		// 0x0374 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fExplosionNoise;                                		// 0x037C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fStickNoise;                                    		// 0x0380 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bIsStuck : 1;                                   		// 0x0384 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DoTouch ( class AActor* oHitActor, struct FVector const& vHitLocation, struct FVector const& vHitNormal );
	void Unstick ( struct FVector const& HitLocation, struct FVector const& HitNormal );
	void eventStick ( class AActor* HitActor, struct FVector const& HitLocation, struct FVector const& HitNormal );
	void HitWall ( struct FVector const& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void ProcessTouch ( class AActor* HitActor, struct FVector const& vHitLocation, struct FVector const& vHitNormal );
	void SetVelocity ( struct FVector const& vVelocity );
	void SetTargetPoint ( struct FVector const& vTarget );
	void SetTargetActor ( class AActor* oTarget );
	void eventDetonate ( );
	void Explode ( struct FVector const& HitLocation, struct FVector const& HitNormal );
	void eventTick ( float DeltaTime );
};

// Class SFXGame.BioLinePowerProjectile
// 0x008C (0x03A0 - 0x0314)
class ABioLinePowerProjectile : public ABioProjectile
{
public:
	TArray<class AActor*>                              m_aImpactedActors;                                		// 0x0314 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     m_vWorldImpactPoint;                              		// 0x0324 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vWorldImpactNormal;                             		// 0x0330 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vLastLocation;                                  		// 0x033C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vStartLocation;                                 		// 0x0348 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     m_vTargetLocation;                                		// 0x0354 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class ABioVisualEffect*                            m_oProjectileVFX;                                 		// 0x0360 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class APawn*                                       m_oCaster;                                        		// 0x0368 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioEpicPawnBehavior*                        m_oCasterBehavior;                                		// 0x0370 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioPowerScript*                             m_oPowerScript;                                   		// 0x0378 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioPower*                                   m_oPower;                                         		// 0x0380 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      m_oTarget;                                        		// 0x0388 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nImpactedCount;                                 		// 0x0390 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fVisualEffectRadius;                            		// 0x0394 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fImpactStability;                               		// 0x0398 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bCasterIsPlayer : 1;                            		// 0x039C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      m_bFirstTargetHit : 1;                            		// 0x039C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bShowPowerAiming : 1;                           		// 0x039C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bShowPowerImpactText : 1;                       		// 0x039C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void HitWall ( struct FVector const& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void ProcessTouch ( class AActor* oOther, struct FVector const& vHitLocation, struct FVector const& vHitNormal );
	void RecordDebugAimingInfo ( struct FVector const& vStartLocation1, struct FVector const& vEndLocation1, struct FVector const& vStartLocation2, struct FVector const& vEndLocation2 );
	void GetProjectileImpactLocation ( class AActor* oActor, struct FVector* vLocation, struct FVector* vNormal );
	void GetImpactLocation ( class AActor* oActor, struct FVector* vLocation, struct FVector* vNormal, struct SFXName* nmBoneName );
	bool DoImpact ( class AActor* oActor, struct FVector const& vHitLocation, struct FVector const& vHitNormal, struct SFXName nmBoneName );
	bool ImpactActors ( struct FVector const& vLocation, struct FVector const& vNormal, float fRadius );
	void TickAuthoritative ( float DeltaSeconds );
	void DoTouch ( class AActor* pOther, struct FVector const& vHitLocation, struct FVector const& vHitNormal );
	bool InitializeData ( class AActor* oCaster, float fStability, float fTravelSpeed, float fRadius, float fRange, struct FVector const& vTargetLocation, class UBioPowerScript* oPowerScript, class UBioPower* oPower, struct FVector const& vCasterVelocity );
};

// Class SFXGame.BioActorBehaviorSaveObject
// 0x000C (0x0084 - 0x0078)
class UBioActorBehaviorSaveObject : public UBioBaseSaveObject
{
public:
	class UBioBaseSaveObject*                          Owner;                                            		// 0x0078 (0x0008) [0x0000000000000000]              
	unsigned long                                      m_bIsDead : 1;                                    		// 0x0080 (0x0004) [0x2000000000000000] [0x00000001] 
	unsigned long                                      m_bGeneratedTreasure : 1;                         		// 0x0080 (0x0004) [0x2000000000000000] [0x00000002] 
	unsigned long                                      m_bChallengeScaled : 1;                           		// 0x0080 (0x0004) [0x2000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void LoadObject ( class UObject* O );
	void SaveObject ( class UObject* O );
};

// Class SFXGame.BioArtPlaceableBehaviorSaveObject
// 0x002E (0x00B2 - 0x0084)
class UBioArtPlaceableBehaviorSaveObject : public UBioActorBehaviorSaveObject
{
public:
	struct SFXName                                     CurrentFSMStateName;                              		// 0x0084 (0x0008) [0x0000000000000000]              
	struct SFXName                                     m_State0;                                         		// 0x008C (0x0008) [0x2000000000000000]              
	struct SFXName                                     m_State1;                                         		// 0x0094 (0x0008) [0x2000000000000000]              
	class UBioBaseSaveObject*                          m_oInventory;                                     		// 0x009C (0x0008) [0x0000000000000000]              
	float                                              m_fHealth;                                        		// 0x00A4 (0x0004) [0x2000000000000000]              
	float                                              m_fCurrentHealth;                                 		// 0x00A8 (0x0004) [0x2000000000000000]              
	unsigned long                                      Enabled : 1;                                      		// 0x00AC (0x0004) [0x2000000000000000] [0x00000001] 
	unsigned long                                      m_bIsDestroyed : 1;                               		// 0x00AC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bUseCaseOverride : 1;                           		// 0x00AC (0x0004) [0x2000000000000000] [0x00000004] 
	unsigned long                                      m_bPlayerOnly : 1;                                		// 0x00AC (0x0004) [0x2000000000000000] [0x00000008] 
	unsigned long                                      m_bSkillGameFailed : 1;                           		// 0x00AC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bSkillGameXpAwarded : 1;                        		// 0x00AC (0x0004) [0x2000000000000000] [0x00000020] 
	unsigned char                                      m_eUseCase;                                       		// 0x00B0 (0x0001) [0x2000000000000000]              
	unsigned char                                      m_SkillDifficulty;                                		// 0x00B1 (0x0001) [0x2000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void LoadObject ( class UObject* O );
	void SaveObject ( class UObject* O );
};

// Class SFXGame.BioEpicPawnBehaviorSaveObject
// 0x0028 (0x00AC - 0x0084)
class UBioEpicPawnBehaviorSaveObject : public UBioActorBehaviorSaveObject
{
public:
	FString                                            m_FirstName;                                      		// 0x0084 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_HealthCurrent;                                  		// 0x0094 (0x0004) [0x0000000000000000]              
	float                                              m_ShieldCurrent;                                  		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                m_LastName;                                       		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              m_HealthMax;                                      		// 0x00A0 (0x0004) [0x0000000000000000]              
	float                                              m_HealthRegenRate;                                		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              m_fRadarRange;                                    		// 0x00A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void LoadObject ( class UObject* O );
	void SaveObject ( class UObject* O );
};

// Class SFXGame.BioPawnBehaviorSaveObject
// 0x00C5 (0x0171 - 0x00AC)
class UBioPawnBehaviorSaveObject : public UBioEpicPawnBehaviorSaveObject
{
public:
	TArray<class UBioItemSaveObject*>                  m_aEquipped;                                      		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class UBioItemSaveObject*>                  m_QuickSlotArray;                                 		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FBioActionMapping>                   m_aActionMapping;                                 		// 0x00CC (0x0010) [0x2000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FBioSimpleTalentSave>                m_aSimpleTalents;                                 		// 0x00DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FBioComplexTalentSave>               m_aComplexTalents;                                		// 0x00EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioBaseSaveObject*                          m_Squad;                                          		// 0x00FC (0x0008) [0x0000000000000000]              
	class UBioBaseSaveObject*                          m_Inventory;                                      		// 0x0104 (0x0008) [0x0000000000000000]              
	int                                                m_XPLevel;                                        		// 0x010C (0x0004) [0x0000000000000000]              
	float                                              m_HealthPerLevel;                                 		// 0x0110 (0x0004) [0x0000000000000000]              
	float                                              m_StabilityCurrent;                               		// 0x0114 (0x0004) [0x0000000000000000]              
	float                                              m_ToxicCurrent;                                   		// 0x0118 (0x0004) [0x0000000000000000]              
	int                                                m_Stamina;                                        		// 0x011C (0x0004) [0x0000000000000000]              
	int                                                m_Focus;                                          		// 0x0120 (0x0004) [0x0000000000000000]              
	int                                                m_Precision;                                      		// 0x0124 (0x0004) [0x0000000000000000]              
	int                                                m_Coordination;                                   		// 0x0128 (0x0004) [0x0000000000000000]              
	int                                                m_Experience;                                     		// 0x012C (0x0004) [0x0000000000000000]              
	int                                                m_TalentPoints;                                   		// 0x0130 (0x0004) [0x0000000000000000]              
	int                                                m_TalentPoolPoints;                               		// 0x0134 (0x0004) [0x0000000000000000]              
	int                                                m_LocalizedClassName;                             		// 0x0138 (0x0004) [0x0000000000000000]              
	int                                                m_AutoLevelUpTemplateID;                          		// 0x013C (0x0004) [0x0000000000000000]              
	int                                                m_SpecializationBonusID;                          		// 0x0140 (0x0004) [0x0000000000000000]              
	float                                              m_SkillCharm;                                     		// 0x0144 (0x0004) [0x0000000000000000]              
	float                                              m_SkillIntimidate;                                		// 0x0148 (0x0004) [0x0000000000000000]              
	float                                              m_SkillHaggle;                                    		// 0x014C (0x0004) [0x0000000000000000]              
	float                                              m_Audibility;                                     		// 0x0150 (0x0004) [0x0000000000000000]              
	float                                              m_Blindness;                                      		// 0x0154 (0x0004) [0x0000000000000000]              
	float                                              m_DamageDurationMult;                             		// 0x0158 (0x0004) [0x0000000000000000]              
	float                                              m_Deafness;                                       		// 0x015C (0x0004) [0x0000000000000000]              
	int                                                m_nUnlootableGrenadeCount;                        		// 0x0160 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bHeadGearVisiblePreference : 1;                 		// 0x0164 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      m_Gender;                                         		// 0x0168 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_Race;                                           		// 0x0169 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eQuickSlotCurrent;                              		// 0x016A (0x0001) [0x0000000000000000]              
	unsigned char                                      m_AttributePrimary;                               		// 0x016B (0x0001) [0x0000000000000000]              
	unsigned char                                      m_AttributeSecondary;                             		// 0x016C (0x0001) [0x0000000000000000]              
	unsigned char                                      m_ClassBase;                                      		// 0x016D (0x0001) [0x0000000000000000]              
	unsigned char                                      m_SpectreRank;                                    		// 0x016E (0x0001) [0x0000000000000000]              
	unsigned char                                      m_BackgroundOrigin;                               		// 0x016F (0x0001) [0x0000000000000000]              
	unsigned char                                      m_BackgroundNotoriety;                            		// 0x0170 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void LoadObject ( class UObject* O );
	void SaveObject ( class UObject* O );
};

// Class SFXGame.BioVehicleBehaviorSaveObject
// 0x0010 (0x00BC - 0x00AC)
class UBioVehicleBehaviorSaveObject : public UBioEpicPawnBehaviorSaveObject
{
public:
	FString                                            m_ActorType;                                      		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void LoadObject ( class UObject* O );
	void SaveObject ( class UObject* O );
};

// Class SFXGame.BioArtPlaceableSaveObject
// 0x0000 (0x00AC - 0x00AC)
class UBioArtPlaceableSaveObject : public UBioActorSaveObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool LoadPositionAndOrientation ( class AActor* O );
	bool SavePositionAndOrientation ( class AActor* O );
};

// Class SFXGame.BioBaseSquadSaveObject
// 0x0008 (0x0080 - 0x0078)
class UBioBaseSquadSaveObject : public UBioBaseSaveObject
{
public:
	class UBioBaseSaveObject*                          m_Inventory;                                      		// 0x0078 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void LoadObject ( class UObject* O );
	void SaveObject ( class UObject* O );
};

// Class SFXGame.BioSquadSaveObject
// 0x0010 (0x0090 - 0x0080)
class UBioSquadSaveObject : public UBioBaseSquadSaveObject
{
public:
	int                                                m_nSquadExperience;                               		// 0x0080 (0x0004) [0x2000000000000000]              
	int                                                m_nMaxLevel;                                      		// 0x0084 (0x0004) [0x2000000000000000]              
	int                                                m_nMinLevel;                                      		// 0x0088 (0x0004) [0x2000000000000000]              
	int                                                m_nSquadLevel;                                    		// 0x008C (0x0004) [0x2000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioInterfaceAppearanceSaveObject
// 0x0010 (0x0088 - 0x0078)
class UBioInterfaceAppearanceSaveObject : public UBioBaseSaveObject
{
public:
	class UBioBaseSaveObject*                          m_oMorphFace;                                     		// 0x0078 (0x0008) [0x0000000000000000]              
	class UBioMorphFace*                               m_pFaceAsset;                                     		// 0x0080 (0x0008) [0x2000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void LoadObject ( class UObject* O );
	void SaveObject ( class UObject* O );
};

// Class SFXGame.BioInventorySaveObject
// 0x0030 (0x00A8 - 0x0078)
class UBioInventorySaveObject : public UBioBaseSaveObject
{
public:
	TArray<class UBioItemSaveObject*>                  m_aItem;                                          		// 0x0078 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FBioPlotPseudoItem>                  m_aPlotItem;                                      		// 0x0088 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nResourceCredits;                               		// 0x0098 (0x0004) [0x2000000000000000]              
	int                                                m_nResourceGrenades;                              		// 0x009C (0x0004) [0x2000000000000000]              
	float                                              m_fResourceMedigel;                               		// 0x00A0 (0x0004) [0x2000000000000000]              
	float                                              m_fResourceSalvage;                               		// 0x00A4 (0x0004) [0x2000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void LoadObject ( class UObject* O );
	void SaveObject ( class UObject* O );
};

// Class SFXGame.BioItemSaveObject
// 0x000D (0x0085 - 0x0078)
class UBioItemSaveObject : public UBioBaseSaveObject
{
public:
	int                                                m_nID;                                            		// 0x0078 (0x0004) [0x2000000000000000]              
	int                                                m_manufacturer;                                   		// 0x007C (0x0004) [0x2000000000000000]              
	int                                                m_plotConditionalID;                              		// 0x0080 (0x0004) [0x2000000000000000]              
	unsigned char                                      m_eSophistication;                                		// 0x0084 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SaveObject ( class UObject* O );
};

// Class SFXGame.BioItemXModSaveObject
// 0x0007 (0x008C - 0x0085)
class UBioItemXModSaveObject : public UBioItemSaveObject
{
public:
	int                                                m_type;                                           		// 0x0088 (0x0004) [0x2000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioItemXModdableSaveObject
// 0x0013 (0x0098 - 0x0085)
class UBioItemXModdableSaveObject : public UBioItemSaveObject
{
public:
	TArray<struct FBioItemXModdableSaveObjectSlotSpec> m_aSlotSpec;                                      		// 0x0088 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void LoadObject ( class UObject* O );
	void SaveObject ( class UObject* O );
};

// Class SFXGame.BioLevelSaveObject
// 0x0030 (0x00A8 - 0x0078)
class UBioLevelSaveObject : public UBioBaseSaveObject
{
public:
	TArray<class UBioBaseSaveObject*>                  m_LevelObjects;                                   		// 0x0078 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FSavedLootBag>                       m_LootBags;                                       		// 0x0088 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<FString>                                    m_lstDestroyedObjects;                            		// 0x0098 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SaveDestroyedObjects ( class UObject* O );
	void LoadLootBagArray ( class UObject* O );
	void SaveLootBagArray ( class UObject* O );
	void DestroyObject ( class UObject* O );
	void LoadObject ( class UObject* O );
	void SaveObject ( class UObject* O );
};

// Class SFXGame.BioMaterialOverrideSaveObject
// 0x0030 (0x00A8 - 0x0078)
class UBioMaterialOverrideSaveObject : public UBioBaseSaveObject
{
public:
	TArray<struct FTextureParameter>                   m_aTextureOverrides;                              		// 0x0078 (0x0010) [0x2000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FColorParameter>                     m_aColorOverrides;                                		// 0x0088 (0x0010) [0x2000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FScalarParameter>                    m_aScalarOverrides;                               		// 0x0098 (0x0010) [0x2000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void LoadObject ( class UObject* O );
	void SaveObject ( class UObject* O );
};

// Class SFXGame.BioPawnSaveObject
// 0x0010 (0x00BC - 0x00AC)
class UBioPawnSaveObject : public UBioActorSaveObject
{
public:
	float                                              m_fGrimeGrimeLevel;                               		// 0x00AC (0x0004) [0x2000000000000000]              
	float                                              m_fGrimeDirtLevel;                                		// 0x00B0 (0x0004) [0x2000000000000000]              
	int                                                m_nTalkedToCount;                                 		// 0x00B4 (0x0004) [0x2000000000000000]              
	unsigned long                                      m_bHeadGearVisiblePreference : 1;                 		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void LoadObject ( class UObject* pObject );
	void SaveObject ( class UObject* pObject );
};

// Class SFXGame.BioPlayerVehicleSaveObject
// 0x0014 (0x008C - 0x0078)
class UBioPlayerVehicleSaveObject : public UBioBaseSaveObject
{
public:
	FString                                            m_ActorType;                                      		// 0x0078 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      m_bPowertrainEnabled : 1;                         		// 0x0088 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bVehicleFunctionEnabled : 1;                    		// 0x0088 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void LoadObject ( class UObject* O );
	void SaveObject ( class UObject* O );
};

// Class SFXGame.BioSaveGame
// 0x0234 (0x0294 - 0x0060)
class UBioSaveGame : public UObject
{
public:
	struct FMap_Mirror                                 m_SavedMaps;                                      		// 0x0060 (0x0048) [0x0000000000001000]              ( CPF_Native )
	FString                                            m_sMapName;                                       		// 0x00A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FHenchmanLookup>                     m_Henchmen;                                       		// 0x00B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sDrivenVehicle;                                 		// 0x00C8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<unsigned char>                              m_GameSpecificOptions;                            		// 0x00D8 (0x0010) [0x0000000000406000]              ( CPF_Transient | CPF_Config | CPF_NeedCtorLink )
	FString                                            m_sCharacterID;                                   		// 0x00E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<FString>                                    m_DependentPackages;                              		// 0x00F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class UBioItemSaveObject*>                  m_savedBuybackItems;                              		// 0x0108 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_SGC_Filename;                                   		// 0x0118 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FGameOptions                                m_GameOptions;                                    		// 0x0128 (0x00B0) [0x0000000000000000]              
	struct FVector                                     m_DesiredPosition;                                		// 0x01D8 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UBioBaseSaveObject*                          m_Player;                                         		// 0x01E4 (0x0008) [0x0000000000000000]              
	class UBioBaseSaveObject*                          m_PlayerController;                               		// 0x01EC (0x0008) [0x0000000000000000]              
	class UBioBaseSaveObject*                          m_Vehicle;                                        		// 0x01F4 (0x0008) [0x0000000000000000]              
	class UBioBaseSaveObject*                          m_PlayerVehicle;                                  		// 0x01FC (0x0008) [0x0000000000000000]              
	class UBioBaseSaveObject*                          m_PlayerAppearance;                               		// 0x0204 (0x0008) [0x0000000000000000]              
	class UPackage*                                    m_PlayerPackage;                                  		// 0x020C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_DesiredStartPoint;                              		// 0x0214 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioWorldSaveObject*                         m_WorldSave;                                      		// 0x021C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBio2DA*                                     m_pSaveGameAreaInfo;                              		// 0x0224 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioSFHandler_MessageBox*                    m_CurrentSaveMessageBox;                          		// 0x022C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_SGC_sCallbackFunction;                          		// 0x0234 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_SGC_sCallbackFunctionCanceled;                  		// 0x023C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nNumSavedLevels;                                		// 0x0244 (0x0004) [0x0000000000000000]              
	float                                              m_fAutoSaveTime;                                  		// 0x0248 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	float                                              m_fAutoSaveAttemptDelay;                          		// 0x024C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nNumSaveSlots;                                  		// 0x0250 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nSaveGameSize;                                  		// 0x0254 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nMaxSaveGames;                                  		// 0x0258 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_srQuickSaveComplete;                            		// 0x025C (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_srQuickSaveFail;                                		// 0x0260 (0x0004) [0x0000000000006000]              ( CPF_Transient | CPF_Config )
	int                                                m_nPlaythroughID;                                 		// 0x0264 (0x0004) [0x0000000000000000]              
	int                                                m_nPlayerKills;                                   		// 0x0268 (0x0004) [0x0000000000000000]              
	int                                                m_nPlayerDeaths;                                  		// 0x026C (0x0004) [0x0000000000000000]              
	float                                              m_fUpdateStartTime;                               		// 0x0270 (0x0004) [0x0000000000000000]              
	float                                              m_fPlaythroughTime;                               		// 0x0274 (0x0004) [0x0000000000000000]              
	float                                              m_fShieldDamageTaken;                             		// 0x0278 (0x0004) [0x0000000000000000]              
	float                                              m_fLastSaveTime;                                  		// 0x027C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fAutoSaveCooldownTime;                          		// 0x0280 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fAutoSaveGUITimer;                              		// 0x0284 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nLowestCombatDifficultyUsed;                    		// 0x0288 (0x0004) [0x0000000000000000]              
	int                                                m_AdditionalFreeBytesNeeded;                      		// 0x028C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_IsDriving : 1;                                  		// 0x0290 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bWasSaving : 1;                                 		// 0x0290 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bInvalidSaveFileCreator : 1;                    		// 0x0290 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_UseDesiredStartPoint : 1;                       		// 0x0290 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      m_bUseNewSaveSystem : 1;                          		// 0x0290 (0x0004) [0x0000000000006000] [0x00000010] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bIgnoreDLCRequirements : 1;                     		// 0x0290 (0x0004) [0x0000000000006000] [0x00000020] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bFilterCharacterSaves : 1;                      		// 0x0290 (0x0004) [0x0000000000006000] [0x00000040] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bDissableAutoSave : 1;                          		// 0x0290 (0x0004) [0x0000000000006000] [0x00000080] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bEnableLimitedSaves : 1;                        		// 0x0290 (0x0004) [0x0000000000006000] [0x00000100] ( CPF_Transient | CPF_Config )
	unsigned long                                      m_bSavingGame : 1;                                		// 0x0290 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      m_bSecondPlaythrough : 1;                         		// 0x0290 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      m_bLastSaveSuccess : 1;                           		// 0x0290 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      m_bAutoSaveFailOnError : 1;                       		// 0x0290 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      m_SGC_bForceSave : 1;                             		// 0x0290 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      m_SGC_bCharacterOnly : 1;                         		// 0x0290 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      m_SGC_bDeviceSelectionCanceled : 1;               		// 0x0290 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      m_bWasExternalUIActivePriorToTransition : 1;      		// 0x0290 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventLoadBuybackItems ( class ABioWorldInfo* WorldInfo );
	void eventSaveBuybackItems ( class ABioWorldInfo* WorldInfo );
	bool LoadAppearance ( class UBioInterface_Appearance* playerAppearance );
	void eventSaveAppearance ( class UBioInterface_Appearance* Appearance );
	void eventSavePlayerParty ( class ABioPlayerController* PlayerController, class UPackage* savePackage, unsigned long bPlayerOnly );
	void SaveEquipmentIntoInventory ( class UBioPawnBehaviorSaveObject* oHenchie, class UBioInventorySaveObject* oInventorySave );
	void eventPostLoad ( class ABioPlayerController* PlayerController );
	void LoadVehicle ( class ABioPlayerController* PlayerController );
	void eventSaveVehicle ( class UBioVehicleBehaviorBase* Vehicle, unsigned long isDriving );
	void SaveHenchman ( struct SFXName pawnTag, class UBioPawnBehavior* henchBehavior, class UPackage* savePackage );
	bool LoadHenchman ( struct SFXName pawnTag, class UBioPawnBehavior* henchBehavior );
	void eventEstablishGlobalPlotVariablesForReplayCharacter ( );
	bool LoadPlayer ( class UBioPawnBehavior* playerBehavior );
	void GetPlayerSpawn ( struct FVector* SpawnLocation, struct FRotator* SpawnRotation );
	void eventSetPause ( class APlayerController* Controller, unsigned long bPause, unsigned long bPauseWorld );
	void LoadObjectPosition ( class UBioBaseSaveObject* Save, class AActor* Obj );
	class USFXEngine* GetME2SaveEngine ( );
	class USFXSaveGame* GetME2SaveGame ( );
	class UBioPawnBehaviorSaveObject* GetPlayerSaveObject ( );
	void SetHenchmanMappedPower ( struct SFXName pawnTag, struct SFXName nmMappedPower );
	struct SFXName GetHenchmanMappedPower ( struct SFXName pawnTag );
	void SetHenchmanSaveObject ( struct SFXName pawnTag, class UBioBaseSaveObject* Save );
	class UBioBaseSaveObject* GetHenchmanSaveObject ( struct SFXName pawnTag );
	void ApplyGameOptions ( struct FGameOptions* io_GameOptions );
	void SetGameOptions ( struct FGameOptions* i_GameOptions );
	void NativeReset ( );
	void ResetToDefaults ( );
	void DisplayOutOfSpaceMessage ( );
	void CheckFreeSpace ( FString const& Filename, struct SFXName CallbackFunction, class UObject* CallbackObject );
	void CheckFreeSpaceComplete ( struct FSFXSaveGameCommandEventArgs const& Args );
	void SaveComplete ( struct FSFXSaveGameCommandEventArgs const& Args );
	void GetTimePlayed ( int* o_Sec, int* o_Min, int* o_Hours );
	void GetStorageDevice ( unsigned long bAPressed, int nContext );
	bool SaveCharacter ( int i_nDeviceID );
	bool ClearWorldSaveObject ( FString const& sMapName, FString const& sChunkName );
	void EmptySavedMaps ( );
	void ShowSavingMessageBox ( );
	bool IsAutoSaveComplete ( );
	void AutoSaveDelegate ( float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox );
	bool TryAutoSaving ( );
	bool AutoSave ( unsigned long bForceSave, unsigned long bShowSavingGui );
	class UPackage* GetPlayerPackage ( );
	void GetCharacterInfo ( TArray<struct FSaveGameRecord>* Records, int* o_ClassId, int* o_characterLevel );
	FString NewCharacterProfile ( FString const& sCharacterName );
	unsigned char LoadMostRecentSaveRecord ( FString const& sCharacterID );
	bool GetSaveRecords ( FString const& sCharacterID, unsigned long i_bShowAllSaveGames, unsigned long i_bHideAutoSave, int i_nSortById, TArray<struct FSaveGameRecord>* Records );
	void DevSelectCanceledConfirmationCallback ( int i_nDeviceID );
	void LoadGameDevSelectCanceledCallback ( int i_nDeviceID );
	void SaveGameDevSelectCanceledCallback ( int i_nDeviceID );
	void LoadGameFromCallback ( int i_nDeviceID );
	void SaveGameFromCallback ( int i_nDeviceID );
};

// Class SFXGame.BioShopSaveObject
// 0x0018 (0x0090 - 0x0078)
class UBioShopSaveObject : public UBioBaseSaveObject
{
public:
	TArray<class UBioBaseSaveObject*>                  m_aInventories;                                   		// 0x0078 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_lastPlayerLevel;                                		// 0x0088 (0x0004) [0x2000000000000000]              
	unsigned long                                      m_isInitialized : 1;                              		// 0x008C (0x0004) [0x2000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void LoadObject ( class UObject* O );
	void SaveObject ( class UObject* O );
};

// Class SFXGame.BioVehicleSaveObject
// 0x0000 (0x00AC - 0x00AC)
class UBioVehicleSaveObject : public UBioActorSaveObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void LoadObject ( class UObject* O );
	void SaveObject ( class UObject* O );
	bool LoadPositionAndOrientation ( class AActor* O );
	bool SavePositionAndOrientation ( class AActor* O );
};

// Class SFXGame.BioWorldInfoSaveObject
// 0x0099 (0x0111 - 0x0078)
class UBioWorldInfoSaveObject : public UBioBaseSaveObject
{
public:
	TArray<struct FWorldStreamingState>                m_WorldStreamingStates;                           		// 0x0078 (0x0010) [0x2000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<FString>                                    m_lstCinematicsSeen;                              		// 0x0088 (0x0010) [0x2000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	FString                                            m_sDestinationAreaMap;                            		// 0x0098 (0x0010) [0x2000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<int>                                        m_pScannedClusters;                               		// 0x00A8 (0x0010) [0x2000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<int>                                        m_pScannedSystems;                                		// 0x00B8 (0x0010) [0x2000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<int>                                        m_pScannedPlanets;                                		// 0x00C8 (0x0010) [0x2000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     m_vDestination;                                   		// 0x00D8 (0x000C) [0x2000000000000001]              ( CPF_Edit )
	class UBioBaseSaveObject*                          m_oPendingLoot;                                   		// 0x00E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nJournalLastSelectedMission;                    		// 0x00EC (0x0004) [0x2000000000000001]              ( CPF_Edit )
	int                                                m_nJournalLastSelectedAssignment;                 		// 0x00F0 (0x0004) [0x2000000000000001]              ( CPF_Edit )
	int                                                m_nCodexLastSelectedPrimary;                      		// 0x00F4 (0x0004) [0x2000000000000001]              ( CPF_Edit )
	int                                                m_nCodexLastSelectedSecondary;                    		// 0x00F8 (0x0004) [0x2000000000000001]              ( CPF_Edit )
	int                                                m_nCurrentTipID;                                  		// 0x00FC (0x0004) [0x2000000000000000]              
	int                                                m_OverrideTip;                                    		// 0x0100 (0x0004) [0x2000000000000000]              
	unsigned long                                      m_bJournalShowingMissions : 1;                    		// 0x0104 (0x0004) [0x2000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bCodexShowingPrimary : 1;                       		// 0x0104 (0x0004) [0x2000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      m_lstBrowserAlerts[ 0x8 ];                        		// 0x0108 (0x0008) [0x2000000000000001]              ( CPF_Edit )
	unsigned char                                      m_nJournalSortMethod;                             		// 0x0110 (0x0001) [0x2000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void LoadObject ( class UObject* O );
	void SaveObject ( class UObject* O );
};

// Class SFXGame.BioWorldSaveObject
// 0x0018 (0x0090 - 0x0078)
class UBioWorldSaveObject : public UBioBaseSaveObject
{
public:
	TArray<struct FLevelLookup>                        m_Levels;                                         		// 0x0078 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioBaseSaveObject*                          m_WorldInfoSave;                                  		// 0x0088 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXEngine
// 0x01D5 (0x0235 - 0x0060)
class USFXEngine : public UObject
{
public:
	struct FUniqueNetId                                m_oInitialPlayerID;                               		// 0x0060 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FUniqueNetId                                m_oProfilePlayerID;                               		// 0x0068 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FPlayerInfoEx                               DefaultPlayer;                                    		// 0x0070 (0x0038) [0x0000000000406000]              ( CPF_Transient | CPF_Config | CPF_NeedCtorLink )
	struct FPlayerInfoEx                               NewPlayer;                                        		// 0x00A8 (0x0038) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FBlazeDataStore                             BlazeCache;                                       		// 0x00E0 (0x0028) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FSFXSaveRecord>                      Saves;                                            		// 0x0108 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FGuid>                               DeadPawnList;                                     		// 0x0118 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FKismetBoolSaveRecord>               SavedKismetList;                                  		// 0x0128 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FHenchmanSaveRecord>                 HenchmanRecords;                                  		// 0x0138 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FDoorSaveRecord>                     SavedDoorList;                                    		// 0x0148 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FSFXSaveDescriptor>                  CorruptedCareers;                                 		// 0x0158 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FSFXCareerCacheEntry>                CareerCache;                                      		// 0x0168 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FScriptDelegate                             ResumeGameCompleteDelegate;                       		// 0x0178 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FDynamicLoadInfo>                    DynamicLoadMapping;                               		// 0x0188 (0x0010) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray<struct FPackageRemapInfo>                   DynamicLoadPackageRemapping;                      		// 0x0198 (0x0010) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	TArray<int>                                        AsyncLoadingMapping;                              		// 0x01A8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	FString                                            m_GamerProfileFilename;                           		// 0x01B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __SFXSaveCommandCallback__Delegate;               		// 0x01C8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnResumeGameComplete__Delegate;                 		// 0x01D8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USFXSaveGame*                                CurrentSaveGame;                                  		// 0x01E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USFXTelemetry*                               Telemetry;                                        		// 0x01F0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_DesiredStartPoint;                              		// 0x01F8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastSaveTime;                                     		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastSecondsPlayed;                                		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentUserID;                                    		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentDeviceID;                                  		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentLoadingTip;                                		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AutoSaveInsufficientSpaceTextPS3;                 		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                InsufficentSpaceAcknowledgedText;                 		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CorruptCareerWarningText;                         		// 0x021C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                ConfirmDeleteCorruptText;                         		// 0x0220 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                CancelDeleteCorruptText;                          		// 0x0224 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              LastCantContinueTime;                             		// 0x0228 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                srCantContinueErrorMessage;                       		// 0x022C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bCanWriteSaveToStorage : 1;                       		// 0x0230 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPendingSaveProfile : 1;                          		// 0x0230 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bPendingDisableAutoSave : 1;                      		// 0x0230 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bFlushInputRequested : 1;                         		// 0x0230 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bPlayerNeedsLoad : 1;                             		// 0x0230 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bPlayerLoadPosition : 1;                          		// 0x0230 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      m_bRenderingSuspended : 1;                        		// 0x0230 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bInLoad : 1;                                    		// 0x0230 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      m_bProfileInitialized : 1;                        		// 0x0230 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      m_UseDesiredStartPoint : 1;                       		// 0x0230 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bNewPlayer : 1;                                   		// 0x0230 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bStartedGame : 1;                                 		// 0x0230 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      DebugUseIconicShepard : 1;                        		// 0x0230 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned char                                      PendingModeToRemove;                              		// 0x0234 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool IsInCinematicMode ( );
	void eventClearInitialTelemetryHandler ( );
	void eventAddInitialTelemetryHandler ( );
	void SendTelemetryOnProfileReadComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void FlushIOHandles ( );
	void BioShowDebugMessageBox ( FString const& sMessage );
	bool FindCurrentSaveDevice ( );
	bool IsCurrentDeviceValid ( );
	void ForceGUIUpdate ( );
	float GetCurrentTime ( );
	float GetPlayTimeSeconds ( );
	void LoadPlayer ( );
	int GetCurrentDevice ( );
	void UpdateCurrentDevice ( int DeviceID );
	void SlowResumeGameCallback ( struct FSFXSaveGameCommandEventArgs const& Args );
	class UMassEffectGuiManager* GetScaleFormManager ( );
	void HandleNoFreeSpacePS3Callback ( unsigned long bAPressed, int context );
	void HandleNoFreeSpacePS3 ( unsigned char Type, int AdditionalFreeBytesNeeded );
	void SetCurrentSaveGame ( struct FSFXSaveDescriptor const& Descriptor );
	void SaveGameCallback ( struct FSFXSaveGameCommandEventArgs const& Args );
	bool RemoveSaveRecordByFilename ( FString const& Filename );
	bool GetSaveRecordByFilename ( FString const& Filename, struct FSFXSaveRecord* SaveRecord );
	void SaveGameEx ( struct FSFXSaveDescriptor const& SaveDescriptor );
	void CheckForCorruptCareers ( );
	bool RemoveCachedCareer ( FString const& Career );
	void CheckFreeSpaceComplete ( struct FSFXSaveGameCommandEventArgs const& Args );
	void ResumeRendering ( );
	void SuspendRendering ( );
	void Callback_ConfirmDeleteCorruptCareers ( unsigned long bAPressed, int context, unsigned long bYPressed );
	void ClearSaveCache ( );
	FString ValidCharsFilter ( FString const& Sin, unsigned long bFilterAccentedChars );
	void LoadSaveGame ( class USFXSaveGame* SaveGame );
	bool IsPerformingSaveAction ( unsigned char eAction );
	bool IsSaving ( );
	void ScanSaveDataComplete ( struct FSFXSaveGameCommandEventArgs const& Args );
	void ScanSaveData ( );
	bool TryGetCachedCareer ( FString const& Career, struct FSFXCareerCacheEntry* OutEntry );
	void UpdateCareerCache ( struct FSFXSaveDescriptor const& SaveDescriptor, class USFXSaveGame* SaveGame );
	void ResumeSaveGameCommandExecution ( );
	void QueueSaveGameCommand ( unsigned char Action, struct FSFXSaveDescriptor const& SaveDescriptor, struct FScriptDelegate Callback );
	void ClearCurrentSaveDescriptor ( );
	struct FSFXSaveDescriptor GetCurrentSaveDescriptor ( );
	bool ParseCareer ( FString const& Career, FString* FirstName, FString* ClassName, unsigned char* Origin, unsigned char* Notoriety, int* Year, int* Month, int* Day, int* MSSinceMidnight );
	void GenerateCareer ( FString const& FirstName, FString const& ClassName, unsigned char Origin, unsigned char Notoriety, int Year, int Month, int Day, int MSSinceMidnight, FString* OutCareer, FString* OutDisplayName );
	void CreateCareerInternal ( FString const& FirstName, FString const& ClassName, unsigned char Origin, unsigned char Notoriety, int Year, int Month, int Day, int MSSinceMidnight );
	void CreateCareer ( FString const& FirstName, int srClass, unsigned char Origin, unsigned char Notoriety );
	void OnResumeGameComplete ( unsigned long bWasSuccessful );
	void SFXSaveCommandCallback ( struct FSFXSaveGameCommandEventArgs const& Args );
	float CurrentSystemTimeSeconds ( );
	void SaveGamerProfileComplete ( struct FSFXSaveGameCommandEventArgs const& Args );
	void ReleaseSeekFreeObject ( FString const& ObjectName );
	class UObject* LoadSeekFreeObjectAsync ( FString const& Object, class UClass* ObjectClass, unsigned char* Status );
	class UObject* LoadSeekFreeObject ( FString const& ObjectName, class UClass* ObjectClass );
	bool IsSeekFreeObjectSupported ( FString const& ObjectName );
	void LaunchUnreaperWithDiscCheck ( );
	void LaunchUnreaper ( );
	void DeleteProfileComplete ( struct FSFXSaveGameCommandEventArgs const& Args );
	void ReLaunchExecutable ( );
	void SkipMovie ( );
	void ResetForcedInactiveParticleSystems ( );
	class USFXEngine* GetEngine ( );
	struct FPlayerInfoEx CurrentPlayerInfo ( );
};

// Class SFXGame.SFXSaveGame
// 0x04CC (0x052C - 0x0060)
class USFXSaveGame : public UObject
{
public:
	struct FPlayerSaveRecord                           PlayerRecord;                                     		// 0x0060 (0x01E4) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FGamerProfileSaveRecord                     ProfileRecord;                                    		// 0x0244 (0x0108) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FPlotTableSaveRecord                        PlotRecord;                                       		// 0x034C (0x0074) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVehicleSaveRecord                          VehicleRecord;                                    		// 0x03C0 (0x001C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FDependentDLCRecord>                 DependentDLC;                                     		// 0x03DC (0x0010) [0x0000000000500001]              ( CPF_Edit | CPF_NeedCtorLink )
	FString                                            Filename;                                         		// 0x03EC (0x0010) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	FString                                            DebugName;                                        		// 0x03FC (0x0010) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	FString                                            sDisplayName;                                     		// 0x040C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	FString                                            characterID;                                      		// 0x041C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	FString                                            m_sMapName;                                       		// 0x042C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	FString                                            m_sParentMapName;                                 		// 0x043C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FLevelSaveRecord>                    LevelRecords;                                     		// 0x044C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FStreamingStateSaveRecord>           StreamingRecords;                                 		// 0x045C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FKismetBoolSaveRecord>               KismetRecords;                                    		// 0x046C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FDoorSaveRecord>                     DoorRecords;                                      		// 0x047C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FGuid>                               PawnRecords;                                      		// 0x048C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<unsigned char>                              KeyBindings;                                      		// 0x049C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FHenchmanSaveRecord>                 HenchmanRecords;                                  		// 0x04AC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FGalaxyMapSaveRecord                        GalaxyMapRecord;                                  		// 0x04BC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FSaveTimeStamp                              TimeStamp;                                        		// 0x04CC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FSaveTimeStamp                              CreatedDate;                                      		// 0x04DC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SaveLocation;                                     		// 0x04EC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    SaveRotation;                                     		// 0x04F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     BaseLevelName;                                    		// 0x0504 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                SerializedSize;                                   		// 0x050C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                FileVersion;                                      		// 0x0510 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	int                                                SecondsPlayed;                                    		// 0x0514 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Disc;                                             		// 0x0518 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Difficulty;                                       		// 0x051C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EndGameState;                                     		// 0x0520 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentLoadingTip;                                		// 0x0524 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsValid : 1;                                     		// 0x0528 (0x0004) [0x0000000000002001] [0x00000001] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bIsGamerProfile : 1;                              		// 0x0528 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ResetToDefaults ( );
	void eventEstablishGlobalPlotVariablesForReplayCharacter ( );
	void LoadItem ( class UObject* InOuter, class UBioItem** Item, struct FItemSaveRecord* SavedItem );
	void LoadItems ( class UObject* InOuter, TArray<class UBioItem*>* Items, TArray<struct FItemSaveRecord>* SavedItems );
	void LoadEquipment ( class UBioPawnBehavior** Player, TArray<struct FItemSaveRecord>* SavedEquipment, TArray<struct FItemSaveRecord>* SavedWeapons );
	void LoadBuybackItems ( class ABioWorldInfo** WorldInfo, TArray<struct FItemSaveRecord>* SavedItems );
	void LoadInventory ( class UBioInventory** Inventory, TArray<struct FItemSaveRecord>* SavedItems );
	void LoadTalents ( class UBioPawnBehavior* playerBehavior, TArray<struct FSimpleTalentSaveRecord>* simpleRecords, TArray<struct FComplexTalentSaveRecord>* complexRecords );
	class UBioMorphFace* LoadMorphHead ( );
	void LoadAppearance ( class UBioPawnBehavior* Player, struct FAppearanceSaveRecord* Record );
	bool LoadHenchman ( struct SFXName Tag, class UBioPawnBehavior** henchBehavior );
	void eventPostLoad ( class ABioPlayerController* PlayerController );
	void MoveToFreeSpot ( class AActor* oActor, struct FVector const& Location );
	void LoadVehicle ( class ABioPlayerController* PlayerController );
	void SaveVehicle ( class UBioVehicleBehaviorBase* Vehicle, unsigned long isDriving );
	void eventLoadPlayer ( class ABioPlayerController* PlayerController );
	void SaveTalents ( class UBioPawnBehavior* playerBehavior, TArray<struct FSimpleTalentSaveRecord>* simpleRecords, TArray<struct FComplexTalentSaveRecord>* complexRecords );
	bool SaveMorphHead ( class UBioMorphFace* Morph, struct FMorphHeadSaveRecord* Record );
	void SaveAppearance ( class UBioPawnBehavior* Player, struct FAppearanceSaveRecord* Record );
	void LoadHotKeys ( class ABioPlayerController* PC, TArray<struct FHotKeySaveRecord>* Records );
	void SaveHotKeys ( class ABioPlayerController* PC, TArray<struct FHotKeySaveRecord>* Records );
	void SaveHenchman ( struct SFXName pawnTag, class UBioPawnBehavior** henchBehavior, struct FHenchmanSaveRecord* Record );
	void SaveItem ( class UBioItem** Item, struct FItemSaveRecord* OutItem );
	void SaveItems ( TArray<class UBioItem*>* Items, TArray<struct FItemSaveRecord>* OutItems );
	void SaveEquipment ( class UBioPawnBehavior** Player, TArray<struct FItemSaveRecord>* Equipment, TArray<struct FItemSaveRecord>* Weapons );
	void SaveBuybackItems ( class ABioWorldInfo** WorldInfo, TArray<struct FItemSaveRecord>* OutItems );
	void SaveInventory ( class UBioInventory** Inventory, TArray<struct FItemSaveRecord>* OutItems );
	void SavePlotData ( );
	void SaveEquipmentToInventory ( );
	void SaveSingleHenchman ( struct SFXName Tag, class ABioPawn* henchPawn );
	void eventSavePlayer ( class ABioPlayerController* PlayerController );
	void LoadGameOptions ( class UBioGamerProfile** Profile, struct FGameOptionsSaveRecord* Record );
	void eventLoadSaveGameOptions ( class UBioGamerProfile** Profile );
	void LoadCharacterProfiles ( TArray<struct FCharacterProfile>* Profiles, TArray<struct FCharacterProfileSaveRecord>* Records );
	void LoadFloatStats ( TArray<float>* Variables, TArray<float>* Records );
	void LoadIntStats ( TArray<int>* Variables, TArray<int>* Records );
	void LoadBonusTalents ( TArray<struct FBonusTalent>* talents, TArray<struct FBonusTalentSaveRecord>* Records );
	void LoadAchievementStates ( TArray<int>* Achievements, TArray<int>* Records );
	void LoadRewards ( TArray<struct FProfileRewardStat>* Rewards, TArray<struct FProfileRewardSaveRecord>* Records );
	void LoadPlaythroughs ( TArray<struct FProfilePlaythrough>* Playthroughs, TArray<struct FProfilePlaythroughSaveRecord>* Records );
	void LoadAchievements ( TArray<struct FPlotManagerAchievement>* Variables, TArray<struct FPlotManagerAchievementSaveRecord>* Records );
	void LoadFloatVariables ( TArray<struct FProfileFLOAT>* Variables, TArray<struct FProfileFLOATSaveRecord>* Records );
	void LoadIntVariables ( TArray<struct FProfileINT>* Variables, TArray<struct FProfileINTSaveRecord>* Records );
	void LoadBoolVariables ( TArray<struct FProfileBOOL>* Variables, TArray<struct FProfileBOOLSaveRecord>* Records );
	void eventLoadGamerProfile ( class UBioGamerProfile* Profile );
	void SaveGameOptions ( class UBioGamerProfile** Profile, struct FGameOptionsSaveRecord* Record );
	void SaveCharacterProfiles ( TArray<struct FCharacterProfile>* Profiles, TArray<struct FCharacterProfileSaveRecord>* Records );
	void SaveFloatStats ( TArray<float>* Variables, TArray<float>* Records );
	void SaveIntStats ( TArray<int>* Variables, TArray<int>* Records );
	void SaveBonusTalents ( TArray<struct FBonusTalent>* talents, TArray<struct FBonusTalentSaveRecord>* Records );
	void SaveAchievementStates ( TArray<int>* Achievements, TArray<int>* Records );
	void SaveRewards ( TArray<struct FProfileRewardStat>* Rewards, TArray<struct FProfileRewardSaveRecord>* Records );
	void SavePlaythroughs ( TArray<struct FProfilePlaythrough>* Playthroughs, TArray<struct FProfilePlaythroughSaveRecord>* Records );
	void SaveAchievements ( TArray<struct FPlotManagerAchievement>* Variables, TArray<struct FPlotManagerAchievementSaveRecord>* Records );
	void SaveFloatVariables ( TArray<struct FProfileFLOAT>* Variables, TArray<struct FProfileFLOATSaveRecord>* Records );
	void SaveIntVariables ( TArray<struct FProfileINT>* Variables, TArray<struct FProfileINTSaveRecord>* Records );
	void SaveBoolVariables ( TArray<struct FProfileBOOL>* Variables, TArray<struct FProfileBOOLSaveRecord>* Records );
	void eventSaveGamerProfile ( class UBioGamerProfile* Profile );
	bool GetPlayerRecord ( struct FPlayerSaveRecord* Record );
	class ABioVehicleBase* FindClosestDrivableVehicle ( class ABioPawn* Pawn );
};

// Class SFXGame.BioSeqAct_AOECauseDamage
// 0x0028 (0x0120 - 0x00F8)
class UBioSeqAct_AOECauseDamage : public USequenceAction
{
public:
	struct FVector                                     m_vTargetMomentumDirection;                       		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      m_oInstigator;                                    		// 0x0104 (0x0008) [0x0000000000000000]              
	class UBioDamageType*                              m_pDamage;                                        		// 0x010C (0x0008) [0x0000000004420009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	float                                              m_fMomentum;                                      		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDamageAmount;                                  		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fRadius;                                        		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};

// Class SFXGame.BioSeqAct_AbilityEnable
// 0x001C (0x0114 - 0x00F8)
class UBioSeqAct_AbilityEnable : public USequenceAction
{
public:
	TArray<class APawn*>                               m_aoPawns;                                        		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct SFXName                                     m_nmSubType;                                      		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bEnable : 1;                                    		// 0x0110 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_ActivateGalaxyMap
// 0x0018 (0x0110 - 0x00F8)
class UBioSeqAct_ActivateGalaxyMap : public USequenceAction
{
public:
	FString                                            m_sGalaxyMapResource;                             		// 0x00F8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UGFxMovieInfo*                               m_oGalaxyMapReferenced;                           		// 0x0108 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_ApplyMetaVFX
// 0x001C (0x0114 - 0x00F8)
class UBioSeqAct_ApplyMetaVFX : public USequenceAction
{
public:
	TArray<class AActor*>                              Target;                                           		// 0x00F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioMetaVFX*                                 Effect;                                           		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fLifeTime;                                        		// 0x0110 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_AreChunksInstalled
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_AreChunksInstalled : public USequenceAction
{
public:
	TArray<int>                                        m_chunkIDs;                                       		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_AssignFindByTag
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_AssignFindByTag : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_AttachEnvironmentEffect
// 0x0030 (0x0128 - 0x00F8)
class UBioSeqAct_AttachEnvironmentEffect : public USequenceAction
{
public:
	struct FVector                                     m_vOffset;                                        		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      m_oAttachTo;                                      		// 0x0104 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     m_nmSocketOrBone;                                 		// 0x010C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             m_oEffect;                                        		// 0x0114 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fBlendTime;                                     		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInitialIntensity;                              		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bAttachToCamera : 1;                            		// 0x0124 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_BioActorFactory
// 0x000B (0x017C - 0x0171)
class UBioSeqAct_BioActorFactory : public USeqAct_ActorFactory
{
public:
	class UBioActorType*                               m_oActorType;                                     		// 0x0174 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_BoundsChecker
// 0x001C (0x0114 - 0x00F8)
class UBioSeqAct_BoundsChecker : public USequenceAction
{
public:
	int                                                IntA;                                             		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                IntB;                                             		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                IntC;                                             		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              FloatA;                                           		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              FloatB;                                           		// 0x0108 (0x0004) [0x0000000000000000]              
	float                                              FloatC;                                           		// 0x010C (0x0004) [0x0000000000000000]              
	unsigned long                                      AIsFloat : 1;                                     		// 0x0110 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      BIsFloat : 1;                                     		// 0x0110 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      CIsFloat : 1;                                     		// 0x0110 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      BInclusive : 1;                                   		// 0x0110 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      CInclusive : 1;                                   		// 0x0110 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_CauseActionCompleteMovement
// 0x0019 (0x0111 - 0x00F8)
class UBioSeqAct_CauseActionCompleteMovement : public USequenceAction
{
public:
	class APawn*                                       m_oPawn;                                          		// 0x00F8 (0x0008) [0x0000000000000000]              
	struct SFXName                                     m_Action;                                         		// 0x0100 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_oDestination;                                   		// 0x0108 (0x0008) [0x0000000000000000]              
	unsigned char                                      m_nCompletionReason;                              		// 0x0110 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_ChangeStrategy
// 0x0015 (0x010D - 0x00F8)
class UBioSeqAct_ChangeStrategy : public USequenceAction
{
public:
	class ABioBaseSquad*                               m_oSquad;                                         		// 0x00F8 (0x0008) [0x0000000000000000]              
	struct SFXName                                     m_nmNewStrategy;                                  		// 0x0100 (0x0008) [0x0000000000000000]              
	unsigned long                                      m_bHasSquad : 1;                                  		// 0x0108 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned char                                      Strategy;                                         		// 0x010C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_ChangeUseCase
// 0x0024 (0x011C - 0x00F8)
class UBioSeqAct_ChangeUseCase : public USequenceAction
{
public:
	class ABioArtPlaceable*                            oArtPlaceable;                                    		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     nmNewState0;                                      		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     nmNewState1;                                      		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                nUseCase;                                         		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nSkillLevel;                                      		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPlayerOnly : 1;                                  		// 0x0118 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_CopyPlayerHeadToTarget
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_CopyPlayerHeadToTarget : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventApplyFemaleSkinToneOverride ( );
};

// Class SFXGame.BioSeqAct_DUISetElementText
// 0x0011 (0x0109 - 0x00F8)
class UBioSeqAct_DUISetElementText : public USequenceAction
{
public:
	FString                                            sText;                                            		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      Element;                                          		// 0x0108 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_DUITimer
// 0x0010 (0x011C - 0x010C)
class UBioSeqAct_DUITimer : public USeqAct_Latent
{
public:
	float                                              fStartTime;                                       		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fEndTime;                                         		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fIntervalTime;                                    		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bModalTimer : 1;                                  		// 0x0118 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bVisible : 1;                                     		// 0x0118 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_DebugMessage
// 0x0028 (0x0120 - 0x00F8)
class UBioSeqAct_DebugMessage : public USequenceAction
{
public:
	FString                                            Text;                                             		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AActor*                                      oActor;                                           		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     nName;                                            		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                nInt;                                             		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fFloat;                                           		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_DecodeCombatResult
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_DecodeCombatResult : public USequenceAction
{
public:
	int                                                m_nCompletionReason;                              		// 0x00F8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_DecodeMovmentResult
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_DecodeMovmentResult : public USequenceAction
{
public:
	int                                                m_nCompletionReason;                              		// 0x00F8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_Delay
// 0x0000 (0x0120 - 0x0120)
class UBioSeqAct_Delay : public USeqAct_Delay
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_DisableSoundSets
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_DisableSoundSets : public USequenceAction
{
public:
	unsigned long                                      m_bEnableSoundSets : 1;                           		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bApplyToAllHenchmen : 1;                        		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_EnableCombat
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_EnableCombat : public USequenceAction
{
public:
	unsigned long                                      m_bEnable : 1;                                    		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_EndCurrentConvNode
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_EndCurrentConvNode : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_EnterVehicle
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_EnterVehicle : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_ExitVehicle
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_ExitVehicle : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_FollowSquadLeader
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_FollowSquadLeader : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_ForceActorMipsResident
// 0x0004 (0x0138 - 0x0134)
class UBioSeqAct_ForceActorMipsResident : public USeqAct_ForceMaterialMipsResident
{
public:
	unsigned long                                      bBlockOnWait : 1;                                 		// 0x0134 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_ForceLightEnvUpdate
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_ForceLightEnvUpdate : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_GenerateAllActionsComplete
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_GenerateAllActionsComplete : public USequenceAction
{
public:
	class ABioPawn*                                    oWho;                                             		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_GetAchievementStatus
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_GetAchievementStatus : public USequenceAction
{
public:
	int                                                m_nAchievementId;                                 		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_GetFromObjectList
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_GetFromObjectList : public USequenceAction
{
public:
	int                                                nListIndex;                                       		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_GetNearestObject
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_GetNearestObject : public USequenceAction
{
public:
	unsigned long                                      bGetFurthest : 1;                                 		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_GetPawnsInRadius
// 0x001C (0x0114 - 0x00F8)
class UBioSeqAct_GetPawnsInRadius : public USequenceAction
{
public:
	struct FVector                                     vLocation;                                        		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oPawn;                                            		// 0x0104 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fRadius;                                          		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nNumElements;                                     		// 0x0110 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_GetSquadInfo
// 0x0020 (0x0118 - 0x00F8)
class UBioSeqAct_GetSquadInfo : public USequenceAction
{
public:
	class AActor*                                      m_oActor;                                         		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class APawn*                                       m_oSquadLeader;                                   		// 0x0100 (0x0008) [0x0000000000000000]              
	int                                                m_nSquadCount;                                    		// 0x0108 (0x0004) [0x0000000000000000]              
	int                                                m_nHackedCount;                                   		// 0x010C (0x0004) [0x0000000000000000]              
	int                                                m_nHazardLevelMax;                                		// 0x0110 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIsEmpty : 1;                                   		// 0x0114 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_GetUseCase
// 0x002C (0x0124 - 0x00F8)
class UBioSeqAct_GetUseCase : public USequenceAction
{
public:
	class ABioArtPlaceable*                            oArtPlaceable;                                    		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     nmCurrentState;                                   		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     nmNewState0;                                      		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     nmNewState1;                                      		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                eUseCase;                                         		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nSkillLevel;                                      		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPlayerOnly : 1;                                  		// 0x0120 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_HideAllWeapons
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_HideAllWeapons : public USequenceAction
{
public:
	unsigned long                                      m_ShouldHideWeapons : 1;                          		// 0x00F8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_HighlightGalaxyMapObject
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_HighlightGalaxyMapObject : public USequenceAction
{
public:
	int                                                m_nHighlightWorld;                                		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_InitFSMode
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_InitFSMode : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_InitLoadingMovie
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_InitLoadingMovie : public USequenceAction
{
public:
	FString                                            sMovieName;                                       		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_InsertPostProcess
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_InsertPostProcess : public USequenceAction
{
public:
	class UPostProcessChain*                           PostProcess;                                      		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
	void AddPostProcessEffect ( );
};

// Class SFXGame.BioSeqAct_InteractProperty
// 0x0060 (0x0158 - 0x00F8)
class UBioSeqAct_InteractProperty : public USequenceAction
{
public:
	TArray<struct FBioPropertyMap>                     aObjectProperties;                                		// 0x00F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FBioPropertyMap>                     aObjectFunctions;                                 		// 0x0108 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FBioPropertyMap>                     aBehaviorProperties;                              		// 0x0118 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FBioPropertyMap>                     aBehaviorFunctions;                               		// 0x0128 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FBioPropertyInfo>                    Properties;                                       		// 0x0138 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	class UClass*                                      cObjectType;                                      		// 0x0148 (0x0008) [0x0000000000000000]              
	class UClass*                                      cBehaviorType;                                    		// 0x0150 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_GetProperty
// 0x0000 (0x0158 - 0x0158)
class UBioSeqAct_GetProperty : public UBioSeqAct_InteractProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_GetPropertyPawn
// 0x0000 (0x0158 - 0x0158)
class UBioSeqAct_GetPropertyPawn : public UBioSeqAct_GetProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_GetPropertyVehicle
// 0x0000 (0x0158 - 0x0158)
class UBioSeqAct_GetPropertyVehicle : public UBioSeqAct_GetProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_ModifyProperty
// 0x0000 (0x0158 - 0x0158)
class UBioSeqAct_ModifyProperty : public UBioSeqAct_InteractProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_ModifyPropertyArtPlaceable
// 0x0000 (0x0158 - 0x0158)
class UBioSeqAct_ModifyPropertyArtPlaceable : public UBioSeqAct_ModifyProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_ModifyPropertyBaseSquad
// 0x0000 (0x0158 - 0x0158)
class UBioSeqAct_ModifyPropertyBaseSquad : public UBioSeqAct_ModifyProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_ModifyPropertyNavigation
// 0x0000 (0x0158 - 0x0158)
class UBioSeqAct_ModifyPropertyNavigation : public UBioSeqAct_ModifyProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_ModifyPropertyPawn
// 0x0000 (0x0158 - 0x0158)
class UBioSeqAct_ModifyPropertyPawn : public UBioSeqAct_ModifyProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_ModifyPropertyVehicle
// 0x0000 (0x0158 - 0x0158)
class UBioSeqAct_ModifyPropertyVehicle : public UBioSeqAct_ModifyProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_IsAbilityEnabled
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_IsAbilityEnabled : public USequenceAction
{
public:
	class APawn*                                       m_oPawn;                                          		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     m_nmSubType;                                      		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_LeaveActionStation
// 0x0009 (0x0101 - 0x00F8)
class UBioSeqAct_LeaveActionStation : public USequenceAction
{
public:
	class ABioPawn*                                    m_oPawn;                                          		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_ExitMethod;                                     		// 0x0100 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_LockTarget
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_LockTarget : public USequenceAction
{
public:
	class ABioPawn*                                    oPawn;                                            		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oTarget;                                          		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_ModifyPropertyHeightfog
// 0x000C (0x0104 - 0x00F8)
class UBioSeqAct_ModifyPropertyHeightfog : public USequenceAction
{
public:
	class AHeightFog*                                  oFog;                                             		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDensity;                                         		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_Movie
// 0x000C (0x0104 - 0x00F8)
class UBioSeqAct_Movie : public USequenceAction
{
public:
	class UTextureMovie*                               m_oTextureMovie;                                  		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bIsFinished : 1;                                		// 0x0100 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_MusicVolumeDisable
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_MusicVolumeDisable : public USequenceAction
{
public:
	class ABioMusicVolume*                             m_MusicVolume;                                    		// 0x00F8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_MusicVolumeEnable
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_MusicVolumeEnable : public USequenceAction
{
public:
	class ABioMusicVolume*                             m_MusicVolume;                                    		// 0x00F8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_NonCombatArea
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_NonCombatArea : public USequenceAction
{
public:
	unsigned long                                      m_bEnable : 1;                                    		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_OpenShop
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_OpenShop : public USequenceAction
{
public:
	class ABioShop*                                    m_shop;                                           		// 0x00F8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	float                                              m_priceAdjustmentFactor;                          		// 0x0100 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                m_nOverrideLevel;                                 		// 0x0104 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_OverrideStagePlacement
// 0x0048 (0x0140 - 0x00F8)
class UBioSeqAct_OverrideStagePlacement : public USequenceAction
{
public:
	class AActor*                                      m_aNode1;                                         		// 0x00F8 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_aNode2;                                         		// 0x0100 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_aNode3;                                         		// 0x0108 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_aNode4;                                         		// 0x0110 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_aPuppet1;                                       		// 0x0118 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_aPuppet101;                                     		// 0x0120 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_aPuppet2;                                       		// 0x0128 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_aPuppet201;                                     		// 0x0130 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_aStage;                                         		// 0x0138 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
	void SetActor ( class AActor* aInput, unsigned char Node );
};

// Class SFXGame.BioSeqAct_PMBase
// 0x002E (0x0126 - 0x00F8)
class UBioSeqAct_PMBase : public USequenceAction
{
public:
	FString                                            m_sObjectType;                                    		// 0x00F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sVarName;                                       		// 0x0108 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nIndex;                                         		// 0x0118 (0x0004) [0x0000000000000000]              
	int                                                m_nPrevRegionIndex;                               		// 0x011C (0x0004) [0x0000000000000000]              
	int                                                m_nPrevPlotIndex;                                 		// 0x0120 (0x0004) [0x0000000000000000]              
	unsigned char                                      Region;                                           		// 0x0124 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Plot;                                             		// 0x0125 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_PMCheckConditional
// 0x000B (0x0131 - 0x0126)
class UBioSeqAct_PMCheckConditional : public UBioSeqAct_PMBase
{
public:
	int                                                Param;                                            		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      OutValue : 1;                                     		// 0x012C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      Conditional;                                      		// 0x0130 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_PMCheckState
// 0x0007 (0x012D - 0x0126)
class UBioSeqAct_PMCheckState : public UBioSeqAct_PMBase
{
public:
	unsigned long                                      OutValue : 1;                                     		// 0x0128 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      State;                                            		// 0x012C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_PMExecuteConsequence
// 0x0007 (0x012D - 0x0126)
class UBioSeqAct_PMExecuteConsequence : public UBioSeqAct_PMBase
{
public:
	int                                                Param;                                            		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Consequence;                                      		// 0x012C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_PMExecuteTransition
// 0x0007 (0x012D - 0x0126)
class UBioSeqAct_PMExecuteTransition : public UBioSeqAct_PMBase
{
public:
	int                                                Param;                                            		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Transition;                                       		// 0x012C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_PauseGalaxyMap
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_PauseGalaxyMap : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_PlayFaceFXAnim
// 0x0032 (0x012A - 0x00F8)
class UBioSeqAct_PlayFaceFXAnim : public USequenceAction
{
public:
	FString                                            animGroupName;                                    		// 0x00F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            AnimName;                                         		// 0x0108 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UFaceFXAsset*                                FaceFXAsset;                                      		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UFaceFXAnimSet*                              AnimSet;                                          		// 0x0120 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AnimGroup;                                        		// 0x0128 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Anim;                                             		// 0x0129 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_PlayLoadingMovie
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_PlayLoadingMovie : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_PlaySoundSet
// 0x0005 (0x00FD - 0x00F8)
class UBioSeqAct_PlaySoundSet : public USequenceAction
{
public:
	unsigned long                                      m_bKillCurrentSoundSet : 1;                       		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      m_eSoundSetType;                                  		// 0x00FC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_PositionFSActors
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_PositionFSActors : public USequenceAction
{
public:
	unsigned long                                      m_bRestoreActors : 1;                             		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_PositionHopper
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_PositionHopper : public USequenceAction
{
public:
	class APawn*                                       m_oHopper;                                        		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioWP_Hopper*                               m_oHopperNode;                                    		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_PreloadCinematicAudio
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_PreloadCinematicAudio : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool UpdateOp ( float fDelta );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_RemovePostProcess
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_RemovePostProcess : public USequenceAction
{
public:
	class UPostProcessChain*                           PostProcess;                                      		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
	void RemovePostProcessEffect ( );
};

// Class SFXGame.BioSeqAct_ResetAnimationState
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_ResetAnimationState : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

// Class SFXGame.BioSeqAct_ScalarMathUnit
// 0x001D (0x0115 - 0x00F8)
class UBioSeqAct_ScalarMathUnit : public USequenceAction
{
public:
	int                                                IntX;                                             		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                IntY;                                             		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                IntZ;                                             		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              FloatX;                                           		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              FloatY;                                           		// 0x0108 (0x0004) [0x0000000000000000]              
	float                                              FloatZ;                                           		// 0x010C (0x0004) [0x0000000000000000]              
	unsigned long                                      XIsFloat : 1;                                     		// 0x0110 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      YIsFloat : 1;                                     		// 0x0110 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      ZIsFloat : 1;                                     		// 0x0110 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      Operation;                                        		// 0x0114 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_SelectWeapon
// 0x0009 (0x0101 - 0x00F8)
class UBioSeqAct_SelectWeapon : public USequenceAction
{
public:
	class ABioPawn*                                    oPawn;                                            		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      eWeapon;                                          		// 0x0100 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_SetAnimNodeBlend
// 0x001C (0x0114 - 0x00F8)
class UBioSeqAct_SetAnimNodeBlend : public USequenceAction
{
public:
	struct SFXName                                     nmTargetNode;                                     		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioPawn*                                    oPawn;                                            		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight;                                          		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBlendTime;                                       		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nTargetChild;                                     		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_SetCameraToBone
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_SetCameraToBone : public USequenceAction
{
public:
	float                                              m_fFOV;                                           		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bRestoreCamera : 1;                             		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_SetEnvironmentEffectIntensity
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_SetEnvironmentEffectIntensity : public USequenceAction
{
public:
	float                                              m_fIntensity;                                     		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fBlendTime;                                     		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_SetGestureMode
// 0x0011 (0x0109 - 0x00F8)
class UBioSeqAct_SetGestureMode : public USequenceAction
{
public:
	TArray<FString>                                    ActorTags;                                        		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      GestureMode;                                      		// 0x0108 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_SetLightEnvQuality
// 0x0001 (0x00F9 - 0x00F8)
class UBioSeqAct_SetLightEnvQuality : public USequenceAction
{
public:
	unsigned char                                      eQuality;                                         		// 0x00F8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_SetNodeLength
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_SetNodeLength : public USequenceAction
{
public:
	float                                              m_fNodeLength;                                    		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bChangePCNodeIfBetweenNodes : 1;                		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_SetSkelControl
// 0x0020 (0x0118 - 0x00F8)
class UBioSeqAct_SetSkelControl : public USequenceAction
{
public:
	struct SFXName                                     nmTargetController;                               		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioPawn*                                    oPawn;                                            		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fStrengthTarget;                                  		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBlendInTime;                                     		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fBlendOutTime;                                    		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSetStrengthFromAnimNode : 1;                     		// 0x0114 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_SetStreamingState
// 0x000C (0x0104 - 0x00F8)
class UBioSeqAct_SetStreamingState : public USequenceAction
{
public:
	struct SFXName                                     StateName;                                        		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      NewValue : 1;                                     		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_SetSuperMode
// 0x0011 (0x0109 - 0x00F8)
class UBioSeqAct_SetSuperMode : public USequenceAction
{
public:
	TArray<class ABioPawn*>                            m_aoPawn;                                         		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      m_eMode;                                          		// 0x0108 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_SetSuperModeWithWeapon
// 0x000C (0x0115 - 0x0109)
class UBioSeqAct_SetSuperModeWithWeapon : public UBioSeqAct_SetSuperMode
{
public:
	int                                                nTweedleDee;                                      		// 0x010C (0x0004) [0x0000000000000000]              
	int                                                nTweedleDum;                                      		// 0x0110 (0x0004) [0x0000000000000000]              
	unsigned char                                      eWeapon;                                          		// 0x0114 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_SetWeapon
// 0x000D (0x0105 - 0x00F8)
class UBioSeqAct_SetWeapon : public USequenceAction
{
public:
	class ABioPawn*                                    oPawn;                                            		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                nWeapon;                                          		// 0x0100 (0x0004) [0x0000000000000000]              
	unsigned char                                      eWeapon;                                          		// 0x0104 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_ShouldShowSplashSequence
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_ShouldShowSplashSequence : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_ShowMainMenu
// 0x0030 (0x0128 - 0x00F8)
class UBioSeqAct_ShowMainMenu : public USequenceAction
{
public:
	TArray<FString>                                    m_lstMainMenuResources;                           		// 0x00F8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<class UGFxMovieInfo*>                       m_lstMainMenuReferenced;                          		// 0x0108 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class UObject*>                             m_aReferencedObjects;                             		// 0x0118 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_ShowMessageBox
// 0x0034 (0x012C - 0x00F8)
class UBioSeqAct_ShowMessageBox : public USequenceAction
{
public:
	TArray<FString>                                    sVariableLines;                                   		// 0x00F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<FString>                                    sMessageLines;                                    		// 0x0108 (0x0010) [0xC000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UFont*                                       m_font;                                           		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      m_colorForeground;                                		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      m_colorBackground;                                		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_isActivated : 1;                                		// 0x0128 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_ShowSpecialization
// 0x0018 (0x0110 - 0x00F8)
class UBioSeqAct_ShowSpecialization : public USequenceAction
{
public:
	FString                                            m_sSpecializationResource;                        		// 0x00F8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UGFxMovieInfo*                               m_oSpecializationGuiReferenced;                   		// 0x0108 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_ShowSplash
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_ShowSplash : public USequenceAction
{
public:
	unsigned long                                      bShowLegal : 1;                                   		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
	void eventFakeActivate ( );
};

// Class SFXGame.BioSeqAct_SkillGame
// 0x0031 (0x013D - 0x010C)
class UBioSeqAct_SkillGame : public USeqAct_Latent
{
public:
	int                                                m_GameMessageSuccess;                             		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_GameMessageFailure;                             		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_GameMessageDuringGame;                          		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_preGameButtonAText;                             		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_preGameButtonBText;                             		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_preGameButtonXText;                             		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nNumberOfButtons;                               		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fButtonTimeout;                                 		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fButtonStartDelay;                              		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nMinSalvage;                                    		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nMaxSalvage;                                    		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bDoNotUseSalvage : 1;                           		// 0x0138 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_Completed : 1;                                  		// 0x0138 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bSkillGameFailed : 1;                           		// 0x0138 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      m_CompletionState;                                		// 0x013C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventGrantCustomGameXp ( class ABioWorldInfo* oBWorldInfo );
	void OnCancel ( );
	void OnFailure ( int i_salvage );
	void OnSuccess ( int i_salvage );
};

// Class SFXGame.BioSeqAct_SoundGroupPitch
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_SoundGroupPitch : public USequenceAction
{
public:
	struct SFXName                                     m_sSoundGroupName;                                		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fNewPitch;                                      		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bHasBeenSet : 1;                                		// 0x0104 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_SoundGroupVolume
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_SoundGroupVolume : public USequenceAction
{
public:
	struct SFXName                                     SoundGroupName;                                   		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetVolume;                                     		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeDuration;                                     		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_SpawnHenchman
// 0x001C (0x0114 - 0x00F8)
class UBioSeqAct_SpawnHenchman : public USequenceAction
{
public:
	class AActor*                                      m_locationAsActor;                                		// 0x00F8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct SFXName                                     m_henchmanTag;                                    		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_rearOffsetMagnitude;                            		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_sidewaysOffsetMagnitude;                        		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSpawnOnLeft : 1;                                 		// 0x0110 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_SpawnTacticalArrow
// 0x0018 (0x0110 - 0x00F8)
class UBioSeqAct_SpawnTacticalArrow : public USequenceAction
{
public:
	class UClass*                                      m_clsTacticalMarker;                              		// 0x00F8 (0x0008) [0x0000000000000000]              
	class AActor*                                      oLocation;                                        		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      m_oTacticalMarker;                                		// 0x0108 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_StopLoadingMovie
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_StopLoadingMovie : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_TeleportToObject
// 0x0014 (0x010C - 0x00F8)
class UBioSeqAct_TeleportToObject : public USequenceAction
{
public:
	class AActor*                                      m_oActor;                                         		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      m_oTarget;                                        		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bUseTargetOrientation : 1;                      		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bDisableCollision : 1;                          		// 0x0108 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bDisablePhysics : 1;                            		// 0x0108 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bSnapToFloor : 1;                               		// 0x0108 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_Term_AllActionsComplete
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_Term_AllActionsComplete : public USequenceAction
{
public:
	class AActor*                                      oInstigator;                                      		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioPawn*                                    oWho;                                             		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_Term_NoLongerSeePlayer
// 0x0018 (0x0110 - 0x00F8)
class UBioSeqAct_Term_NoLongerSeePlayer : public USequenceAction
{
public:
	class ABioPawn*                                    oInstigator;                                      		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioPawn*                                    oWho;                                             		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oData;                                            		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_Term_SeePlayer
// 0x0018 (0x0110 - 0x00F8)
class UBioSeqAct_Term_SeePlayer : public USequenceAction
{
public:
	class ABioPawn*                                    oInstigator;                                      		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioPawn*                                    oWho;                                             		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oData;                                            		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_ToggleLightEnv
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_ToggleLightEnv : public USeqAct_Toggle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_ToggleSidebarVisibility
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_ToggleSidebarVisibility : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_UnLockTarget
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_UnLockTarget : public USequenceAction
{
public:
	class ABioPawn*                                    oPawn;                                            		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_UpdateEndGameStats
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_UpdateEndGameStats : public USequenceAction
{
public:
	unsigned long                                      m_bLogStats : 1;                                  		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_UpgradeVehicle
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_UpgradeVehicle : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_UseArtPlaceable
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_UseArtPlaceable : public USequenceAction
{
public:
	class AActor*                                      oWho;                                             		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioArtPlaceable*                            oArtPlaceable;                                    		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqCond_CheckChunkStatus
// 0x0001 (0x00DD - 0x00DC)
class UBioSeqCond_CheckChunkStatus : public USequenceCondition
{
public:
	unsigned char                                      eCriteria;                                        		// 0x00DC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqCond_InCombat
// 0x0000 (0x00DC - 0x00DC)
class UBioSeqCond_InCombat : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqCond_IsDriving
// 0x0000 (0x00DC - 0x00DC)
class UBioSeqCond_IsDriving : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqData
// 0x0021 (0x0081 - 0x0060)
class UBioSeqData : public UObject
{
public:
	FPointer                                           KismetActionCallbackThis;                         		// 0x0060 (0x0008) [0x0000000000001000]              ( CPF_Native )
	struct FFuncPointer                                KismetActionCallback;                             		// 0x0068 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct SFXName                                     StateName;                                        		// 0x0070 (0x0008) [0x0000000000000000]              
	int                                                ResourcesNeeded;                                  		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                m_nCompletionReason;                              		// 0x007C (0x0004) [0x0000000000000000]              
	unsigned char                                      m_eCompletionType;                                		// 0x0080 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventOnDisabled ( class ABioAiController* oController, unsigned long bStarted );
	bool eventCanDisable ( class ABioAiController* oController, unsigned char eEnableType, struct SFXName nmSubType );
	FString eventGetDebugDescription ( );
	bool eventCancelOnLOS ( class ABioAiController* oController, class APawn* oLOSTarget );
	void eventOnCancel ( class ABioAiController* oController, unsigned long bStarted );
	void eventOnStart ( class ABioAiController* oController );
	bool eventCanCancel ( class ABioAiController* oController );
	bool eventOnTick ( class ABioAiController* oController, float fDeltaT );
	class UBioEpicPawnBehavior* GetPawnBehavior ( class AActor* oActor );
	void DoCallBack ( int nReason );
};

// Class SFXGame.BioSeqData_ActionBase
// 0x0003 (0x0084 - 0x0081)
class UBioSeqData_ActionBase : public UBioSeqData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqData_QueueDelay
// 0x0008 (0x008C - 0x0084)
class UBioSeqData_QueueDelay : public UBioSeqData_ActionBase
{
public:
	float                                              m_fDelay;                                         		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fTimeCount;                                     		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqData_SelectWeapon
// 0x0005 (0x0089 - 0x0084)
class UBioSeqData_SelectWeapon : public UBioSeqData_ActionBase
{
public:
	unsigned long                                      m_bStartedSwitch : 1;                             		// 0x0084 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      nNewWeapon;                                       		// 0x0088 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqData_StartFiring
// 0x0020 (0x00A4 - 0x0084)
class UBioSeqData_StartFiring : public UBioSeqData_ActionBase
{
public:
	class AActor*                                      oTarget;                                          		// 0x0084 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     m_nmTechique;                                     		// 0x008C (0x0008) [0x0000000000000000]              
	float                                              fReqStabilityRatio;                               		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAbortStabilityRatio;                             		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTimeOut;                                         		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bStartedFiring : 1;                             		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bLOS : 1;                                       		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bInCoverAtStart : 1;                            		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bIgnorePerceptionCheck : 1;                     		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqData_ThrowGrenade
// 0x001C (0x00A0 - 0x0084)
class UBioSeqData_ThrowGrenade : public UBioSeqData_ActionBase
{
public:
	struct FVector                                     vTarget;                                          		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oTarget;                                          		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                nGrenadeType;                                     		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStartThrow : 1;                                  		// 0x009C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bTerminate_LostLOS : 1;                           		// 0x009C (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqData_UseArtPlaceable_Action
// 0x000C (0x0090 - 0x0084)
class UBioSeqData_UseArtPlaceable_Action : public UBioSeqData_ActionBase
{
public:
	class ABioArtPlaceable*                            oTarget;                                          		// 0x0084 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bStartUse : 1;                                  		// 0x008C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqData_UsePower
// 0x002C (0x00B0 - 0x0084)
class UBioSeqData_UsePower : public UBioSeqData_ActionBase
{
public:
	struct FVector                                     vTarget;                                          		// 0x0084 (0x000C) [0x0000000000000000]              
	struct SFXName                                     nmPowerName;                                      		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oTarget;                                          		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioPower*                                   m_oPowerCache;                                    		// 0x00A0 (0x0008) [0x0000000000000000]              
	float                                              fTimeOut;                                         		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bStartedCasting : 1;                            		// 0x00AC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bAcquiredActive : 1;                            		// 0x00AC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bLOS : 1;                                       		// 0x00AC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bOrderedByPlayer : 1;                           		// 0x00AC (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqData_BehaviorBase
// 0x0003 (0x0084 - 0x0081)
class UBioSeqData_BehaviorBase : public UBioSeqData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqData_TempLookAt_Action
// 0x0020 (0x00A4 - 0x0084)
class UBioSeqData_TempLookAt_Action : public UBioSeqData_BehaviorBase
{
public:
	struct FVector                                     vPoint;                                           		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vRelitivePoint;                                   		// 0x0090 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oGoal;                                            		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqData_UseArtPlaceable
// 0x000C (0x0090 - 0x0084)
class UBioSeqData_UseArtPlaceable : public UBioSeqData_BehaviorBase
{
public:
	class ABioArtPlaceable*                            oAPToUse;                                         		// 0x0084 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWalkToAP : 1;                                    		// 0x008C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqData_CombatMode
// 0x0003 (0x0084 - 0x0081)
class UBioSeqData_CombatMode : public UBioSeqData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqData_DEBUGInfo
// 0x00A7 (0x0128 - 0x0081)
class UBioSeqData_DEBUGInfo : public UBioSeqData
{
public:
	struct FAvoidanceLocationsArray                    CurrentAvoid;                                     		// 0x0084 (0x0038) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FAvoidanceLocationsArray>            m_aAvoidanceObsticals;                            		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FLastCompletionRecords>              m_ActionCompleteMovementList;                     		// 0x00CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FLastCompletionRecords>              m_ActionCompleteCombatList;                       		// 0x00DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FLOSLinesRecord>                     m_aoLOsLines;                                     		// 0x00EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FVector>                             m_aoBoundLines;                                   		// 0x00FC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      m_oProfileTarget;                                 		// 0x010C (0x0008) [0x0000000000000000]              
	class AActor*                                      m_oSightToTarget;                                 		// 0x0114 (0x0008) [0x0000000000000000]              
	class UBioActorBehavior*                           m_oPlayerBehaviour;                               		// 0x011C (0x0008) [0x0000000000000000]              
	unsigned long                                      m_bProfileAIActions : 1;                          		// 0x0124 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bProfilePerception : 1;                         		// 0x0124 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bPlayerAutoTarget : 1;                          		// 0x0124 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bAutoTarget : 1;                                		// 0x0124 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqData_Delay
// 0x0007 (0x0088 - 0x0081)
class UBioSeqData_Delay : public UBioSeqData
{
public:
	float                                              m_fTimeToWait;                                    		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqData_MoveAndAttack
// 0x002B (0x00AC - 0x0081)
class UBioSeqData_MoveAndAttack : public UBioSeqData
{
public:
	class AActor*                                      oTarget;                                          		// 0x0084 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oAttackTarget;                                    		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioCapability*                              oCapability;                                      		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fReqStabilityRatio;                               		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAbortStabilityRatio;                             		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTimeOut;                                         		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWalk : 1;                                        		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseMobMovement : 1;                              		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqData_MoveOutOfPawnsWay
// 0x0003 (0x0084 - 0x0081)
class UBioSeqData_MoveOutOfPawnsWay : public UBioSeqData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqData_PartyLookForAndUseCover
// 0x003B (0x00BC - 0x0081)
class UBioSeqData_PartyLookForAndUseCover : public UBioSeqData
{
public:
	TArray<class AActor*>                              aoCoverFrom;                                      		// 0x0084 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<int>                                        aoCoverFromRank;                                  		// 0x0094 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FCoverRecord                                oCoverInfo;                                       		// 0x00A4 (0x0014) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bHasFoundCover : 1;                             		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqData_StateBase
// 0x0003 (0x0084 - 0x0081)
class UBioSeqData_StateBase : public UBioSeqData
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqData_DoWorldInteraction
// 0x0019 (0x009D - 0x0084)
class UBioSeqData_DoWorldInteraction : public UBioSeqData_StateBase
{
public:
	TArray<class UBioActivityTiming*>                  Activities;                                       		// 0x0084 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	class ABioWp_ActionStation*                        WI_Station;                                       		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_Mode;                                           		// 0x009C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqData_MobTarget
// 0x000C (0x0090 - 0x0084)
class UBioSeqData_MobTarget : public UBioSeqData_StateBase
{
public:
	class AActor*                                      MoveTarget;                                       		// 0x0084 (0x0008) [0x0000000000000000]              
	float                                              MoveTolerance;                                    		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqData_MoveToObject
// 0x0010 (0x0094 - 0x0084)
class UBioSeqData_MoveToObject : public UBioSeqData_StateBase
{
public:
	class AActor*                                      MoveTarget;                                       		// 0x0084 (0x0008) [0x0000000000000000]              
	float                                              MoveTolerance;                                    		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWalking : 1;                                     		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      Terminate : 1;                                    		// 0x0090 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bRequiresPrecisionMovement : 1;                   		// 0x0090 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqData_MoveToPoint
// 0x0014 (0x0098 - 0x0084)
class UBioSeqData_MoveToPoint : public UBioSeqData_StateBase
{
public:
	struct FVector                                     MoveTarget;                                       		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MoveTolerance;                                    		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWalking : 1;                                     		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      Terminate : 1;                                    		// 0x0094 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bReset : 1;                                     		// 0x0094 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bRequiresPrecisionMovement : 1;                   		// 0x0094 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ResetMoveTarget ( struct FVector const& vNewLocation, float fMoveTolerance );
};

// Class SFXGame.BioSeqData_MoveToPointList
// 0x0018 (0x009C - 0x0084)
class UBioSeqData_MoveToPointList : public UBioSeqData_StateBase
{
public:
	TArray<struct FVector>                             m_aMoveTargets;                                   		// 0x0084 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              m_fMoveTolerance;                                 		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bWalking : 1;                                   		// 0x0098 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      Terminate : 1;                                    		// 0x0098 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqData_PlayAnimation
// 0x0028 (0x00AC - 0x0084)
class UBioSeqData_PlayAnimation : public UBioSeqData_StateBase
{
public:
	TArray<class UAnimSet*>                            AnimationSets;                                    		// 0x0084 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct SFXName>                             Animation;                                        		// 0x0094 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                CurrentAnimation;                                 		// 0x00A4 (0x0004) [0x0000000000000000]              
	unsigned long                                      Looping : 1;                                      		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      Random : 1;                                       		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqData_RandomWalk
// 0x0014 (0x0098 - 0x0084)
class UBioSeqData_RandomWalk : public UBioSeqData_StateBase
{
public:
	struct FVector                                     m_vDestination;                                   		// 0x0084 (0x000C) [0x0000000000000000]              
	int                                                m_nMaxWalkDistance;                               		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDelayAfterWalk;                                		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqData_StartConversation
// 0x0010 (0x0094 - 0x0084)
class UBioSeqData_StartConversation : public UBioSeqData_StateBase
{
public:
	class AActor*                                      m_oOwner;                                         		// 0x0084 (0x0008) [0x0000000000000000]              
	class UBioConversation*                            m_oConversation;                                  		// 0x008C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqData_UseCover
// 0x0018 (0x009C - 0x0084)
class UBioSeqData_UseCover : public UBioSeqData_StateBase
{
public:
	struct FVector                                     m_vHidingLocation;                                		// 0x0084 (0x000C) [0x0000000000000000]              
	class UBioCoverInterface*                          oCoverObject;                                     		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bIsInCover : 1;                                 		// 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bTerminateCover : 1;                            		// 0x0098 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool GetCrouchByCoverType ( int SlotIdx );
	void Empty ( );
	void UnClaim ( class AController* OldClaim, int SlotIdx, unsigned long bUnclaimAll );
	bool Claim ( class AController* NewClaim, int SlotIdx );
	void UpdateHideLocation ( class ABioPawn* pPawn, int SlotIdx );
};

// Class SFXGame.BioSeqData_WalkWaypoints
// 0x001D (0x00A1 - 0x0084)
class UBioSeqData_WalkWaypoints : public UBioSeqData_StateBase
{
public:
	class ABioWaypointSet*                             m_oWaypointSet;                                   		// 0x0084 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_oMoveTarget;                                    		// 0x008C (0x0008) [0x0000000000000000]              
	int                                                m_nNextWaypoint;                                  		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMoveTolerance;                                 		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bCountingUp : 1;                                		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bResumeWalking : 1;                             		// 0x009C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bWalking : 1;                                   		// 0x009C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bDone : 1;                                      		// 0x009C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bPaused : 1;                                    		// 0x009C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned char                                      m_eWalkType;                                      		// 0x00A0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_AbilityDisabled
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_AbilityDisabled : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_AbilityEnabled
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_AbilityEnabled : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_AllActionsComplete
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_AllActionsComplete : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_AreaMap
// 0x0012 (0x0138 - 0x0126)
class UBioSeqEvt_AreaMap : public USequenceEvent
{
public:
	FString                                            sEvent;                                           		// 0x0128 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_ArtPlaceableSkillGameFailed
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_ArtPlaceableSkillGameFailed : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_ArtPlaceableSkillGameSuccess
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_ArtPlaceableSkillGameSuccess : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_BackgroundStreamingDone
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_BackgroundStreamingDone : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqEvt_CinematicSkipped
// 0x0012 (0x0138 - 0x0126)
class UBioSeqEvt_CinematicSkipped : public USequenceEvent
{
public:
	FString                                            sEvent;                                           		// 0x0128 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_ConvNode
// 0x000E (0x0134 - 0x0126)
class UBioSeqEvt_ConvNode : public USequenceEvent
{
public:
	int                                                m_nNodeID;                                        		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nConvResRefID;                                  		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bSetWaitFlags : 1;                              		// 0x0130 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_Conversation
// 0x0013 (0x0139 - 0x0126)
class UBioSeqEvt_Conversation : public USequenceEvent
{
public:
	struct SFXName                                     sScriptName;                                      		// 0x0128 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioConversation*                            Conv;                                             		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      eScriptType;                                      		// 0x0138 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_EnterFollowFormation
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_EnterFollowFormation : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_EnterRestFormation
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_EnterRestFormation : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_ForegroundStreamingDone
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_ForegroundStreamingDone : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqEvt_GalaxyMap
// 0x0012 (0x0138 - 0x0126)
class UBioSeqEvt_GalaxyMap : public USequenceEvent
{
public:
	FString                                            sEvent;                                           		// 0x0128 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_LeaderChanged
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_LeaderChanged : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_MemberAdded
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_MemberAdded : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqEvt_MemberRemoved
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_MemberRemoved : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqEvt_NoLongerSeePlayer
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_NoLongerSeePlayer : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqEvt_OnAttacked
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_OnAttacked : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_OnCastAt
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_OnCastAt : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_OnLookingAt
// 0x0003 (0x0129 - 0x0126)
class UBioSeqEvt_OnLookingAt : public USequenceEvent
{
public:
	unsigned char                                      m_eTriggerType;                                   		// 0x0128 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_OnNotLookingAt
// 0x0003 (0x0129 - 0x0126)
class UBioSeqEvt_OnNotLookingAt : public USequenceEvent
{
public:
	unsigned char                                      m_eTriggerType;                                   		// 0x0128 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_OnPlaceableStartMoving
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_OnPlaceableStartMoving : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqEvt_OnPlaceableStopMoving
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_OnPlaceableStopMoving : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqEvt_OnPlayerActivate
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_OnPlayerActivate : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqEvt_SeePlayer
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_SeePlayer : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqEvt_VehicleEnter
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_VehicleEnter : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqEvt_VehicleExit
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_VehicleExit : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqEvt_VehicleLeaveWorld
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_VehicleLeaveWorld : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqVar_ObjectFindByTag
// 0x0014 (0x00C8 - 0x00B4)
class UBioSeqVar_ObjectFindByTag : public USeqVar_Object
{
public:
	FString                                            m_sObjectTagToFind;                               		// 0x00B4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      m_bSearchUniqueTag : 1;                           		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqVar_ObjectListFindByTag
// 0x0010 (0x00D4 - 0x00C4)
class UBioSeqVar_ObjectListFindByTag : public USeqVar_ObjectList
{
public:
	FString                                            m_sObjectTagToFind;                               		// 0x00C4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqVar_StoryManagerFloat
// 0x002F (0x00C3 - 0x0094)
class UBioSeqVar_StoryManagerFloat : public USeqVar_Float
{
public:
	FString                                            m_sVarName;                                       		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sRefName;                                       		// 0x00A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nIndex;                                         		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                m_nPrevRegionIndex;                               		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                m_nPrevPlotIndex;                                 		// 0x00BC (0x0004) [0x0000000000000000]              
	unsigned char                                      Region;                                           		// 0x00C0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Plot;                                             		// 0x00C1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Float;                                            		// 0x00C2 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqVar_StoryManagerInt
// 0x002F (0x00C3 - 0x0094)
class UBioSeqVar_StoryManagerInt : public USeqVar_Int
{
public:
	FString                                            m_sVarName;                                       		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sRefName;                                       		// 0x00A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nIndex;                                         		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                m_nPrevRegionIndex;                               		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                m_nPrevPlotIndex;                                 		// 0x00BC (0x0004) [0x0000000000000000]              
	unsigned char                                      Region;                                           		// 0x00C0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Plot;                                             		// 0x00C1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Int;                                              		// 0x00C2 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSequenceLatentAction
// 0x0004 (0x0110 - 0x010C)
class UBioSequenceLatentAction : public USeqAct_Latent
{
public:
	unsigned long                                      bHasTargets : 1;                                  		// 0x010C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventUpdateOp ( float DeltaTime );
};

// Class SFXGame.BioSeqAct_ActionStation
// 0x00EC (0x01FC - 0x0110)
class UBioSeqAct_ActionStation : public UBioSequenceLatentAction
{
public:
	struct FRawDistributionFloat                       m_TimeToSpend;                                    		// 0x0110 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FBioActionStationGestureData                m_EntranceTransition;                             		// 0x0134 (0x0028) [0x0000000000000000]              
	struct FBioActionStationGestureData                m_ExitTransition;                                 		// 0x015C (0x0028) [0x0000000000000000]              
	struct FBioActionStationGestureData                m_CombatExitTransition;                           		// 0x0184 (0x0028) [0x0000000000000000]              
	struct FVector                                     m_vPathNodeOffset;                                		// 0x01AC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class ABioPawn*                                    m_oPawn;                                          		// 0x01B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioArtPlaceable*                            m_oArtPlaceable;                                  		// 0x01C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioPathPoint*                               m_oPathNode;                                      		// 0x01C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioGestureRulesData*                        m_RulesData;                                      		// 0x01D0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nNumOutputTwitches;                             		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fEntranceBlendTime;                             		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fExitBlendTime;                                 		// 0x01E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDelayBeforeTwitch;                             		// 0x01E4 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeSpent;                                     		// 0x01E8 (0x0004) [0x0000000000000000]              
	float                                              m_fTimeToSpend;                                   		// 0x01EC (0x0004) [0x0000000000000000]              
	int                                                m_nTwitchStartIndex;                              		// 0x01F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bSnapToPose : 1;                                		// 0x01F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bDontMovePathnode : 1;                          		// 0x01F4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bPlayTwitchesInOrder : 1;                       		// 0x01F4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bPawnInConversation : 1;                        		// 0x01F4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bActionStationComplete : 1;                     		// 0x01F4 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      m_bResourcesReferenced : 1;                       		// 0x01F4 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      m_bInEntranceTransition : 1;                      		// 0x01F4 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bStartedSuccessfully : 1;                       		// 0x01F4 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      m_bFireFailedPin : 1;                             		// 0x01F4 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      m_bTwitchesAborted : 1;                           		// 0x01F4 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned char                                      m_PawnEntranceTransition;                         		// 0x01F8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_PawnExitTransition;                             		// 0x01F9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_PawnCombatExitTransition;                       		// 0x01FA (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_nExitCondition;                                 		// 0x01FB (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_ChangeAPState
// 0x001C (0x012C - 0x0110)
class UBioSeqAct_ChangeAPState : public UBioSequenceLatentAction
{
public:
	class ABioArtPlaceable*                            oPlaceable;                                       		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     nmNewState;                                       		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     nmNamedTransiton;                                 		// 0x0120 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bChangeImmediately : 1;                           		// 0x0128 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFail : 1;                                        		// 0x0128 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_CloneWeaponAppearance
// 0x002D (0x013D - 0x0110)
class UBioSeqAct_CloneWeaponAppearance : public UBioSequenceLatentAction
{
public:
	class USkeletalMeshComponent*                      m_pOriginalPropMesh;                              		// 0x0110 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class ABioPawn*                                    m_pPawn;                                          		// 0x0118 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ASkeletalMeshActor*                          m_pProp;                                          		// 0x0120 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct SFXName                                     m_nmAttachedSocket;                               		// 0x0128 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UInterpGroup*                                m_TempInterpGroup;                                		// 0x0130 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bBothInputPinsAreConnected : 1;                 		// 0x0138 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bStartedSuccessfully : 1;                       		// 0x0138 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned char                                      m_eWeaponToClone;                                 		// 0x013C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_FaceOnlyVO
// 0x00CE (0x01DE - 0x0110)
class UBioSeqAct_FaceOnlyVO : public UBioSequenceLatentAction
{
public:
	struct FMap_Mirror                                 m_mapUsedEnums;                                   		// 0x0110 (0x0048) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray<int>                                        m_aStrRefs;                                       		// 0x0158 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	FString                                            m_sSubtitle;                                      		// 0x0168 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	FString                                            m_sFaceFXAnim;                                    		// 0x0178 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UBioConversation*                            m_pConversation;                                  		// 0x0188 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     m_nmSpeakerTag;                                   		// 0x0190 (0x0008) [0x0000000000000000]              
	class AActor*                                      m_pActor;                                         		// 0x0198 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioTlkFile*                                 m_pTlkFile;                                       		// 0x01A0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class USoundCue*                                   m_pSoundCue;                                      		// 0x01A8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UFaceFXAnimSet*                              m_pFaceFXSet;                                     		// 0x01B0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UAudioComponent*                             m_pNoFaceAudioComp;                               		// 0x01B8 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                m_srLineStrRef;                                   		// 0x01C0 (0x0004) [0x0000000000000000]              
	float                                              m_fPadLineLength;                                 		// 0x01C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_srActorNameOverride;                            		// 0x01C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nPickedSpeakerIndex;                            		// 0x01CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLineLength;                                    		// 0x01D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fPreLoadTimer;                                  		// 0x01D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bForceHideSubtitles : 1;                        		// 0x01D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bIgnoreHenchmanSquadCheck : 1;                  		// 0x01D8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bPlaySoundOnly : 1;                             		// 0x01D8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bDisableDelayUntilPreload : 1;                  		// 0x01D8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bUseRenderThreadSubtitles : 1;                  		// 0x01D8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      m_bErrorInActivation : 1;                         		// 0x01D8 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      m_bKilledVO : 1;                                  		// 0x01D8 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      m_bPreLoadRequested : 1;                          		// 0x01D8 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      m_bPlayRequested : 1;                             		// 0x01D8 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned char                                      m_eSpeakerList;                                   		// 0x01DC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eConvLine;                                      		// 0x01DD (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_FireWeaponAt
// 0x002D (0x013D - 0x0110)
class UBioSeqAct_FireWeaponAt : public UBioSequenceLatentAction
{
public:
	class ABioPawn*                                    oPawn;                                            		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oTarget;                                          		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fReqStab;                                         		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fAbortStab;                                       		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fReqRadius;                                       		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTimeOut;                                         		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nReason;                                        		// 0x0130 (0x0004) [0x0000000000000000]              
	int                                                nCompletionReason;                                		// 0x0134 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIgnorePerception : 1;                            		// 0x0138 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bDone : 1;                                      		// 0x0138 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      m_eFireMode;                                      		// 0x013C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_MovieBink
// 0x0010 (0x0120 - 0x0110)
class UBioSeqAct_MovieBink : public UBioSequenceLatentAction
{
public:
	FString                                            m_sMovieName;                                     		// 0x0110 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_RandomWalk
// 0x0008 (0x0118 - 0x0110)
class UBioSeqAct_RandomWalk : public UBioSequenceLatentAction
{
public:
	int                                                m_nMaxWalkDistance;                               		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fDelayAfterWalk;                                		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_ShowCredits
// 0x0018 (0x0128 - 0x0110)
class UBioSeqAct_ShowCredits : public UBioSequenceLatentAction
{
public:
	FString                                            m_sCreditsResource;                               		// 0x0110 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UGFxMovieInfo*                               m_oCreditsReferenced;                             		// 0x0120 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool UpdateOp ( float fDeltaT );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_ShowIntroText
// 0x001C (0x012C - 0x0110)
class UBioSeqAct_ShowIntroText : public UBioSequenceLatentAction
{
public:
	FString                                            m_sIntroTextResource;                             		// 0x0110 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UGFxMovieInfo*                               m_oIntroTextReferenced;                           		// 0x0120 (0x0008) [0x0000000000000000]              
	int                                                srText;                                           		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool UpdateOp ( float fDeltaT );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_ShowPartySelectionGUI
// 0x0018 (0x0128 - 0x0110)
class UBioSeqAct_ShowPartySelectionGUI : public UBioSequenceLatentAction
{
public:
	FString                                            m_sPartySelectResource;                           		// 0x0110 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UGFxMovieInfo*                               m_oPartySelectGuiReferenced;                      		// 0x0120 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool UpdateOp ( float fDeltaT );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_SquadStartHoldingPosition
// 0x0024 (0x0134 - 0x0110)
class UBioSeqAct_SquadStartHoldingPosition : public UBioSequenceLatentAction
{
public:
	TArray<class ABioSquadHoldMarker*>                 m_aoHoldMarkers;                                  		// 0x0110 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class ABioBaseSquad*                               m_oSquad;                                         		// 0x0120 (0x0008) [0x0000000000000000]              
	float                                              m_fTimeOut;                                       		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCountDown;                                     		// 0x012C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bLeaderHoldPosition : 1;                        		// 0x0130 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_StageSwitchCamera
// 0x001A (0x012A - 0x0110)
class UBioSeqAct_StageSwitchCamera : public UBioSequenceLatentAction
{
public:
	struct SFXName                                     explicitCamera;                                   		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class ABioStage*                                   Stage;                                            		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                Intimacy;                                         		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      useForNextCamera : 1;                             		// 0x0124 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      forceCrossingLineOfAction : 1;                    		// 0x0124 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      saveOldCameraData : 1;                            		// 0x0124 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      standardCamera;                                   		// 0x0128 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Camera;                                           		// 0x0129 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int BioGetCameraNumber ( );
};

// Class SFXGame.BioSeqAct_StartConversation
// 0x0018 (0x0128 - 0x0110)
class UBioSeqAct_StartConversation : public UBioSequenceLatentAction
{
public:
	class UBioConversation*                            Conv;                                             		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      m_oOwner;                                         		// 0x0118 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fInterruptRange;                                		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      setTargetBusyForDuration : 1;                     		// 0x0124 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bConvReRunDetected : 1;                         		// 0x0124 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bPassiveConversation : 1;                       		// 0x0124 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bNoGestures : 1;                                		// 0x0124 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bLookAtActive : 1;                              		// 0x0124 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      m_bDisableMovieMode : 1;                          		// 0x0124 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      m_bDisableDelayUntilPreload : 1;                  		// 0x0124 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      m_bPreLoading : 1;                                		// 0x0124 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      m_bPlayRequested : 1;                             		// 0x0124 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_TurnTowards
// 0x0020 (0x0130 - 0x0110)
class UBioSeqAct_TurnTowards : public UBioSequenceLatentAction
{
public:
	struct FRotator                                    rDesiredRot;                                      		// 0x0110 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      oTurnActor;                                       		// 0x011C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oTarget;                                          		// 0x0124 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForce : 1;                                       		// 0x012C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStarted : 1;                                     		// 0x012C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bFailedToStart : 1;                               		// 0x012C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_UsePowerOn
// 0x0035 (0x0145 - 0x0110)
class UBioSeqAct_UsePowerOn : public UBioSequenceLatentAction
{
public:
	class APawn*                                       oPawn;                                            		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     nmPower;                                          		// 0x0118 (0x0008) [0x0000000000000000]              
	class AActor*                                      oTarget;                                          		// 0x0120 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBio2DA*                                     m_oPower2DA;                                      		// 0x0128 (0x0008) [0x0000000000000000]              
	float                                              fReqStab;                                         		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fTimeOut;                                         		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nCompletionReason;                                		// 0x0138 (0x0004) [0x0000000000000000]              
	int                                                m_nReason;                                        		// 0x013C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bDone : 1;                                      		// 0x0140 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      ePower;                                           		// 0x0144 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSequenceLatentStateAction
// 0x0000 (0x0110 - 0x0110)
class UBioSequenceLatentStateAction : public UBioSequenceLatentAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_MoveToObject
// 0x0020 (0x0130 - 0x0110)
class UBioSeqAct_MoveToObject : public UBioSequenceLatentStateAction
{
public:
	class APawn*                                       oPawn;                                            		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oTarget;                                          		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              fMoveTolerance;                                   		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nCompletionReason;                                		// 0x0124 (0x0004) [0x0000000000000000]              
	int                                                m_nReason;                                        		// 0x0128 (0x0004) [0x0000000000000000]              
	unsigned long                                      bWalking : 1;                                     		// 0x012C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRequiresPrecisionMovement : 1;                   		// 0x012C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSetOrientationToTarget : 1;                      		// 0x012C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDesiredOrientationSet : 1;                       		// 0x012C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bDone : 1;                                      		// 0x012C (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_ThrowGrenadeAt
// 0x002C (0x013C - 0x0110)
class UBioSeqAct_ThrowGrenadeAt : public UBioSequenceLatentStateAction
{
public:
	struct FVector                                     vTarget;                                          		// 0x0110 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class ABioPawn*                                    oPawn;                                            		// 0x011C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class APawn*                                       oTarget;                                          		// 0x0124 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                nGrenadeType;                                     		// 0x012C (0x0004) [0x0000000000000000]              
	int                                                m_nReason;                                        		// 0x0130 (0x0004) [0x0000000000000000]              
	int                                                nCompletionReason;                                		// 0x0134 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bDone : 1;                                      		// 0x0138 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_UseCover
// 0x0030 (0x0140 - 0x0110)
class UBioSeqAct_UseCover : public UBioSequenceLatentStateAction
{
public:
	TArray<class AActor*>                              m_oCoverFromObjects;                              		// 0x0110 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class ABioPawn*                                    m_oPawn;                                          		// 0x0120 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      m_oCoverObject;                                   		// 0x0128 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nSlotID;                                        		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nCompletionReason;                                		// 0x0134 (0x0004) [0x0000000000000000]              
	int                                                m_nReason;                                        		// 0x0138 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bCheckPerceptionWhileUsingCover : 1;            		// 0x013C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bDone : 1;                                      		// 0x013C (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class SFXGame.BioSeqAct_WalkWaypointSet
// 0x0019 (0x0129 - 0x0110)
class UBioSeqAct_WalkWaypointSet : public UBioSequenceLatentStateAction
{
public:
	class ABioWaypointSet*                             m_oWaypointSet;                                   		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMoveTolerance;                                 		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nNextWaypoint;                                  		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nCompletionReason;                                		// 0x0120 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bStartAtNearestPoint : 1;                       		// 0x0124 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bWalking : 1;                                   		// 0x0124 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bCountingUp : 1;                                		// 0x0124 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bDone : 1;                                      		// 0x0124 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned char                                      m_eWalkType;                                      		// 0x0128 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioShield
// 0x0022 (0x008E - 0x006C)
class UBioShield : public UBioBaseComponent
{
public:
	class UBioAttributesShield*                        m_pAttributes;                                    		// 0x006C (0x0008) [0x0000000000000000]              
	class UBioShieldView*                              m_oView;                                          		// 0x0074 (0x0008) [0x0000000000000000]              
	class UStaticMeshComponent*                        m_MeshComponent;                                  		// 0x007C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              m_fResetTime;                                     		// 0x0084 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bIsInitialized : 1;                             		// 0x0088 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      m_eState;                                         		// 0x008C (0x0001) [0x0000000000000000]              
	unsigned char                                      m_ePendingState;                                  		// 0x008D (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Regenerate ( float fAmount, class AActor* oShieldOwner );
	bool IsOnline ( );
	void SetState ( unsigned char eState );
	void Tick ( float fTimeDelta, class AActor* oShieldOwner );
	void Reset ( );
	bool OnDamage ( class AActor* oShieldOwner, struct FVector const& vHitLocation, class UClass* clsDamageType, class UBioDamageType* pDamage, float* fDamage );
	void OnAttributesModified ( class AActor* oShieldOwner );
	void ShutDown ( );
	void Deactivate ( );
	void Initialize ( class UBioAttributesShield* pAttributes, class UBioShieldView* oShieldView, class UMeshComponent* oMesh );
	void OnEvent ( unsigned char eEvent, class AActor* oShieldOwner, struct FVector const& vHitLocation );
	void OnStateTransition ( unsigned char eFromState, unsigned char eToState );
};

// Class SFXGame.BioShieldView
// 0x0080 (0x00EC - 0x006C)
class UBioShieldView : public UBioBaseComponent
{
public:
	struct FBioShieldViewEventSpec                     m_aEventSpec[ 0x6 ];                              		// 0x006C (0x0078) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UStaticMesh*                                 m_pShieldMesh;                                    		// 0x00E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnEvent ( unsigned char eEvent, class AActor* oShieldOwner, class UBioShield* oShield, struct FVector const& vHitLocation, struct FRotator const& rHitNormal );
};

// Class SFXGame.BioShop
// 0x00F9 (0x037D - 0x0284)
class ABioShop : public AActor
{
public:
	TArray<class UBioInventory*>                       m_inventories;                                    		// 0x0284 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FResourceShopInfo                           m_resourceInfoArray[ 0x9 ];                       		// 0x0294 (0x00B4) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	class UBioInventory*                               m_inventoryPermanent;                             		// 0x0348 (0x0008) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	class UBioInventory*                               m_inventoryPremium;                               		// 0x0350 (0x0008) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	class UBioInventory*                               m_inventoryLimited;                               		// 0x0358 (0x0008) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	int                                                m_nGenerateOnceTreasureID;                        		// 0x0360 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nGenerateAfterLevellingTreasureID;              		// 0x0364 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_lastPlayerLevel;                                		// 0x0368 (0x0004) [0x0000000000000000]              
	float                                              m_priceAdjustmentFactor;                          		// 0x036C (0x0004) [0x0000000000000000]              
	float                                              BIOSHOP_MINIMUM_PRICE_ADJUSTMENT;                 		// 0x0370 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              BIOSHOP_MAXIMUM_PRICE_ADJUSTMENT;                 		// 0x0374 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	unsigned long                                      m_isInitialized : 1;                              		// 0x0378 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      m_currentFilter;                                  		// 0x037C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UClass* GetSaveObjectClass ( );
	int ComputeSupplyOfResource ( unsigned char resourceType, unsigned char slotType );
	void RemoveResource ( unsigned char Type, int positiveAmount );
	void AddResource ( unsigned char Type, int positiveAmount );
	void AddBuybackItem ( class UBioItem* Item );
	bool ConvertMasterIndexToDoubleIndex ( int masterIndex, unsigned char* inventoryIndex, int* ElementIndex );
	bool RemovePlotItemAtMasterIndex ( int masterPlotItemIndex );
	float GetItemPriceAtMasterIndex ( int masterIndex );
	class UBioItem* RemoveAtMasterIndex ( int masterIndex );
	void BuildFilteredInventory ( unsigned char Filter, class UBioInventory** filteredInventory );
	bool ReadyShopForOpening ( int PlayerLevel, float priceAdjustment );
	float GetPriceAdjustmentFactor ( );
};

// Class SFXGame.BioSkillGame
// 0x0062 (0x00CE - 0x006C)
class UBioSkillGame : public UBioBaseComponent
{
public:
	TArray<struct FSkillGameInfo>                      SkillGameConfig;                                  		// 0x006C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<struct FSkillGameSalvage>                   SkillSalvageConfig;                               		// 0x007C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class ABioPawn*                                    m_oUsingPawn;                                     		// 0x008C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UObject*                                     m_oDependent;                                     		// 0x0094 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nMinSalvage;                                    		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nMaxSalvage;                                    		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nTotalButtonsToDisplay;                         		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fButtonTimeout;                                 		// 0x00A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fButtonDelayTime;                               		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_GameMessageSuccess;                             		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                m_GameMessageFailure;                             		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                m_GameMessageDuringGame;                          		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                m_preGameButtonAText;                             		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                m_preGameButtonBText;                             		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                m_preGameButtonXText;                             		// 0x00C4 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bSalvageCheckParam : 1;                         		// 0x00C8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned char                                      m_nSkillGameType;                                 		// 0x00CC (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      m_GameDifficulty;                                 		// 0x00CD (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventInitializeSkillGameStringReferences ( int i_GameMessageSuccess, int i_GameMessageFailure, int i_GameMessageDuringGame, int i_preGameButtonAText, int i_preGameButtonBText, int i_preGameButtonXText );
	void CallbackShowAdditonalTutorial ( );
	void CallbackSkillGame ( );
	bool InitializeSkillGameCustom ( class ABioPawn* oUsingPawn, class UObject* oDependent, unsigned char nSkillGameType, int nMinSalvage, int nMaxSalvage, int nTotalButtonsToDisplay, float fButtonTimeout, float fButtonDelayTime, struct SFXName nmFunctionSuccessCallback, struct SFXName nmFunctionFailureCallback, struct SFXName nmFunctionCancelCallback, unsigned long i_bDoNotUseSalvage, unsigned char eGameDifficulty );
	bool InitializeSkillGame ( class ABioPawn* oUsingPawn, class UObject* oDependent, unsigned char nSkillGameType, int nMinSalvage, int nMaxSalvage, int nTotalButtonsToDisplay, float fButtonTimeout, float fButtonDelayTime, unsigned char eGameDifficulty );
	class APawn* GetBestSkillMember ( unsigned char eSkillGameType, class ABioBaseSquad* oInputSquad, int* nBestSkillLevel );
	bool GetSalvageLimits ( int nSkillRank, int eDifficulty, int* fSalvageMin, int* fSalvageMax );
};

// Class SFXGame.BioSoundNode_Base
// 0x0000 (0x0094 - 0x0094)
class UBioSoundNode_Base : public USoundNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSoundNodeAPActivity
// 0x0014 (0x00A8 - 0x0094)
class UBioSoundNodeAPActivity : public UBioSoundNode_Base
{
public:
	TArray<struct FAPActivityEntry>                    m_nmSoundInputName;                               		// 0x0094 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              m_fFadeTime;                                      		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSoundNodeAPState
// 0x0018 (0x00AC - 0x0094)
class UBioSoundNodeAPState : public UBioSoundNode_Base
{
public:
	TArray<struct SFXName>                             m_nmSoundInputName;                               		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fCrossFadeTime;                                 		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bLooping : 1;                                   		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSoundNodeAPTransition
// 0x0010 (0x00A4 - 0x0094)
class UBioSoundNodeAPTransition : public UBioSoundNode_Base
{
public:
	TArray<struct FTransitionData>                     m_oSoundInputs;                                   		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSoundNodeFootsteps
// 0x0014 (0x00A8 - 0x0094)
class UBioSoundNodeFootsteps : public UBioSoundNode_Base
{
public:
	TArray<struct FFootstepData>                       m_nmFootData;                                     		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nFeet;                                          		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioFaction
// 0x001D (0x007D - 0x0060)
class UBioFaction : public UObject
{
public:
	TArray<unsigned char>                              SquadRelations;                                   		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture2D*                                  SquadIcon;                                        		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bIsImmuneToPhysics : 1;                         		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      SquadFaction;                                     		// 0x007C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	unsigned char GetRelationTo ( unsigned char nType );
};

// Class SFXGame.BioFaction_Hacked
// 0x0003 (0x0080 - 0x007D)
class UBioFaction_Hacked : public UBioFaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioFaction_Player
// 0x0003 (0x0080 - 0x007D)
class UBioFaction_Player : public UBioFaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioFaction_Vehicle
// 0x0003 (0x0080 - 0x007D)
class UBioFaction_Vehicle : public UBioFaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSquadAPI
// 0x0000 (0x0284 - 0x0284)
class ABioSquadAPI : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DisplaySquadDebug ( );
	void ProcessPoint ( unsigned char HowPointWasReached, struct FVector const& Location_, struct FRotator const& Orientation, struct SFXName ActionOn );
	void Initalize ( );
};

// Class SFXGame.BioBaseSquad
// 0x020C (0x0490 - 0x0284)
class ABioBaseSquad : public ABioSquadAPI
{
public:
	struct FMap_Mirror                                 m_aSquadPlayPen;                                  		// 0x0284 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMap_Mirror                                 m_aSquadPlayPenOld;                               		// 0x02CC (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray<struct FMemberData>                         Members;                                          		// 0x0314 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FPathNodeData>                       PathNodes;                                        		// 0x0324 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class ABioBaseSquad*>                       m_aPerceivedSquads;                               		// 0x0334 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<class AActor*>                              m_aoDynamicCoverActors;                           		// 0x0344 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FStrategyChoice>                     StrategyArray;                                    		// 0x0354 (0x0010) [0x4000000004400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink | CPF_EditInline )
	TArray<struct FCapacityFilteringRecord>            m_aoCapacityFilteringRecords;                     		// 0x0364 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      BaseFollowFormation;                              		// 0x0374 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      BaseRestFormations;                               		// 0x037C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      SquadFaction;                                     		// 0x0384 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPathNodeData                               LastGoodPoint;                                    		// 0x038C (0x0030) [0x0000000000000000]              
	struct FSLocation                                  LastNodeLocation;                                 		// 0x03BC (0x0010) [0x0000000000000000]              
	struct FSLocation                                  FollowLocation;                                   		// 0x03CC (0x0010) [0x0000000000000000]              
	struct FSLocation                                  LastUpdatedFollowLocation;                        		// 0x03DC (0x0010) [0x0000000000000000]              
	struct FVector                                     LastLeaderPosition;                               		// 0x03EC (0x000C) [0x0000000000000000]              
	class ABioDEBUGMarker*                             DBGMarker;                                        		// 0x03F8 (0x0008) [0x0000000000000000]              
	class ABioDEBUGMarker*                             DebugLines;                                       		// 0x0400 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USpriteComponent*                            m_oSprite;                                        		// 0x0408 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UTexture2D*                                  m_oQASquadIcon;                                   		// 0x0410 (0x0008) [0x0000000000000000]              
	class UBioArtPlaceableCoverInterface*              m_oTempCoverInterface;                            		// 0x0418 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioBaseSquad*                               m_pHackedSquad;                                   		// 0x0420 (0x0008) [0x0000000000000000]              
	int                                                LastNodeAdded;                                    		// 0x0428 (0x0004) [0x0000000000000000]              
	int                                                SquadStoppedNodeAdded;                            		// 0x042C (0x0004) [0x0000000000000000]              
	float                                              SquadStoppedTime;                                 		// 0x0430 (0x0004) [0x0000000000000000]              
	int                                                MaxPathNodes;                                     		// 0x0434 (0x0004) [0x0000000000000000]              
	float                                              RestThresholdTime;                                		// 0x0438 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeaderMovmentDeadZone;                            		// 0x043C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nPauseFollowingLeaderTracking;                  		// 0x0440 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ThreatLineOfSight;                                		// 0x0444 (0x0004) [0x0000000000000000]              
	float                                              ThreatExposedLineOfSight;                         		// 0x0448 (0x0004) [0x0000000000000000]              
	float                                              ThreatIsMyTarget;                                 		// 0x044C (0x0004) [0x0000000000000000]              
	float                                              ThreatTargetedBySquadMember;                      		// 0x0450 (0x0004) [0x0000000000000000]              
	float                                              ThreatTargetingMe;                                		// 0x0454 (0x0004) [0x0000000000000000]              
	float                                              ThreatTargetingSquadMember;                       		// 0x0458 (0x0004) [0x0000000000000000]              
	float                                              ThreatAttackedMe;                                 		// 0x045C (0x0004) [0x0000000000000000]              
	float                                              ThreatCastAtMe;                                   		// 0x0460 (0x0004) [0x0000000000000000]              
	float                                              ThreatDistanceSelf;                               		// 0x0464 (0x0004) [0x0000000000000000]              
	float                                              ThreatDistanceSquadMember;                        		// 0x0468 (0x0004) [0x0000000000000000]              
	float                                              ThreatDistanceInsideProximity;                    		// 0x046C (0x0004) [0x0000000000000000]              
	float                                              ThreatIsVehicle;                                  		// 0x0470 (0x0004) [0x0000000000000000]              
	float                                              ThreatIsHacked;                                   		// 0x0474 (0x0004) [0x0000000000000000]              
	int                                                CurrentPartyFormation;                            		// 0x0478 (0x0004) [0x0000000000000000]              
	int                                                FollowDistance;                                   		// 0x047C (0x0004) [0x0000000000000000]              
	int                                                m_nLootMemberThreshHold;                          		// 0x0480 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fThreatModifier;                                		// 0x0484 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      NoSquadFollowing : 1;                             		// 0x0488 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      SquadCanHoldPosition : 1;                         		// 0x0488 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bShouldUseRestFormation : 1;                    		// 0x0488 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bAllowedToUseRestFormation : 1;                 		// 0x0488 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bEnteringRestFormation : 1;                     		// 0x0488 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      m_bLastShouldUseRestFormation : 1;                		// 0x0488 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      InvertFormation : 1;                              		// 0x0488 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      m_bAllowPawns : 1;                                		// 0x0488 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      m_bAllowVehicles : 1;                             		// 0x0488 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bHoldingPosition : 1;                             		// 0x0488 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bDBG_Log : 1;                                     		// 0x0488 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      ShowPartyFollow : 1;                              		// 0x0488 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      m_bCheckPlayPen : 1;                              		// 0x0488 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      m_bHasCover : 1;                                  		// 0x0488 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      m_bEngagedHostileAction : 1;                      		// 0x0488 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      m_bHasSpawnedLootBag : 1;                         		// 0x0488 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned char                                      STAT_Following;                                   		// 0x048C (0x0001) [0x0000000000000000]              
	unsigned char                                      BaseFollowOrientation;                            		// 0x048D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BaseRestOrientation;                              		// 0x048E (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_HoldMode;                                       		// 0x048F (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool IsInactive ( );
	int GetMaxHazardLevel ( );
	void eventNotifyMemberCoverDisabled ( class APawn* oWho, class AActor* Link, int SlotIdx );
	void eventResurrect ( float fPercentOfHealthRegained, unsigned long bIsInstantaneous );
	class UClass* GetSaveObjectClass ( );
	void eventOnThrowGrenade ( class ABioPawn* pPawn );
	bool eventHasGrenades ( class ABioPawn* pPawn );
	class ABioBaseSquad* MakeHackable ( );
	void eventSetHackedSquad ( );
	bool HasCover ( );
	void eventSquadHandleChatterEvent ( unsigned char eSoundSet, int nFlags );
	void eventOnUntargetedByHostile ( class AActor* oHostile, unsigned long bHostileAboutToRetargetSquad );
	void eventOnTargetedByHostile ( class AActor* oHostile );
	bool UseCapability ( class ABioAiController* oMember, class UBioCapability* oCap, unsigned char eAttackType, class APawn* oTarget, unsigned long bIgnoreWounds, unsigned long bSprayCloseRange );
	class UBioCapability* GetBestAttack ( class ABioPawn* oMemberPawn, class AActor* oTarget, unsigned long bAllowWeaponSwitch, float fPowerUsePercent, unsigned char* eAttackType );
	class UBioCapability* GetBestDefense ( class ABioPawn* oMemberPawn, unsigned long bAlwaysAllowDefense, unsigned char* eAttackType );
	class UBioCapability* GetBestWeapon ( class ABioPawn* oMemberPawn, class AActor* oTarget, unsigned long bAllowWeaponSwitch );
	class UBioCapability* GetBestAttackPower ( class ABioPawn* oMemberPawn, class AActor* oTarget );
	class UBioCapability* GetBestDisableDebuffPower ( class ABioPawn* oMemberPawn, class AActor* oTarget );
	class UBioCapability* GetSuicidePower ( class ABioPawn* oMemberPawn, class AActor* oTarget );
	class UBioCapability* GetBestHealingPower ( class ABioPawn* oMemberPawn, class ABioPawn** oTargetSquadMember );
	class ABioPawn* GetBestTargetForHeal ( class ABioPawn* oCaster, class UBioCapability* oHealPower, float* fRangeToTarget );
	bool IsPawnHealthBelowThreshold ( class ABioPawn* oTestPawn, float fThreshold );
	float GetPawnShieldPct ( class ABioPawn* oTestPawn );
	float GetPawnHealthPct ( class ABioPawn* oTestPawn );
	class UBioCapability* GetBestDefensivePower ( class ABioPawn* oMemberPawn );
	class UBioCapability* GetBestBuffPower ( class ABioPawn* oMemberPawn );
	bool IsRequiredWeaponEquipped ( class UBioPawnBehavior* oCasterBehavior, class UBioCapability* oCap );
	bool GetAoEAttackValue ( struct FVector const& vTarget, float fRadius, int* nEnemyCount, int* nSquadCount );
	unsigned char GetActiveWeaponType ( class ABioPawn* oMemberPawn );
	bool IsSquadCastingSpell ( struct SFXName nmSpell );
	class ABioAiController* GetNearestSquadMember ( struct FVector const& vTarget, TArray<class ABioAiController*> const& aoIgnoreMembers, float* fBestDistToTargetSq );
	class ABioAiController* GetNearestSquadMemberToObject ( class AActor* oTarget, TArray<class ABioAiController*> const& aoIgnoreMembers, float* fBestDistToTargetSq );
	float CalculateThreat ( class ABioAiController* oMember, class APawn* oEnemy, unsigned long bAttackedMe, unsigned long bCastAtMe, unsigned long bLOSRequired );
	class APawn* FindBestTarget ( class ABioAiController* oMember, class APawn* oIgnoreTarget, unsigned long bLOSRequired );
	unsigned char IsBioPawnHostile ( class AActor* oTestActor, unsigned long bRequiresTargetFlag );
	unsigned char IsBioPawnValid ( class AActor* oTestActor, unsigned long bRequiresTargetFlag );
	void eventonMemberArrivedAtTarget ( class APawn* oMember );
	void eventOnMemberCasting ( class APawn* oMember, class APawn* oTarget, struct SFXName nmPower );
	void eventOnMemberAttacking ( class APawn* oMember, class APawn* oTarget, struct SFXName nmWeapon );
	void OnMemberShieldsDown ( class APawn* oWho );
	void eventHearNoise ( class APawn* Who, float Loudness, class AActor* NoiseMaker, struct FVector const& vNoiseLocation, struct SFXName NoiseType );
	void eventOnMemberLeftPlayPen ( class ABioPawn* oWho, class ANavigationPoint* oNavPoint );
	struct FVector GetNewSpawnLocation ( );
	void OnDamageDone ( class APawn* oTarget, class AActor* pDamageCausingActor );
	void eventGenerateAbilityDisabledEvent ( class APawn* oMember, int nEnableType, struct SFXName nmSubType );
	void eventGenerateAbilityEnabledEvent ( class APawn* oMember, int nEnableType, struct SFXName nmSubType );
	void eventGenerateCastAtEvent ( class APawn* oMember, class APawn* oAttacker, struct SFXName nmPower );
	void eventGenerateAttackedEvent ( class APawn* oMember, class APawn* oAttacker, struct SFXName nmWeapon );
	void eventGenerateDeathEvent ( class APawn* oMember, class AController* oKiller );
	void eventGenerateProximityAlarmEvent ( class APawn* oMember, class AActor* oTarget, int nRelationship );
	void GenerateTakeDamageEvent ( class APawn* oTarget, float fPreMitigationDamage, float Damage, class AController* InstigatedBy, class UClass* DamageType );
	unsigned char GetFaction ( );
	unsigned char GetRelationTo ( unsigned char nType );
	unsigned char FactionRelationship ( class ABioBaseSquad* oOtherSquad );
	void eventMemberActionComplete_None ( class ABioPawn* Who, struct SFXName Action, int nReason );
	void SetFollowDistance ( int Value );
	int GetFollowDistance ( );
	void DumpPathandpoints ( );
	void DisplaySquadDebug ( );
	FString Rotstr ( struct FRotator const& R );
	FString LocStrSegment ( struct FSLocation const& Num );
	FString LocStr2 ( struct FSLocation const& Num );
	FString LocStr ( struct FSLocation const& Num );
	struct FSLocation NodeLoc ( struct FSLocation const& Num );
	struct FSLocation DecLoc ( struct FSLocation const& Num );
	struct FSLocation IncLoc ( struct FSLocation const& Num );
	bool DetectLedgeToOffset ( int SquadId, struct FVector const& EscapeLoc, struct FVector const& OffsetLoc );
	struct FVector GetNodePoint ( struct FSLocation const& nLoc );
	struct FRotator GetNodeRotation ( struct FSLocation const& nLoc );
	bool WithinRangeOfFollowMarker ( float Dist );
	bool MembersAtFollowMark ( int SquadId );
	bool AllMembersAtFollowMark ( );
	int GetPathLength ( );
	struct FVector OffsetPointOnPath ( int nFormationPosition, struct FSLocation const& nLoc );
	bool FindLocationBackFromLocation ( float fUnrealUnits, struct FSLocation const& StartLoc, int nPartyMember, struct FSLocation* TrailLoc );
	bool GetLocationFromHead ( float fUnrealUnits, int nPartyMember, struct FSLocation* TrailLoc );
	bool GetLocationFromHeadForMember ( int nPartyMember, struct FSLocation* TrailLoc );
	bool ComputeEscapeLocation ( int Idx, struct FSLocation* NewLoc );
	struct FRotator GetMemberRotation ( class ABioPawn* P );
	void ResetFollowing ( class ABioPawn* P );
	bool TestPathSegments ( struct FSLocation const& StartLoc, struct FSLocation const& EndLoc, struct FSLocation const& NewEndLoc );
	void SetEscapeLocation ( int Index, struct FSLocation const& Loc );
	struct FSLocation GetEscapeLocation ( int Index );
	void eventEnterRestFormation ( );
	void eventEnterFollowFormation ( );
	void ProcessLeaderStopped ( float DeltaTime );
	void eventInFollowFormation ( );
	void eventInRestFormation ( );
	void ProcessPoint_UpdatePartyMemberData ( float DeltaTime );
	void UpDateFollowMarker ( );
	void ProcessLeadersPosition_State ( unsigned char HowPointWasReached, struct FVector const& Location_, struct FRotator const& Orientation, struct FRotator const& DirectionOfTravel, struct SFXName ActionOn );
	void TestAndInvertFormation ( int Node1, int Node2 );
	void AddPathNode ( unsigned char HowPointWasReached, struct FVector const& Location_, struct FRotator const& Orientation, struct FRotator const& DirectionOfTravel, struct SFXName ActionOn );
	void Tick_Follow ( float DeltaTime );
	void eventLeader_Changed ( class APawn* OldLeader, class APawn* NewLeader );
	void eventClearPathHistory ( );
	class APawn* eventRotateSquad ( unsigned char eRotationDirection );
	class APawn* GetNextMemberInDirection ( int CurrentIndex, unsigned char eRotationDirection );
	class APawn* GetPrevMember ( int CurrentIndex );
	class APawn* GetNextMember ( int CurrentIndex );
	void eventMemberRemoved ( class APawn* oPawn );
	void eventMemberAdded ( int nIndex );
	int AddMemberInternal ( class APawn* Pawn );
	int AddMember ( class APawn* Pawn );
	bool GetInRestFormation ( );
	unsigned char eventGetRestOrientationType ( );
	unsigned char eventGetFollowOrientationType ( );
	unsigned char GetOrientationType ( );
	class UClass* eventGetRestFormation ( );
	class UClass* eventGetFollowFormation ( );
	bool eventGetCanUseOffsetPositions ( );
	class UClass* eventGetFormation ( );
	void eventBioBeginPlay ( );
	void eventInitalize ( );
	void eventOnFactionChanged ( class UClass* oOldFaction, class UClass* oNewFaction );
	int GetNumberOfLiveMembers ( );
	void SetFaction ( class UClass* oNewFaction );
	void DebugDisplay ( );
	class UBioEpicPawnBehavior* GetPawnBehavior ( class AActor* oActor );
	class ABioBaseSquad* GetSquad ( class AActor* oActor );
	void CancelCapability ( class UBioCapability* oCapability );
	float GetCapabilityPowerBuildUp ( class UBioCapability* oCapability );
	float GetCapabilityImpactRadius ( class UBioCapability* oCapability );
	bool GetCapabilityIsEnabled ( class UBioCapability* oCapability );
	float GetCapabilityCoolDownTimeRemaining ( class UBioCapability* oCapability );
	class UBioSeqData* AddCapability ( class UBioCapability* oCapability, float fReqStabilityRatio, float fAbortStabilityRatio, float fTimeOut, class APawn* oTarget, struct FVector const& vTarget );
	class UBioSeqData* DoCapability ( class UBioCapability* oCapability, float fReqStabilityRatio, float fAbortStabilityRatio, float fTimeOut, class APawn* oTarget, struct FVector const& vTarget );
	class UBioCapability* GetBestFor ( unsigned char nMode, struct SFXName nmTechnique, TArray<class APawn*> const& aoIgnore, TArray<class UBioCapability*>* aoInCaps );
	bool FilterByMapped ( TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps );
	void FilterByDeliveredPowerPendingActivation ( TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps );
	void FilterByDeliverablePower ( TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps );
	void FilterByMember ( class APawn* oMember, TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps );
	void FilterByRange ( struct FVector const& vTarget, TArray<class APawn*> const& aoIgnore, TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps );
	void FilterByIgnorelist ( TArray<class APawn*> const& aoIgnore, TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps );
	void FilterByTechnique ( unsigned char nMode, struct SFXName nmTechnique, TArray<class APawn*> const& aoIgnore, TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps );
	void FilterByCapType ( unsigned char nMode, TArray<class APawn*> const& aoIgnore, TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps );
	void FilterByCapability ( unsigned char CapType, TArray<class APawn*> const& aoIgnore, TArray<class UBioCapability*>* aoInCaps, TArray<class UBioCapability*>* aoOutCaps );
	void GetSquadMembersCapabilities ( class APawn* oMember, unsigned char CapType, unsigned long bFilter, TArray<class UBioCapability*>* aoOutCaps );
	void GetSquadCapabilities ( unsigned char CapType, unsigned long bFilter, TArray<class UBioCapability*>* aoOutCaps );
	void RecomputeCapabilities ( );
	void BySortedBestRange ( class APawn* oTarget, struct FVector const& vTarget, TArray<class UBioCapability*>* aoInCaps, class UBioCapability** oCap );
	void BySortedRank ( TArray<class UBioCapability*>* aoInCaps, class UBioCapability** oCap );
	void ByTechnique ( unsigned char nCapType, unsigned char nMode, struct SFXName nmTechnique, TArray<class UBioCapability*>* aoInCaps, class UBioCapability** oCap );
	void ByCapabilitys ( TArray<class UBioCapability*>* aoInCaps, class UBioCapability** oCap );
	bool IsCapabilityValid ( class UBioCapability* oCap );
	int IsInRange ( class UBioCapability* oCap, class APawn* oPawn, struct FVector const& vLocation );
	int CountOfMembers ( unsigned char nMode, struct SFXName nmTechnique, TArray<class APawn*> const& aoIgnore, TArray<class UBioCapability*>* aoInCaps );
	TArray<struct SFXName> GetStrategyList ( );
	bool StopFollowerHoldPosition ( );
	bool StartFollowerHoldPosition ( TArray<class ABioSquadHoldMarker*> const& aoHoldPositions, unsigned long bLeaderHoldPosition );
	class APawn* FindSquadMemberByTag ( struct SFXName nmTag );
	int FreeCoverSpots ( );
	void eventOnSpawnOrLevelLoad ( unsigned long bCalledFromSpawn );
	void eventOnProximityAlarm ( class APawn* oMember, class AActor* oTarget, int nRelationship );
	void eventOnSquadSeen ( class ABioBaseSquad* oSquad );
	void eventOnActionComplete_Movement ( class APawn* oMember, struct SFXName nmAction, int nReason, class AActor* oTarget, struct FVector const& vLocation );
	void eventOnActionComplete_Combat ( class APawn* oMember, struct SFXName nmAction, struct SFXName nmTechnique, int nReason, class AActor* oLastTarget );
	void eventOnDamaged ( class APawn* oMember, class AController* oInstigator, float fDamage );
	void eventOnCastAt ( class APawn* oMember, class APawn* oAttacker, struct SFXName nmPower );
	void eventOnAttacked ( class APawn* oMember, class APawn* oAttacker, struct SFXName nmWeapon );
	void eventOnAbilityDisabled ( class APawn* oMember, int nEnableType, struct SFXName nmSubType );
	void eventOnAbilityEnabled ( class APawn* oMember, int nEnableType, struct SFXName nmSubType );
	void eventOnNoCombatAction ( class APawn* oMember );
	void eventOnDeath ( class APawn* oMember, class AController* oKiller );
	void PushMoveWithLocking ( class ABioAiController* oMember, class AActor* oTarget, float fTolerance, unsigned long bWalking, float fMovementDelay, unsigned long bCrouch );
	bool GetNearestCoverInRangeOfPoint ( class APawn* pSquadPawn, struct FVector const& vPosition, float fSearchRange, struct FCoverRecord* stCoverRecord );
	struct FCoverRecord FindSquadCoverNearobject ( class AActor* oObject, TArray<class AActor*> const& aoCoverFrom, TArray<int> const& aoCoverFromRanks, float fMaxRange, class APawn* oWhoSeeksCover, class AActor* NoCoverAgainst, int nMinRank );
	struct FCoverRecord FindSquadCoverNearPoint ( struct FVector const& vPoint, TArray<class AActor*> const& aoCoverFrom, TArray<int> const& aoCoverFromRanks, float fMaxRange, class APawn* oWhoSeeksCover, class AActor* NoCoverAgainst, int nMinRank );
	struct FCoverRecord FindCoverNearobject ( class AActor* oObject, TArray<class AActor*> const& aoCoverFrom, TArray<int> const& aoCoverFromRanks, float fMaxRange, class APawn* oWhoSeeksCover, class AActor* NoCoverAgainst, int nMinRank );
	struct FCoverRecord FindCoverNearPoint ( struct FVector const& vPoint, TArray<class AActor*> const& aoCoverFrom, TArray<int> const& aoCoverFromRanks, float fMaxRange, class APawn* oWhoSeeksCover, class AActor* NoCoverAgainst, int nMinRank );
	void AllPlaypen ( class UClass* NavClass, class ANavigationPoint** oNavPoint );
	void ListNavNodesNearWithLOS ( class AActor* oTarget, class AActor* oNear, struct FVector const& vNear, TArray<class ANavigationPoint*> const& aoIgnore, class UClass* NavClass, class ANavigationPoint** oNavPoint );
	void ListNavNodesNear ( class AActor* oNear, struct FVector const& vNear, TArray<class ANavigationPoint*> const& aoIgnore, class UClass* NavClass, class ANavigationPoint** oNavPoint );
	class ANavigationPoint* FindNavNodeNearWithLOS ( class AActor* oTarget, class AActor* oNear, struct FVector const& vNear, TArray<class ANavigationPoint*> const& aoIgnore, class UClass* NavClass, float fMaxRange );
	class ANavigationPoint* FindNavNodeNear ( class AActor* oNear, struct FVector const& vNear, TArray<class ANavigationPoint*> const& aoIgnore, class UClass* NavClass, float fMaxRange );
	struct FCoverRecord ReevaluateRankOfCover ( class UBioCoverInterface* oCover, struct FVector const& vUserLocation, TArray<class AActor*> const& aoCoverFrom, TArray<int> const& aoCoverFromRanks, float fPawnHeight, class APawn* oWhoSeeksCover, class AActor* NoCoverAgainst, class AController* oCtrl, float fMaxDist, int nMinRank );
	struct FCoverRecord SelectBestCover ( class APawn* oWhoSeeksCover, class AActor* NoCoverAgainst, TArray<struct FCoverRecord> const& aoCoverSlots, int nMinRank );
	void GetAllCoverSlots ( struct FVector const& vPoint, float fMaxDist, TArray<class AActor*> const& aoCoverFrom, TArray<int> const& aoCoverFromRanks, float fPawnHeight, TArray<class AActor*> const& aoCoverObjects, class AController* oClaimingCover, TArray<struct FCoverRecord>* out_aoCoverSlots );
	void GetRankOfSlot ( class UBioCoverInterface* oCover, TArray<class AActor*> const& aoCoverFrom, TArray<int> const& aoCoverFromRanks, float fPawnHeight, class AController* oCtrl, struct FCoverRecord* oRec );
	void GetRankedCover ( class UBioCoverInterface* oCover, struct FVector const& vUserLocation, TArray<class AActor*> const& aoCoverFrom, TArray<int> const& aoCoverFromRanks, float fPawnHeight, unsigned long bSort, class AController* oCtrl, float fMaxDist, TArray<struct FCoverRecord>* out_aoCoverSlots );
	void eventAllActionsComplete ( class APawn* Who );
	void GenerateAllActionsComplete ( class APawn* oPawn );
	bool IsPositionInPlaypen ( struct FVector* vPos );
	bool HasPlaypen ( );
	bool IsNavigationPointInPlaypen ( class ANavigationPoint* oNav );
	bool IsNavReferenceInPlaypen ( struct FNavReference const& oNav );
	bool IsCoverInPlaypen ( class AActor* oCover );
	void ValidatePlayPen ( );
	void PerceivedPawnsOfRelation ( unsigned char nRelation, class APawn** oPawn );
	void PerceivedPawns ( class APawn** oPawn );
	void SquadMembers ( class ABioAiController** oController );
	void TargetingMe ( class APawn* oTargetingWho, class APawn** oPawn );
	bool CanShoot ( class APawn* oSource, class APawn* oTarget );
	bool CanShootExposed ( class APawn* oSource, class APawn* oTarget, int* bExposed );
	void RemoveSquadFromPerception ( class ABioBaseSquad* pSquad );
	bool IsPawnPerceived ( class APawn* pPawn );
	bool IsSquadPerceived ( class ABioBaseSquad* pSquad );
	void AddSquadToPerception ( class ABioBaseSquad* pSquad, class APawn* pSource, class APawn* pTarget );
	void ClearMovementOrders ( int nIndex );
	void ClearTacticalOrders ( int nIndex );
	unsigned char GetSquadFollowFormation ( );
	void SetSquadFollowFormation ( unsigned char eFormation, unsigned long bForceFormation, int iSquadMember );
	void SetMemberAttackTarget ( int nIndex, class APawn* oAttackTarget );
	class APawn* GetMemberAttackTarget ( int nIndex );
	void SetMemberHoldPosition ( int nIndex, struct FVector const& vPosition );
	struct FVector GetMemberHoldPosition ( int nIndex );
	bool GetMemberActionOrderAssigned ( int nIndex );
	unsigned char GetMemberDelayedSwitchWeapon ( int nIndex );
	void SetMemberSwitchWeapon ( int nIndex, unsigned char eWeapon );
	unsigned char GetMemberSwitchWeapon ( int nIndex );
	void SetMemberMoveOrderAssigned ( int nIndex, unsigned long bOrderAssigned );
	bool GetMemberMoveOrderAssigned ( int nIndex );
	void SetMemberCurrentlyMoving ( int nIndex, unsigned long bMoving );
	bool GetMemberCurrentlyMoving ( int nIndex );
	void SetMemberFormation ( int nIndex, unsigned char eFormation );
	unsigned char GetMemberFormation ( int nIndex );
	void SetMemberTargetLocation ( int nIndex, struct FVector const& vLocation );
	struct FVector GetMemberTargetLocation ( int nIndex );
	void SetMemberTacticalPower ( int nIndex, struct SFXName nmTacticalPower );
	struct SFXName GetMemberTacticalPower ( int nIndex );
	void SetMemberTacticalAction ( int nIndex, unsigned char eTacticalAction );
	unsigned char GetMemberTacticalAction ( int nIndex );
	void SetMemberCoverAssigned ( int nIndex, unsigned long bCoverAssigned );
	bool GetMemberCoverAssigned ( int nIndex );
	void SetMemberCoverRecord ( int nIndex, struct FCoverRecord const& stCoverRecord );
	bool GetMemberCoverRecord ( int nIndex, struct FCoverRecord* out_stCoverRecord );
	void SetMemberMoveDelayTime ( int nIndex, float fMoveDelayTime );
	float GetMemberMoveDelayTime ( int nIndex );
	void SetMemberMoveLocation ( int nIndex, struct FVector const& vLocation );
	struct FVector GetMemberMoveLocation ( int nIndex );
	void SetMemberMoveIndicator ( int nIndex, class ABioTacticalMoveToIndicator* oIndicator );
	class ABioTacticalMoveToIndicator* GetMemberMoveIndicator ( int nIndex );
	bool RemoveMemberByIndex ( int nIndex );
	bool RemoveMember ( class APawn* pPawn );
	void ClearSquad ( );
	int GetMemberIndex ( class APawn* pPawn );
	class APawn* GetMember ( int nIndex );
	class APawn* GetSquadLeader ( );
	bool SetSquadLeader ( class APawn* pPawn );
	int GetHackedSquadSize ( );
	int GetSquadSize ( );
	bool IsInSquad ( class APawn* pPawn );
	void ApplyTacticalOrders ( class AActor* oMember );
	void eventOnSetSquadFollowFormation ( unsigned char eFormation );
};

// Class SFXGame.BioFormations
// 0x0018 (0x0078 - 0x0060)
class UBioFormations : public UObject
{
public:
	TArray<struct FFormationPosition>                  FormationPos;                                     		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MaxFormationMembers;                              		// 0x0070 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bUseOffsetPositions : 1;                        		// 0x0074 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int GetEscapeDistance ( int Idx );
	struct FRotator GetFormationFacing ( int Idx, unsigned long aInvertFormation );
	struct FVector GetFormationOffset ( int Idx, unsigned long aInvertFormation );
};

// Class SFXGame.BioPlayerSquad
// 0x016E (0x05FE - 0x0490)
class ABioPlayerSquad : public ABioBaseSquad
{
public:
	class UClass*                                      CombatRestFormations;                             		// 0x0490 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FSquadTargetData                            m_aSquadTargets[ 0x3 ];                           		// 0x0498 (0x006C) [0x0000000000002000]              ( CPF_Transient )
	struct FSquadTargetData                            m_aSimpleSquadTargets[ 0x3 ];                     		// 0x0504 (0x006C) [0x0000000000002000]              ( CPF_Transient )
	class AController*                                 m_pController;                                    		// 0x0570 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ABioPawn*                                    m_playerPawn;                                     		// 0x0578 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class APawn*                                       m_oSquadLeader;                                   		// 0x0580 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBio2DA*                                     m_oXPTable;                                       		// 0x0588 (0x0008) [0x0000000000000000]              
	class UBio2DA*                                     m_oCreditsTable;                                  		// 0x0590 (0x0008) [0x0000000000000000]              
	class UBioInventory*                               m_Inventory;                                      		// 0x0598 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                m_nSelectedSquadMember;                           		// 0x05A0 (0x0004) [0x0000000000000000]              
	float                                              SquadReformRange;                                 		// 0x05A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              GlobalXPScale;                                    		// 0x05A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fPerceptionTolerance;                           		// 0x05AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nSquadExperience;                               		// 0x05B0 (0x0004) [0x0000000000000000]              
	int                                                m_nMaxLevel;                                      		// 0x05B4 (0x0004) [0x0000000000000000]              
	int                                                m_nMinLevel;                                      		// 0x05B8 (0x0004) [0x0000000000000000]              
	int                                                m_nSquadLevel;                                    		// 0x05BC (0x0004) [0x0000000000000000]              
	float                                              m_fInCombatTimer;                                 		// 0x05C0 (0x0004) [0x0000000000000000]              
	float                                              m_fCombatCooldownTime;                            		// 0x05C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fInCombatMaxRange;                              		// 0x05C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fRevivalRange;                                  		// 0x05CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fVehicleInCombatMaxRange;                       		// 0x05D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nGrenadePowerIconReference;                     		// 0x05D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nGrenadeDetonatePowerIconReference;             		// 0x05D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nPistolPowerIconReference;                      		// 0x05DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nShotgunPowerIconReference;                     		// 0x05E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nAssaultPowerIconReference;                     		// 0x05E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nSniperPowerIconReference;                      		// 0x05E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nMaxInventoryItems;                             		// 0x05EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nMaxInventoryWarningThreshold;                  		// 0x05F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fPercentHealthOnResurrection;                   		// 0x05F4 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	unsigned long                                      CombatArea : 1;                                   		// 0x05F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bSquadHasVehicle : 1;                           		// 0x05F8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bDebugPartyCombatAI : 1;                        		// 0x05F8 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      m_bCombatStateLogging : 1;                        		// 0x05F8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      m_bCombatEnabled : 1;                             		// 0x05F8 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned char                                      CombatRestOrientation;                            		// 0x05FC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eGameOverCondition;                             		// 0x05FD (0x0001) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float GetPercentHealthOnResurrection ( );
	float GetCombatCooldownTime ( );
	void eventOnSetAttackTarget ( class APawn* pPawn, class AActor* pTarget );
	void eventOnSetSquadFollowFormation ( unsigned char eFormation );
	void UpdateCombatTimer ( float fDeltaTime );
	void ResetCombatTimer ( unsigned long bTriggerEvents );
	void ClearMemberMovementCommand ( class ABioPawn* pPawn );
	class APawn* GetSquadLeader ( );
	bool SetSquadLeader ( class APawn* pPawn );
	class UBioInventory* GetInventory ( );
	void SquadExitCombatMode ( );
	void SquadEnterCombatMode ( unsigned long bEngageEnemy );
	void eventNotifyMemberCoverDisabled ( class APawn* oWho, class AActor* Link, int SlotIdx );
	class UClass* GetSaveObjectClass ( );
	void OnThrowGrenade ( class ABioPawn* pPawn );
	bool HasGrenades ( class ABioPawn* pPawn );
	class UBioCapability* GetReadyActivationPower ( class ABioPawn* oMemberPawn );
	int GetSquadScanAbility ( );
	struct FVector eventProxyGetContextSensitiveOffset ( int nIndex, struct FRotator const& rRotation );
	void ProbeCombatStop ( );
	void ProbeOnCombatEnd ( );
	void ProbeOnCombatBegin ( );
	void eventOnCombatEnd ( );
	void eventOnCombatBegin ( );
	bool IsInCombat ( );
	void OnDeath ( class APawn* pPawn, class AController* pKiller );
	int AddMemberInternal ( class APawn* Pawn );
	void eventTick ( float DeltaTime );
	void DrawSquadHUD ( class ABioHUD* oHUD, float fGuiAlpha );
	void eventMemberRemoved ( class APawn* oPawn );
	void eventMemberAdded ( int nIndex );
	float eventGetInventoryResourceFloat ( unsigned char eInvResType );
	int eventGetInventoryResourceInt ( unsigned char eInvResType );
	void XPTrack ( int nXPGrant, FString const& sXPSourceType, int nSquadLevel );
	int MinionKillsNeededForLevelUp ( );
	void GrantExperience ( int nXPGrant, unsigned char eXPSourceType );
	bool eventLookupCredits ( int nPlayerSquadLevel, struct SFXName nmCREDClass, int* nCredits );
	bool LookupXP ( int nPlayerSquadLevel, struct SFXName nmXPClass, int* nXP );
	int GetPlayerSquadExperience ( );
	int eventGetPlayerSquadLevel ( );
	int eventGetMinSquadLevel ( );
	int eventGetMaxSquadLevel ( );
	void eventOnMemberCasting ( class APawn* oMember, class APawn* oTarget, struct SFXName nmPower );
	void eventOnMemberAttacking ( class APawn* oMember, class APawn* oTarget, struct SFXName nmWeapon );
	void OnDamageDone ( class APawn* oTarget, class AActor* pDamageCausingActor );
	void eventOnDamaged ( class APawn* oMember, class AController* oInstigator, float fDamage );
	void eventOnCastAt ( class APawn* oMember, class APawn* oAttacker, struct SFXName nmPower );
	void eventOnAttacked ( class APawn* oMember, class APawn* oAttacker, struct SFXName nmWeapon );
	void eventonPlayerEnterCover ( );
	bool eventOnPlayerSwitchStance ( unsigned char FromState, unsigned char ToState );
	FString GetActionString ( unsigned char eAction, class ABioPawn* oPawn );
	void DrawDebugHUD ( class ABioHUD* HUD, float fGuiAlpha );
	void DrawHUD ( class ABioHUD* HUD, float fGuiAlpha );
	void SwapSpareController ( class APawn* oPawn );
	void SetSpareController ( class AController* newCtrl );
	class AController* GetSpareController ( );
	void eventLeader_Changed ( class APawn* OldLeader, class APawn* NewLeader );
	unsigned char eventGetOrientationType ( );
	class UClass* eventGetRestFormation ( );
	void InitPlayerSquadLevel ( int nInitLevel );
	void InitPlayerSquadExperience ( int nInitXP );
	void eventInitialize ( );
	bool IsInventoryThresholdReached ( );
	bool IsInventoryFull ( int i_nItemsToAdd, int* o_nOverBy );
	void GetRankOfSlot ( class UBioCoverInterface* oCover, TArray<class AActor*> const& aoCoverFrom, TArray<int> const& aoCoverFromRanks, float fPawnHeight, class AController* oCtrl, struct FCoverRecord* oRec );
	void ApplyTacticalOrders ( class AActor* oMember );
	void BioVINCE_MapName_PartyDeath ( );
};

// Class SFXGame.BioSquadAI
// 0x0018 (0x04A8 - 0x0490)
class ABioSquadAI : public ABioBaseSquad
{
public:
	class UBioProbeCombat*                             m_ProbeCombat;                                    		// 0x0490 (0x0008) [0x0000000000000000]              
	int                                                m_nPerceptionIndex;                               		// 0x0498 (0x0004) [0x0000000000000000]              
	float                                              m_fPerceptionTimer;                               		// 0x049C (0x0004) [0x0000000000000000]              
	float                                              m_fPerceptionFrequency;                           		// 0x04A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      EnableSquadAILogging : 1;                         		// 0x04A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventOnSquadSeen ( class ABioBaseSquad* oSquad );
	void eventOnDeath ( class APawn* oMember, class AController* oKiller );
	void eventOnThrowGrenade ( class ABioPawn* pPawn );
	bool eventHasGrenades ( class ABioPawn* pPawn );
	void eventMemberRemoved ( class APawn* oPawn );
	void ProbeCombatStop ( unsigned char CombatResult );
	void ProbeCombatStart ( );
};

// Class SFXGame.BioSquadHoldMarker
// 0x0024 (0x03A8 - 0x0384)
class ABioSquadHoldMarker : public ANavigationPoint
{
public:
	FString                                            BaseTag;                                          		// 0x0384 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     LiftOffset;                                       		// 0x0394 (0x000C) [0x0000000000000000]              
	class AInterpActor*                                MyLift;                                           		// 0x03A0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void BioBeginPlay ( );
	void SetBaseByTag ( );
};

// Class SFXGame.BioSquadLinesComponent
// 0x0018 (0x0238 - 0x0220)
class UBioSquadLinesComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      vPlayPenLineColor;                                		// 0x0220 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      vSquadLeaderColor;                                		// 0x0224 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      vSquadMemberColor;                                		// 0x0228 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      vSquadAssetColor;                                 		// 0x022C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      vDynamicCoverColor;                               		// 0x0230 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bInited : 1;                                      		// 0x0234 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioStickyGrenadeInterface
// 0x0000 (0x0060 - 0x0060)
class UBioStickyGrenadeInterface : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool TracePrecise ( class AActor* pOwner, class AProjectile* Projectile, struct FVector* HitLocation, struct FVector* HitNormal );
	struct FVector ComputePosition ( class ABioGrenadeProjectileFrisbee* Projectile );
	void StaticDetach ( class UBioActorBehavior* oOwnerBehavior, class ABioGrenadeProjectileFrisbee* Projectile );
	void Detach ( class UBioActorBehavior* oOwnerBehavior, class ABioGrenadeProjectileFrisbee* Projectile );
	bool StaticAttach ( class AActor* pOwner, class ABioGrenadeProjectileFrisbee* Projectile, struct FVector const& HitLocation, struct FVector const& HitNormal );
	bool Attach ( class ABioGrenadeProjectileFrisbee* Projectile, struct FVector const& HitLocation, struct FVector const& HitNormal );
	void SetRotationByUpVector ( class AActor* pActor, struct FVector* vUp );
};

// Class SFXGame.BioTalent
// 0x001C (0x0088 - 0x006C)
class UBioTalent : public UBioBaseComponent
{
public:
	TArray<class UBioGameProperty*>                    m_aGameProperties;                                		// 0x006C (0x0010) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                m_MAX_TALENT_RANK;                                		// 0x007C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                m_nID;                                            		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                m_nRank;                                          		// 0x0084 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void AddGameProperty ( class UBioGameProperty* GameProperty );
	void ScaleToRank ( int Rank );
	void Unapply ( class UObject* Target );
	void Apply ( class UObject* Target );
	int GetRank ( );
	int GetID ( );
	void Initialize ( int Id, int StartingRank );
};

// Class SFXGame.BioTalentContainer
// 0x0048 (0x00B4 - 0x006C)
class UBioTalentContainer : public UBioBaseComponent
{
public:
	TArray<struct FBioTalentSpecification>             m_TalentSpecArray;                                		// 0x006C (0x0010) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray<class UBioTalent*>                          m_SimpleTalentArray;                              		// 0x007C (0x0010) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class ABioPawn*                                    m_Target;                                         		// 0x008C (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                m_PASSIVE_RANK_ICON;                              		// 0x0094 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                m_LOCKED_RANK_ICON;                               		// 0x0098 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                m_UNLOCKED_RANK_ICON;                             		// 0x009C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                srPluralUnlockRequirement;                        		// 0x00A0 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                srSingularUnlockRequirement;                      		// 0x00A4 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                srRequiredUnlockRequirement;                      		// 0x00A8 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                m_TalentPointsSpent;                              		// 0x00AC (0x0004) [0x0000000000000000]              
	unsigned long                                      m_IsLevelUpInProgress : 1;                        		// 0x00B0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int GetNumberOfTalentPointsSpent ( );
	void ReloadTalentContainer ( class UBioPawnBehavior* targetBehavior, TArray<struct FBioSimpleTalentSave>* simpleTalents, TArray<struct FBioComplexTalentSave>* complexTalents );
	void GetTalentSaveData ( TArray<struct FBioSimpleTalentSave>* simpleTalents, TArray<struct FBioComplexTalentSave>* complexTalents );
	bool GetTalentRank ( int TalentID, int* talentRank );
	bool GetTalentDebugData ( TArray<struct FBioTalentDebugData>* dataArray, int* simpleTalentStartIndex );
	bool CanDecrementLevelUpRank ( int talentIndex );
	bool CanIncrementLevelUpRank ( int talentIndex );
	bool DecrementLevelUpRank ( int talentIndex );
	bool IncrementLevelUpRank ( int talentIndex );
	bool GetTalentLevelUpRank ( int talentIndex, int* talentRank );
	bool GetTalentLevelUpIndex ( int TalentID, int* talentIndex );
	bool GetDynamicLevelUpTalentData ( int talentIndex, struct FBioTalentDynamicData* Data );
	bool GetStaticLevelUpTalentData ( TArray<struct FBioTalentStaticData>* dataArray );
	bool GetNumLevelUpPoints ( int* numPoints, int* pointsSpent );
	bool GetNumLevelUpTalents ( int* numTalents );
	bool ClearLevelUp ( );
	bool ApplyLevelUp ( );
	bool InitializeLevelUp ( );
	void AddPrerequisiteTalent ( int TalentID, int prereqID, int prereqRank );
	void ScaleTalentByIncrement ( int Id, int rankIncrement );
	void ScaleTalentToRank ( int Id, int Rank );
	bool IncreaseTalentMaxRankByIncrement ( int Id, int MaxRankIncrement );
	bool IncreaseTalentMaxRank ( int Id, int MaxRank );
	class UBioTalent* RemoveTalent ( int Id );
	void AddSimpleTalent ( class UBioTalent* Talent );
	bool AddSpecialization ( int bonusIdentification, int ReplaceTalentID );
	bool AddBonusTalents ( int bonusIdentifier );
	void AddTalent ( class UBioTalent* Talent, int MaxRank, int LevelOffset, int LevelsPerRank, int VisualOrder );
	void SetTarget ( class ABioPawn* Target );
};

// Class SFXGame.BioTalentImporter
// 0x0034 (0x00A0 - 0x006C)
class UBioTalentImporter : public UBioBaseComponent
{
public:
	class UBio2DA*                                     m_aTalent2DA[ 0x6 ];                              		// 0x006C (0x0030) [0x0000000000000000]              
	unsigned long                                      m_bDefault2DAsLoaded : 1;                         		// 0x009C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool LoadTalent2DAs ( struct SFXName nmPackage );
	bool GetTalentRankGuiData ( int TalentID, int MaxRank, TArray<int>* iconArray, TArray<int>* nameArray, TArray<int>* descArray, TArray<int>* unlockBlurbArray );
	bool GetTalentGuiData ( int TalentID, int* talentName, int* Description, int* UnlockName, int* UnlockBlurb );
	bool LoadBonusTalentData ( int Row, int* MaxRank, int* LevelOffset, int* LevelsPerRank, int* StartingRank, int* IsVisible, int* VisualOrder );
	bool LoadBonusTalentRowsAndIDs ( int bonusIdentifier, TArray<int>* Rows, TArray<int>* talentIDs );
	class UBioTalent* LoadTalent ( class UBioActorBehavior* Behavior, int TalentID, int Rank );
};

// Class SFXGame.SFXTelemetry
// 0x00E4 (0x0144 - 0x0060)
class USFXTelemetry : public UObject
{
public:
	FPointer                                           VfTable_FTickableObject;                          		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray<struct FTelemetryHookConfig>                ConfigHooks;                                      		// 0x0068 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<struct FTelemetryPlotPoint_Milestone>       MilestonePlotPoints;                              		// 0x0078 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<int>                                        GameDataPlotsInt;                                 		// 0x0088 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<int>                                        GameDataPlotsFloat;                               		// 0x0098 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<int>                                        GameDataPlotsBool;                                		// 0x00A8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<int>                                        BlacklistPlotsInt;                                		// 0x00B8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<int>                                        BlacklistPlotsFloat;                              		// 0x00C8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<int>                                        BlacklistPlotsBool;                               		// 0x00D8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	FPointer                                           pProtoHttp;                                       		// 0x00E8 (0x0008) [0x0000000000001000]              ( CPF_Native )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x00F0 (0x0048) UNKNOWN PROPERTY: MapProperty SFXGame.SFXTelemetry.Hooks
	class USFXTelemetryGameSession*                    GameSession;                                      		// 0x0138 (0x0008) [0x0000000000000000]              
	unsigned long                                      bEnableTelemetry : 1;                             		// 0x0140 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bInitialized : 1;                                 		// 0x0140 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAreDelegatesRegistered : 1;                      		// 0x0140 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bBootStarted : 1;                                 		// 0x0140 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bLoggedIn : 1;                                    		// 0x0140 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bOptOut : 1;                                      		// 0x0140 (0x0004) [0x0000000000000000] [0x00000020] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SendGameData ( unsigned char GameDataType );
	void IncSessionTeamDeaths ( int Amount );
	void IncSessionTeamKills ( int Amount );
	void IncSessionPlayerDeaths ( int Amount );
	void IncSessionPlayerKills ( int Amount );
	void IncSessionCombatScore ( int Amount );
	void IncSessionPlayerScore ( int Amount );
	void IncSessionXP ( int Amount );
	void SetContextCustomHeader ( struct SFXName ChunkName );
	void SetContextPlayerLevelFromCurrentRecord ( );
	void SetContextPlayerLevel ( int Level );
	void SetContextMap ( struct SFXName MapName );
	void SendTelemetryOnProfileReadComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void SendProfileDependentTelemetry ( unsigned char LocalUserNum );
	void eventInitConnectionDelegates ( );
	void OnLoginChange ( unsigned char LocalUserNum );
	void OnAuthenticate ( );
	void GetLoginAndPlayerInterface ( class UISFXOnlineComponentLogin** Login, class UOnlinePlayerInterface** PlayerInterface );
	void SendProfileDependentTelemetryNative ( );
	void OnDisconnect ( int Error, FString const& SessionId );
	bool IsCollectionEnabled ( );
	void AddClassNameToAttributeArray ( FString const& AttrName, struct SFXName cnData, TArray<struct FTelemetryAttribute>* Attributes );
	void AddBoolToAttributeArray ( FString const& AttrName, unsigned long bData, TArray<struct FTelemetryAttribute>* Attributes );
	void AddFloatToAttributeArray ( FString const& AttrName, float fData, TArray<struct FTelemetryAttribute>* Attributes );
	void AddIntToAttributeArray ( FString const& AttrName, int nData, TArray<struct FTelemetryAttribute>* Attributes );
	void AddStringToAttributeArray ( FString const& AttrName, TArray<struct FTelemetryAttribute>* Attributes, FString* sData );
	FString GenerateUniqueClassId ( class UObject* Object );
	FString GenerateUniqueClassIdFromName ( struct SFXName FullFriendlyName );
	FString GenerateUniqueClassIdFromString ( FString* FullFriendlyName );
	FString VectorToTelemetryString ( struct FVector const& V );
	void SendArray ( struct SFXName HookName, unsigned long bNeedFlush, TArray<struct FTelemetryAttribute>* Attributes );
	void SendBool ( struct SFXName HookName, FString const& AttrName, unsigned long bValue, unsigned long bNeedFlush );
	void SendFloat ( struct SFXName HookName, FString const& AttrName, float fValue, unsigned long bNeedFlush );
	void SendInt ( struct SFXName HookName, FString const& AttrName, int nValue, unsigned long bNeedFlush );
	void SendString ( struct SFXName HookName, FString const& AttrName, unsigned long bNeedFlush, FString* sValue );
	void SendName ( struct SFXName HookName, FString const& AttrName, struct SFXName nmValue, unsigned long bNeedFlush );
	void SendVoid ( struct SFXName HookName, unsigned long bNeedFlush );
	class USFXTelemetryGameSession* GetInstanceGameSession ( );
};

// Class SFXGame.SFXTelemetryGameSession
// 0x009C (0x00FC - 0x0060)
class USFXTelemetryGameSession : public UObject
{
public:
	FPointer                                           VfTable_FTickableObject;                          		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	FPointer                                           VfTable_FCallbackEventDevice;                     		// 0x0068 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FDouble                                     CareerTime;                                       		// 0x0070 (0x0008) [0x0000000000000000]              
	struct FDouble                                     GameTime;                                         		// 0x0078 (0x0008) [0x0000000000000000]              
	struct FDouble                                     SessionTime;                                      		// 0x0080 (0x0008) [0x0000000000000000]              
	struct FDouble                                     IdleTime;                                         		// 0x0088 (0x0008) [0x0000000000000000]              
	FString                                            Career;                                           		// 0x0090 (0x0010) [0x0000000000500000]              ( CPF_NeedCtorLink )
	FString                                            Base64_CharacterID;                               		// 0x00A0 (0x0010) [0x0000000000500000]              ( CPF_NeedCtorLink )
	TArray<FString>                                    SessionStartMapExclusion;                         		// 0x00B0 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class USFXTelemetry*                               TelemetryInstance;                                		// 0x00C0 (0x0008) [0x0000000000000000]              
	struct SFXName                                     MapName;                                          		// 0x00C8 (0x0008) [0x0000000000000000]              
	struct SFXName                                     ChunkName;                                        		// 0x00D0 (0x0008) [0x0000000000000000]              
	int                                                Difficulty;                                       		// 0x00D8 (0x0004) [0x0000000000000000]              
	int                                                PlayerXPGained;                                   		// 0x00DC (0x0004) [0x0000000000000000]              
	int                                                PlayerScore;                                      		// 0x00E0 (0x0004) [0x0000000000000000]              
	int                                                CombatScore;                                      		// 0x00E4 (0x0004) [0x0000000000000000]              
	int                                                PlayerKills;                                      		// 0x00E8 (0x0004) [0x0000000000000000]              
	int                                                PlayerDeaths;                                     		// 0x00EC (0x0004) [0x0000000000000000]              
	int                                                TeamKills;                                        		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                TeamDeaths;                                       		// 0x00F4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bStarted : 1;                                     		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSentBootHooks : 1;                               		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSentBugSentryHook : 1;                           		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMountFallVolume
// 0x0004 (0x02C8 - 0x02C4)
class ABioMountFallVolume : public AVolume
{
public:
	unsigned long                                      Enabled : 1;                                      		// 0x02C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      AllowMount : 1;                                   		// 0x02C4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      AllowFall : 1;                                    		// 0x02C4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector const& HitLocation, struct FVector const& HitNormal );
};

// Class SFXGame.BioTrigger
// 0x0004 (0x0298 - 0x0294)
class ABioTrigger : public ATrigger
{
public:
	unsigned long                                      Enabled : 1;                                      		// 0x0294 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      OneShot : 1;                                      		// 0x0294 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventBioBeginPlay ( );
	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector const& HitLocation, struct FVector const& HitNormal );
};

// Class SFXGame.BioVehicleBase
// 0x0038 (0x0848 - 0x0810)
class ABioVehicleBase : public ASVehicle
{
public:
	class UGFxMovieInfo*                               m_oAreaMap;                                       		// 0x0810 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UGFxMovieInfo*                               m_oCurrentAreaMap;                                		// 0x0818 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBioVehicleBehaviorBase*                     m_oBehavior;                                      		// 0x0820 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UAudioComponent*                             m_OperationalSounds;                              		// 0x0828 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  m_pLightEnvComponent;                             		// 0x0830 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             m_pLowShieldSound;                                		// 0x0838 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                m_sVehicleName;                                   		// 0x0840 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bShowVehicleDebugHUD : 1;                       		// 0x0844 (0x0004) [0x0000000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	unsigned long                                      m_bAwakeOnLevelStart : 1;                         		// 0x0844 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bDebugVehicleEnterExitSequence : 1;             		// 0x0844 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleVehicleChatterEvent ( unsigned char eSoundSet );
	void OnTeleport ( class USeqAct_Teleport* Action );
	class UClass* GetSaveObjectClass ( );
	void SetInputs ( float InForward, float InStrafe, float InUp );
	bool eventProxyTryToDrive ( class APawn* P );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void DrawHUD ( class AHUD* H );
	void eventBioProxyDetachDriver ( class APawn* P );
	void DetachDriver ( class APawn* P );
	void eventBioProxyAttachDriver ( class APawn* P );
	void AttachDriver ( class APawn* P );
	bool SetExitingSquadLocation ( struct FVector const& vExitCenterLocation, float fPlacementOffset );
	bool PlaceExitingDriver ( class APawn* ExitingDriver );
	bool DriverEnter ( class APawn* P );
	bool eventDriverLeave ( unsigned long bForceLeave );
	void SetPartyCollisionState ( unsigned long bCollideState );
	void BioBeginPlay ( );
	void Tick ( float DeltaTime );
	void ReattachAllPrimitiveComponents ( );
	void KillAllMomentum ( );
	bool IsExitLocationValid ( struct FVector const& vExitLocation );
	void InitializeForPlay ( );
	bool PerformForceExitCleanup ( );
	bool BioCanExitVehicle ( );
	bool BioCanEnterVehicle ( );
	class UBioVISSimple* GetVisualImpactSet ( );
};

// Class SFXGame.BioVehicleWheeled
// 0x0084 (0x08CC - 0x0848)
class ABioVehicleWheeled : public ABioVehicleBase
{
public:
	struct FInterpCurveFloat                           BoostTorqueCurve;                                 		// 0x0848 (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UForceFeedbackWaveform*                      BoostFeedback;                                    		// 0x085C (0x0008) [0x0000000000000000]              
	class UForceFeedbackWaveform*                      JumpFeedback;                                     		// 0x0864 (0x0008) [0x0000000000000000]              
	class USFXCameraShakeBase*                         JumpShake;                                        		// 0x086C (0x0008) [0x0000000000000000]              
	class USFXCameraShakeBase*                         BoostShake;                                       		// 0x0874 (0x0008) [0x0000000000000000]              
	class UAudioComponent*                             AC_JumpStart;                                     		// 0x087C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             AC_BoostStart;                                    		// 0x0884 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             AC_BoostLoop;                                     		// 0x088C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             AC_BoostEnd;                                      		// 0x0894 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              CurrentJumpFuel;                                  		// 0x089C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxJumpFuel;                                      		// 0x08A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              JumpFuelRegenRate;                                		// 0x08A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CurrentBoostFuel;                                 		// 0x08A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxBoostFuel;                                     		// 0x08AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              BoostFuelRegenRate;                               		// 0x08B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxFuel;                                          		// 0x08B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FuelRegenRate;                                    		// 0x08B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ThrusterForce;                                    		// 0x08BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ThrusterBurnRate;                                 		// 0x08C0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              BoosterBurnRate;                                  		// 0x08C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bInitializedThrusters : 1;                        		// 0x08C8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bJumping : 1;                                     		// 0x08C8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bBoosting : 1;                                    		// 0x08C8 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bRanOutOfJumpFuel : 1;                            		// 0x08C8 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bRanOutOfBoostFuel : 1;                           		// 0x08C8 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ModifyWheelControllers ( unsigned long bNewIgnoreWhenNotRendered );
	void AddForce ( struct FVector const& Force );
	void DebugDraw_Vehicle ( class ABioHUD* H );
	bool CanBoost ( );
	bool CanJump ( );
	void UpdateFuel ( float DeltaTime );
	void Tick ( float DeltaTime );
	struct FVector GetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon );
	void StopAllBoostEffects ( );
	void StopAllJumpEffects ( );
	bool DriverLeave ( unsigned long bForceLeave );
	bool DriverEnter ( class APawn* P );
	void PostBeginPlay ( );
};

// Class SFXGame.BioVehicleTrackSet
// 0x0018 (0x0078 - 0x0060)
class UBioVehicleTrackSet : public UObject
{
public:
	TArray<struct FTrackParticleSystem>                m_ParticleSystems;                                		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UParticleSystem*                             m_DefaultParticleSystem;                          		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UParticleSystem* FindParticleSystem ( class UPhysicalMaterial* a_Material );
};

// Class SFXGame.BioVFXInterface
// 0x0000 (0x0060 - 0x0060)
class UBioVFXInterface : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool CreateDeathEffects ( class UBioDeathVFXGameState* pGameState );
};

// Class SFXGame.UnVince
// 0x0048 (0x00A8 - 0x0060)
class UUnVince : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0060 (0x0048) UNKNOWN PROPERTY: MapProperty SFXGame.UnVince.uniqueTagToJoinTime

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void LeaderChanged ( class ABioPawn* OldLeader, class ABioPawn* NewLeader );
	void PartyProfiling ( class ABioPawn* oPawn, unsigned long bJoining );
	void XPGainedPawnKilledHelper ( class ABioPawn* Player, class ABioPawn* DeadPawn, int xpGained );
	void CharacterCreationFinished ( FString const& PlayerName, FString const& PlayerClass, unsigned char background, unsigned char priAttribute, unsigned char secAttribute, FString const& Message );
	void CharacterCreationStarted ( );
	void VinceLogTalentInfoPlayerAndSquad ( class ABioPawn* pPawn, unsigned long bIsTalentChange );
	void RecordVehicleDeath ( class ASVehicle* pTarget, class AController* pInstigator, struct FVector const& vHitLocation, class UClass* clsDamageType, class UBioDamageType* pDamage );
	void RecordDeath ( class ABioPawn* pTarget, class AController* pInstigator, struct FVector const& vHitLocation, class UClass* clsDamageType );
	void RecordWeaponFired ( class ABioPawn* Instigator );
	void LogTestResult ( FString const& TestName, FString const& TestDescription, unsigned char TestResult );
	void CreateSurvey ( FString const& Question, FString const& context );
	void Terminate ( );
	void CycleLog ( );
	void CloseLog ( );
	void OpenLog ( );
};

// Class SFXGame.BioMapNote
// 0x0057 (0x02DB - 0x0284)
class ABioMapNote : public AActor
{
public:
	FString                                            m_sVarName;                                       		// 0x0284 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	FString                                            m_sRefName;                                       		// 0x0294 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGFxMovieInfo*                               m_oAreaMap;                                       		// 0x02A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fVisibleRange;                                  		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_sMapNoteName;                                   		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nLinkedQuest;                                   		// 0x02B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_sJournalTask;                                   		// 0x02B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Argument;                                         		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nIndex;                                         		// 0x02C0 (0x0004) [0x0000000000000000]              
	int                                                m_nPrevRegionIndex;                               		// 0x02C4 (0x0004) [0x0000000000000000]              
	int                                                m_nPrevPlotIndex;                                 		// 0x02C8 (0x0004) [0x0000000000000000]              
	float                                              m_fUpdateDelay;                                   		// 0x02CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fUpdateTimer;                                   		// 0x02D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bReducedVisibility : 1;                         		// 0x02D4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bShowOnRadar : 1;                               		// 0x02D4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bShowOnAreamap : 1;                             		// 0x02D4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bLinkedToJournal : 1;                           		// 0x02D4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bSeen : 1;                                      		// 0x02D4 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned char                                      Region;                                           		// 0x02D8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Plot;                                             		// 0x02D9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Conditional;                                      		// 0x02DA (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioPathPoint
// 0x0004 (0x0388 - 0x0384)
class ABioPathPoint : public ANavigationPoint
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0384 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAlwaysReachable : 1;                             		// 0x0384 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool DoReachedWaypointEvent ( class ABioPawn* oPawn );
	bool OnCreatureReachedWayPoint ( class APawn* PathFindingCreature );
};

// Class SFXGame.BioWP_AirPoint
// 0x0000 (0x0388 - 0x0388)
class ABioWP_AirPoint : public ABioPathPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioWP_Hopper
// 0x0018 (0x03A0 - 0x0388)
class ABioWP_Hopper : public ABioPathPoint
{
public:
	struct FVector                                     m_vOffsetFromSurface;                             		// 0x0388 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class APawn*                                       ReservedFor;                                      		// 0x0394 (0x0008) [0x0000000000000000]              
	unsigned long                                      bHopRequired : 1;                                 		// 0x039C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioWP_HopperCeiling
// 0x0000 (0x03A0 - 0x03A0)
class ABioWP_HopperCeiling : public ABioWP_Hopper
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioWP_HopperFloor
// 0x0000 (0x03A0 - 0x03A0)
class ABioWP_HopperFloor : public ABioWP_Hopper
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioWP_HopperWall
// 0x0000 (0x03A0 - 0x03A0)
class ABioWP_HopperWall : public ABioWP_Hopper
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioWp_APGate
// 0x0028 (0x03B0 - 0x0388)
class ABioWp_APGate : public ABioPathPoint
{
public:
	TArray<class ABioArtPlaceable*>                    m_aoArtPlaceables;                                		// 0x0388 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct SFXName>                             m_anmAllowedPawns;                                		// 0x0398 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AActor*                                      m_oMoveDestination;                               		// 0x03A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class AActor* eventSpecialHandling ( class APawn* Other );
};

// Class SFXGame.BioWp_ActionStation
// 0x0020 (0x03A8 - 0x0388)
class ABioWp_ActionStation : public ABioPathPoint
{
public:
	struct FVector                                     m_vOldPositon;                                    		// 0x0388 (0x000C) [0x0000000000000000]              
	class ABioStage*                                   m_oStage;                                         		// 0x0394 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     m_nmStagePosition;                                		// 0x039C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bPositionLocked : 1;                            		// 0x03A4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool OnCreatureReachedWayPoint ( class APawn* PathFindingCreature );
};

// Class SFXGame.BioWp_DoorMarker
// 0x0034 (0x03BC - 0x0388)
class ABioWp_DoorMarker : public ABioPathPoint
{
public:
	TArray<struct SFXName>                             m_nmClosedStates;                                 		// 0x0388 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct SFXName>                             m_nmOpenedStates;                                 		// 0x0398 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class ABioDoor*                                    oMyDoor;                                          		// 0x03A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     m_nmGotoStateToOpen;                              		// 0x03B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWaitUntilCompletelyOpened : 1;                   		// 0x03B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bBlockedWhenClosed : 1;                           		// 0x03B8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAICanOpenDoor : 1;                               		// 0x03B8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTempDisabledCollision : 1;                       		// 0x03B8 (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventSuggestMovePreparation ( class APawn* Other );
	bool ProceedWithMove ( class APawn* Other );
	class AActor* eventSpecialHandling ( class APawn* Other );
	bool IsDoorClosed ( );
	bool IsDoorOpen ( );
};

// Class SFXGame.BioWaypointLinesComponent
// 0x0000 (0x0220 - 0x0220)
class UBioWaypointLinesComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioWaypointSet
// 0x0014 (0x0298 - 0x0284)
class ABioWaypointSet : public AActor
{
public:
	TArray<struct FActorReference>                     WaypointReferences;                               		// 0x0284 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      AlwaysShow : 1;                                   		// 0x0294 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class ANavigationPoint* GetWaypoint ( int nIdx );
	int FindNearestPoint ( struct FVector const& vLoc );
};

// Class SFXGame.BioActivityTiming
// 0x000C (0x006C - 0x0060)
class UBioActivityTiming : public UObject
{
public:
	struct SFXName                                     ActivityName;                                     		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActivityTime;                                     		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioWorldInteractionType
// 0x0058 (0x00B8 - 0x0060)
class UBioWorldInteractionType : public UObject
{
public:
	TArray<class UAnimSet*>                            m_oBaseMaleAnimations;                            		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<class UAnimSet*>                            m_oBaseFemaleAnimations;                          		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FActivityRecord>                     m_ActivityRecords;                                		// 0x0080 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USoundCue*                                   m_oBaseSoundCue;                                  		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             m_oBaseSounds;                                    		// 0x0098 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             m_oActivitySounds;                                		// 0x00A0 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              m_fBaseTime;                                      		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fVarianceTime;                                  		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nCurrentActivity;                               		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentTwitch;                                 		// 0x00B4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioDeathVFXControlBasic
// 0x0005 (0x0065 - 0x0060)
class UBioDeathVFXControlBasic : public UBioDeathVFXControl
{
public:
	unsigned long                                      m_bAppearanceVFXWaitsForDeathAnimEnd : 1;         		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      m_ePreferredExclusiveVFXType;                     		// 0x0064 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool ShouldDamageVFXPlay ( class UBioDeathVFXGameState* pGameState );
	bool ShouldAppearanceVFXPlay ( class UBioDeathVFXGameState* pGameState );
	void eventEvaluate ( class UBioDeathVFXSpecArrayWrapper* pDeathVFXSpecArrayWrapper, class UBioDeathVFXGameState* pGameState );
};

// Class SFXGame.BioInert
// 0x0000 (0x0408 - 0x0408)
class ABioInert : public ABioArtPlaceable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioUseable
// 0x0000 (0x0408 - 0x0408)
class ABioUseable : public ABioArtPlaceable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_TakeDamage
// 0x0032 (0x0158 - 0x0126)
class UBioSeqEvt_TakeDamage : public USequenceEvent
{
public:
	TArray<class UClass*>                              DamageTypes;                                      		// 0x0128 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<class UClass*>                              IgnoreDamageTypes;                                		// 0x0138 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              MinDamageAmount;                                  		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageThreshold;                                  		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentDamage;                                    		// 0x0150 (0x0004) [0x0000000000000000]              
	float                                              CurrentMitigatedDamage;                           		// 0x0154 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void HandleDamage ( class AActor* InOriginator, class AActor* InInstigator, class UClass* inDamageType, float inAmount, float inMitigatedAmount );
	bool IsValidDamageType ( class UClass* inDamageType );
};

// Class SFXGame.BioFaction_BaseSquad
// 0x0003 (0x0080 - 0x007D)
class UBioFaction_BaseSquad : public UBioFaction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioWp_Kismet
// 0x0000 (0x0388 - 0x0388)
class ABioWp_Kismet : public ABioPathPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool OnCreatureReachedWayPoint ( class APawn* PathFindingCreature );
};

// Class SFXGame.BioPlayerControllerSaveObject
// 0x00E4 (0x015C - 0x0078)
class UBioPlayerControllerSaveObject : public UBioBaseSaveObject
{
public:
	struct FBioActionMapping                           m_aActionMap[ 0x6 ];                              		// 0x0078 (0x0078) [0x0000000000000000]              
	int                                                m_lstHotKeyPawns[ 0xC ];                          		// 0x00F0 (0x0030) [0x0000000000000000]              
	int                                                m_lstHotKeyEvents[ 0xC ];                         		// 0x0120 (0x0030) [0x0000000000000000]              
	struct SFXName                                     m_nmLastPower;                                    		// 0x0150 (0x0008) [0x0000000000000000]              
	int                                                m_nLastWeapon;                                    		// 0x0158 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void LoadObject ( class UObject* O );
	void SaveObject ( class UObject* O );
};

// Class SFXGame.BioStickyGrenadeInterfaceMesh
// 0x0008 (0x0068 - 0x0060)
class UBioStickyGrenadeInterfaceMesh : public UBioStickyGrenadeInterface
{
public:
	class USkeletalMeshComponent*                      m_skeletalMeshComponent;                          		// 0x0060 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FVector ComputePosition ( class ABioGrenadeProjectileFrisbee* Projectile );
	void Detach ( class UBioActorBehavior* oOwnerBehavior, class ABioGrenadeProjectileFrisbee* Projectile );
	bool Attach ( class ABioGrenadeProjectileFrisbee* Projectile, struct FVector const& HitLocation, struct FVector const& HitNormal );
};

// Class SFXGame.BioVFXInterfacePawn
// 0x0000 (0x0060 - 0x0060)
class UBioVFXInterfacePawn : public UBioVFXInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXGameConfig
// 0x0008 (0x0068 - 0x0060)
class USFXGameConfig : public UObject
{
public:
	float                                              PawnInRagdollDamageMultiplier;                    		// 0x0060 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bAimAssistEnabled : 1;                            		// 0x0064 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bUseConsoleControls : 1;                          		// 0x0064 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bCoverProtectedCone : 1;                          		// 0x0064 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_KnockoutThorian
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_KnockoutThorian : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioChatterSystem
// 0x0030 (0x0090 - 0x0060)
class UBioChatterSystem : public UObject
{
public:
	TArray<float>                                      m_afFrequency;                                    		// 0x0060 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray<float>                                      m_MinTime;                                        		// 0x0070 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray<struct FChatterLineData>                    m_LastPlayedTimes;                                		// 0x0080 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnChatterLinePlayed ( unsigned char SoundSet );
	bool CanPlayLine ( unsigned char SoundSet );
};

// Class SFXGame.BioSeqEvt_Pawn_WaypointReached
// 0x000A (0x0130 - 0x0126)
class UBioSeqEvt_Pawn_WaypointReached : public USequenceEvent
{
public:
	class ABioPathPoint*                               m_oPathPointTrigger;                              		// 0x0128 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAI_ReturnToSpawn
// 0x0004 (0x0650 - 0x064C)
class ABioAI_ReturnToSpawn : public ABioAI_Core
{
public:
	unsigned long                                      m_bWasAllowedToLeavePlaypen : 1;                  		// 0x064C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventTick ( float DeltaTime );
	void eventOnLeftPlaypen ( class ANavigationPoint* oNavPoint );
	void Initialize ( );
};

// Class SFXGame.BioAI_HumanoidMinion
// 0x000C (0x0658 - 0x064C)
class ABioAI_HumanoidMinion : public ABioAI_Core
{
public:
	struct FVector                                     m_vAvoidLocation;                                 		// 0x064C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventOnHacked ( );
	void eventHearNoise ( float Loudness, class AActor* NoiseMaker, struct FVector const& vNoiseLocation, struct SFXName NoiseType );
	void onDamagedInCover ( class AController* oInstigator, float fDamage );
	bool eventIsCoverPositionValid ( struct FVector const& vLocation, struct FRotator const& rRotation, int* nRank );
	bool ShouldUseCover ( );
};

// Class SFXGame.BioAI_Charge
// 0x0000 (0x064C - 0x064C)
class ABioAI_Charge : public ABioAI_Core
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool EvaluateMovement ( class APawn* oTarget, unsigned long bLOS );
};

// Class SFXGame.BioAI_Assault
// 0x0004 (0x065C - 0x0658)
class ABioAI_Assault : public ABioAI_HumanoidMinion
{
public:
	unsigned long                                      m_bShouldAdvance : 1;                             		// 0x0658 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventOnDamaged ( class AController* oInstigator, float fDamage );
	bool InRangeOfTarget ( );
	bool EvaluateMovement ( class APawn* oTarget, unsigned long bLOS );
	void eventGetFollowTargets ( class APawn** oFollow, struct FVector* vMoveTo );
};

// Class SFXGame.BioAI_AssaultDrone
// 0x0000 (0x0650 - 0x0650)
class ABioAI_AssaultDrone : public ABioAI_Drone
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAI_Commander
// 0x0000 (0x064C - 0x064C)
class ABioAI_Commander : public ABioAI_Core
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAI_Destroyer
// 0x0000 (0x064C - 0x064C)
class ABioAI_Destroyer : public ABioAI_Charge
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAI_Gunship
// 0x0000 (0x0650 - 0x0650)
class ABioAI_Gunship : public ABioAI_Drone
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAI_Inactive
// 0x0003 (0x061C - 0x0619)
class ABioAI_Inactive : public ABioAiController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventOnProximityAlarm ( class AActor* oTarget, int nRelationship );
	void eventOnSquadSeen ( class AActor* oSquad );
	void eventOnActionComplete_Movement ( struct SFXName nmAction, int nReason, class AActor* oTarget, struct FVector const& vLocation );
	void eventOnActionComplete_Combat ( struct SFXName nmAction, struct SFXName nmTechnique, int nReason, class AActor* oLastTarget );
	void eventOnDamaged ( class AController* oInstigator, float fDamage );
	void eventOnCastAt ( class APawn* oAttacker, struct SFXName nmPower );
	void eventOnAttacked ( class APawn* oAttacker, struct SFXName nmWeapon );
	void eventOnAbilityDisabled ( int nEnableType, struct SFXName nmSubType );
	void eventOnAbilityEnabled ( int nEnableType, struct SFXName nmSubType );
	void eventOnNoCombatAction ( );
	void eventOnDeath ( class AController* oKiller );
};

// Class SFXGame.BioAI_Juggernaut
// 0x0000 (0x064C - 0x064C)
class ABioAI_Juggernaut : public ABioAI_Core
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAI_Krogan
// 0x0000 (0x0658 - 0x0658)
class ABioAI_Krogan : public ABioAI_HumanoidMinion
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventOnLastManStanding ( );
	void eventOnProximityAlarm ( class AActor* oTarget, int nRelationship );
	void eventOnDamaged ( class AController* oInstigator, float fDamage );
	void Initialize ( );
	void Charge ( class APawn* oTarget );
};

// Class SFXGame.BioAI_Melee
// 0x0000 (0x064C - 0x064C)
class ABioAI_Melee : public ABioAI_Core
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAI_Mercenary
// 0x0004 (0x0660 - 0x065C)
class ABioAI_Mercenary : public ABioAI_Assault
{
public:
	unsigned long                                      m_bAggressive : 1;                                		// 0x065C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool EvaluateMovement ( class APawn* oTarget, unsigned long bLOS );
	void Initialize ( );
};

// Class SFXGame.BioAI_Rachnii
// 0x0000 (0x064C - 0x064C)
class ABioAI_Rachnii : public ABioAI_Core
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventOnLastManStanding ( );
	void eventOnDamaged ( class AController* oInstigator, float fDamage );
	void Initialize ( );
	void Charge ( class APawn* oTarget );
};

// Class SFXGame.BioAI_RepairDrone
// 0x0000 (0x0650 - 0x0650)
class ABioAI_RepairDrone : public ABioAI_Drone
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool EvaluateTargets ( );
};

// Class SFXGame.BioAI_SarenFlyerJUG
// 0x0000 (0x0708 - 0x0708)
class ABioAI_SarenFlyerJUG : public ABioAI_SarenFlyerEND
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Initialize ( );
};

// Class SFXGame.BioAI_Sniper
// 0x0000 (0x0658 - 0x0658)
class ABioAI_Sniper : public ABioAI_HumanoidMinion
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool EvaluateAttackCapabilities ( class APawn* oTarget );
};

// Class SFXGame.BioAIDesignController
// 0x0003 (0x061C - 0x0619)
class ABioAIDesignController : public ABioAiController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAnimNodeBlendByBiotic
// 0x0000 (0x011C - 0x011C)
class UBioAnimNodeBlendByBiotic : public UAnimNodeBlendList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAppearanceItemSimple
// 0x0000 (0x00AC - 0x00AC)
class UBioAppearanceItemSimple : public UBioAppearanceItem
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAppearanceItemBioAmp
// 0x0000 (0x00AC - 0x00AC)
class UBioAppearanceItemBioAmp : public UBioAppearanceItemSimple
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAppearanceItemOmniTool
// 0x0000 (0x00C0 - 0x00C0)
class UBioAppearanceItemOmniTool : public UBioAppearanceItemSophisticated
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAppearanceItemXMod
// 0x0000 (0x00AC - 0x00AC)
class UBioAppearanceItemXMod : public UBioAppearanceItemSimple
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAreaTransition
// 0x0010 (0x02D4 - 0x02C4)
class ABioAreaTransition : public ATriggerVolume
{
public:
	struct SFXName                                     sMoveToArea;                                      		// 0x02C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     sMoveToStartPoint;                                		// 0x02CC (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector const& HitLocation, struct FVector const& HitNormal );
};

// Class SFXGame.BioSeqEvt_ArtPlaceableUsed
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_ArtPlaceableUsed : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_ArtPlaceablePlotFail
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_ArtPlaceablePlotFail : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_ArtPlaceableTransition
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_ArtPlaceableTransition : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioArtPlaceableContainerType
// 0x0001 (0x0144 - 0x0143)
class UBioArtPlaceableContainerType : public UBioArtPlaceableType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioArtPlaceableDoorType
// 0x0001 (0x0144 - 0x0143)
class UBioArtPlaceableDoorType : public UBioArtPlaceableType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioArtPlaceableShieldType
// 0x0001 (0x0144 - 0x0143)
class UBioArtPlaceableShieldType : public UBioArtPlaceableType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioArtPlaceableUseableType
// 0x0001 (0x0144 - 0x0143)
class UBioArtPlaceableUseableType : public UBioArtPlaceableType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAttributesItemVehicleBase
// 0x0001 (0x0105 - 0x0104)
class UBioAttributesItemVehicleBase : public UBioAttributesItemXModdable
{
public:
	unsigned char                                      m_nEquipmentSlotID;                               		// 0x0104 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAttributesWeapon
// 0x0000 (0x0070 - 0x0070)
class UBioAttributesWeapon : public UBioAttributes
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioAudioRoomTrigger
// 0x0028 (0x02EC - 0x02C4)
class ABioAudioRoomTrigger : public AVolume
{
public:
	TArray<class AAmbientSound*>                       AmbientSoundsOutside;                             		// 0x02C4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<class AAmbientSound*>                       AmbientSoundsInside;                              		// 0x02D4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class APawn*                                       m_oTrackPawn;                                     		// 0x02E4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector const& HitLocation, struct FVector const& HitNormal );
	void PostBeginPlay ( );
};

// Class SFXGame.BioAudioVolumeTimer
// 0x0008 (0x028C - 0x0284)
class ABioAudioVolumeTimer : public AInfo
{
public:
	class ABioAudioVolume*                             m_oBioAudioVolume;                                		// 0x0284 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Timer ( );
	void PostBeginPlay ( );
};

// Class SFXGame.BioBaseActivity
// 0x002C (0x008C - 0x0060)
class UBioBaseActivity : public UObject
{
public:
	TArray<class UAnimSet*>                            m_aoActivityAnimSets;                             		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<struct FActivityProp>                       m_aProps;                                         		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct SFXName                                     m_nAcitivityName;                                 		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bUseEnterExitAnims : 1;                         		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXPlayerCamera
// 0x007C (0x060C - 0x0590)
class ASFXPlayerCamera : public ASFXCameraNativeBase
{
public:
	struct FInterpCurveFloat                           CameraRubberBandCurve;                            		// 0x0590 (0x0014) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FTPOV                                       CameraDesiredPosition;                            		// 0x05A4 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    KickBackModifier;                                 		// 0x05C0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class USFXCameraTransition_FaceTarget*             FaceTargetTransition;                             		// 0x05CC (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class USFXCameraModifier_ScreenShake*              ScreenShakeModifier;                              		// 0x05D4 (0x0008) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	class USFXCameraMode*                              FreeCam;                                          		// 0x05DC (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_Interpolate*                  DefaultTransition;                                		// 0x05E4 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              TransitionTimeout;                                		// 0x05EC (0x0004) [0x0000000000000000]              
	float                                              LastTransitionTime;                               		// 0x05F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_fLastAspectRatio;                               		// 0x05F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CameraRubberBandMaxStretchLength;                 		// 0x05F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CameraRubberBandSpeed;                            		// 0x05FC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              RotationalDecay;                                  		// 0x0600 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxTransitionStackDepth;                          		// 0x0604 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCurrentTransitionIsModal : 1;                    		// 0x0608 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bDebugging : 1;                                   		// 0x0608 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      m_bLastConstrainAspect : 1;                       		// 0x0608 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ProcessViewRotation ( float DeltaTime, struct FRotator* OutViewRotation, struct FRotator* OutDeltaRot );
	void SetBaseRotation ( struct FRotator const& NewRotation );
	struct FRotator GetBaseRotation ( );
	void SwitchTo ( class USFXCameraMode* NewMode );
	class USFXCameraMode_Interpolate* SetBehavior ( class USFXCameraMode* Mode, class USFXCameraMode_Interpolate* NewTransitionTemplate, float Time, unsigned long PreserveTarget );
	void UpdateCameraMode ( float fDeltaTime, struct FTViewTarget* OutVT );
	struct FVector SmoothPosition ( struct FVector const& Start, struct FVector const& Target, float TimeDelta );
	void PickCameraMode ( float DeltaTime, struct FTViewTarget* OutVT );
	void RotateToFace ( struct FVector const& AimPoint, float Time );
	void UpdateViewTarget ( float DeltaTime, struct FTViewTarget* OutVT );
	class UCameraModifier* CreateCameraModifier ( class UClass* ModifierClass );
	bool IsPlayingCameraAnim ( );
	void AddScreenShake ( struct FScreenShakeStruct const& Shake );
	void PostBeginPlay ( );
};

// Class SFXGame.BioProceduralCameraBasic
// 0x0000 (0x0060 - 0x0060)
class UBioProceduralCameraBasic : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void FixedCamera ( struct FActorInfo const& stActorInfo, unsigned long bInvert, struct FCameraInfo* stCameraInfo );
};

// Class SFXGame.BioCameraBehaviorFlourish
// 0x0028 (0x0154 - 0x012C)
class UBioCameraBehaviorFlourish : public UBioCameraBehavior
{
public:
	struct FRotator                                    CameraRotation;                                   		// 0x012C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentTime;                                      		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InterpTime;                                       		// 0x013C (0x0004) [0x0000000000000000]              
	float                                              InterpSpeed;                                      		// 0x0140 (0x0004) [0x0000000000000000]              
	float                                              DistanceOffset;                                   		// 0x0144 (0x0004) [0x0000000000000000]              
	float                                              YawSpeed;                                         		// 0x0148 (0x0004) [0x0000000000000000]              
	float                                              DistanceSpeed;                                    		// 0x014C (0x0004) [0x0000000000000000]              
	unsigned long                                      bInterpToStart : 1;                               		// 0x0150 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float TimeDelta );
	struct FVector GetCameraLocation ( );
	void Initialize ( );
};

// Class SFXGame.BioCameraBehaviorFree
// 0x0004 (0x0130 - 0x012C)
class UBioCameraBehaviorFree : public UBioCameraBehavior
{
public:
	unsigned long                                      m_bCameraLocked : 1;                              		// 0x012C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float TimeDelta );
	void Initialize ( );
};

// Class SFXGame.SFXWeaponStats_AssaultRifleBase
// 0x0002 (0x025C - 0x025A)
class USFXWeaponStats_AssaultRifleBase : public USFXWeaponStatsBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_AvengerAssaultRifle
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_AvengerAssaultRifle : public USFXWeaponStats_AssaultRifleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_SniperRifleBase
// 0x0002 (0x025C - 0x025A)
class USFXWeaponStats_SniperRifleBase : public USFXWeaponStatsBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Reaper
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Reaper : public USFXWeaponStats_SniperRifleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_ShotgunBase
// 0x0002 (0x025C - 0x025A)
class USFXWeaponStats_ShotgunBase : public USFXWeaponStatsBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Scimitar
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Scimitar : public USFXWeaponStats_ShotgunBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_PistolBase
// 0x0002 (0x025C - 0x025A)
class USFXWeaponStats_PistolBase : public USFXWeaponStatsBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Edge
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Edge : public USFXWeaponStats_PistolBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Banshee
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Banshee : public USFXWeaponStats_AssaultRifleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Hammer
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Hammer : public USFXWeaponStats_SniperRifleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Hurricane
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Hurricane : public USFXWeaponStats_ShotgunBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_StrikerPistol
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_StrikerPistol : public USFXWeaponStats_PistolBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Lancer
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Lancer : public USFXWeaponStats_AssaultRifleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_AvengerSniperRifle
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_AvengerSniperRifle : public USFXWeaponStats_SniperRifleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Storm
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Storm : public USFXWeaponStats_ShotgunBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Kessler
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Kessler : public USFXWeaponStats_PistolBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Terminator
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Terminator : public USFXWeaponStats_AssaultRifleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Thunder
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Thunder : public USFXWeaponStats_AssaultRifleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Equalizer
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Equalizer : public USFXWeaponStats_SniperRifleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Tornado
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Tornado : public USFXWeaponStats_ShotgunBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Stiletto
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Stiletto : public USFXWeaponStats_PistolBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Raptor
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Raptor : public USFXWeaponStats_AssaultRifleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_StrikerSniperRifle
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_StrikerSniperRifle : public USFXWeaponStats_SniperRifleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Firestorm
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Firestorm : public USFXWeaponStats_ShotgunBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Stinger
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Stinger : public USFXWeaponStats_PistolBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Tsunami
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Tsunami : public USFXWeaponStats_AssaultRifleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Naginata
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Naginata : public USFXWeaponStats_SniperRifleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Katana
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Katana : public USFXWeaponStats_ShotgunBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Raikou
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Raikou : public USFXWeaponStats_PistolBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Breaker
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Breaker : public USFXWeaponStats_AssaultRifleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Harpoon
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Harpoon : public USFXWeaponStats_SniperRifleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Armageddon
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Armageddon : public USFXWeaponStats_ShotgunBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Razer
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Razer : public USFXWeaponStats_PistolBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Crossfire
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Crossfire : public USFXWeaponStats_AssaultRifleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Punisher
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Punisher : public USFXWeaponStats_SniperRifleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Avalanche
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Avalanche : public USFXWeaponStats_ShotgunBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Brawler
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Brawler : public USFXWeaponStats_PistolBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_SpectreAssaultRifle
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_SpectreAssaultRifle : public USFXWeaponStats_AssaultRifleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_SpectreSniperRifle
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_SpectreSniperRifle : public USFXWeaponStats_SniperRifleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_SpectreShotgun
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_SpectreShotgun : public USFXWeaponStats_ShotgunBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_SpectrePistol
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_SpectrePistol : public USFXWeaponStats_PistolBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Kovalyov
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Kovalyov : public USFXWeaponStats_AssaultRifleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Volkov
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Volkov : public USFXWeaponStats_SniperRifleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Sokolov
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Sokolov : public USFXWeaponStats_ShotgunBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Karpov
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Karpov : public USFXWeaponStats_PistolBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXWeaponStats_Geth
// 0x0000 (0x025C - 0x025C)
class USFXWeaponStats_Geth : public USFXWeaponStats_AssaultRifleBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioDEBUG_PawnFiringController
// 0x0028 (0x02AC - 0x0284)
class ABioDEBUG_PawnFiringController : public AActor
{
public:
	TArray<class ABioPawn*>                            Shooters;                                         		// 0x0284 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class ABioPawn*                                    Target;                                           		// 0x0294 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     nmTypeOfShooting;                                 		// 0x029C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                I;                                                		// 0x02A4 (0x0004) [0x0000000000000000]              
	unsigned long                                      bActive : 1;                                      		// 0x02A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool ShootTarget ( class ABioPawn* SHTR );
	int HowManyShooting ( );
};

// Class SFXGame.BioOp
// 0x0000 (0x0060 - 0x0060)
class UBioOp : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void EvaluateInt ( unsigned char eOp, int nB, unsigned long bInvertOp, int nU, int* nA );
	void EvaluateFloat ( unsigned char eOp, unsigned long bInvertOp, float fU, float* fA, float* fB );
};

// Class SFXGame.SFXModule_AimAssist
// 0x0078 (0x00E4 - 0x006C)
class USFXModule_AimAssist : public USFXModule
{
public:
	struct FVector                                     LastCamLoc;                                       		// 0x006C (0x000C) [0x0000000000000000]              
	struct FRotator                                    DebugAdhesion_Final;                              		// 0x0078 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    DebugAdhesion_Combined;                           		// 0x0084 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     ZoomSnapTarget;                                   		// 0x0090 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     CurrentAimAssistBoneLocation;                     		// 0x009C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class APawn*                                       LastAdhesionTarget;                               		// 0x00A8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class APawn*                                       LastFrictionTarget;                               		// 0x00B0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      LastZoomSnapTarget;                               		// 0x00B8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      CurrentAimAssistTarget;                           		// 0x00C0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              GlobalFrictionFactor;                             		// 0x00C8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              GlobalAimCorrectionFactor;                        		// 0x00CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              GlobalAdhesionFactor;                             		// 0x00D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              GlobalSweepFactor;                                		// 0x00D4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              EnemyMovementAdhesionFactor;                      		// 0x00D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LastFrictionMultiplier;                           		// 0x00DC (0x0004) [0x0000000000000000]              
	float                                              CurrentAimAssistSoftMargin;                       		// 0x00E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DebugDraw_ZoomSnap ( class ABioHUD* H );
	void ZoomSnap ( );
	void DebugDraw_Adhesion ( class ABioHUD* H );
	FString PrintQuat ( struct FQuat const& Q );
	struct FRotator ViewAdhesion ( float DeltaTime, class ABioWeaponRanged* Weapon );
	struct FQuat StripRoll ( struct FQuat const& Q );
	void DebugDraw_Friction ( class ABioHUD* H );
	float ViewFriction ( float DeltaTime, class ABioWeaponRanged* Weapon );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector const& StartFireLoc );
	void DebugDraw_Magnetism ( class ABioHUD* H );
	float GetStickRelativeDot ( struct FVector const& ScreenAimOffset );
	struct FRotator GetMagneticAimCorrection ( struct FVector const& StartFireLoc, struct FRotator const& BaseAimRot, float MaxAngle, float Threshold, float Range );
	void ProcessRotation ( float DeltaTime, struct FRotator* DeltaRot );
	void CacheCurrentAimAssistTarget ( );
};

// Class SFXGame.BioComplexFloatAttribute
// 0x0000 (0x0060 - 0x0060)
class UBioComplexFloatAttribute : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioComplexIntAttribute
// 0x0000 (0x0060 - 0x0060)
class UBioComplexIntAttribute : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioConditionals
// 0x0000 (0x0060 - 0x0060)
class UBioConditionals : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioConsequenceFunctions
// 0x0000 (0x0060 - 0x0060)
class UBioConsequenceFunctions : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void GrantBonusTalents ( class ABioWorldInfo* WorldInfo, int bonusIdentifier );
	void GrantCredits ( class ABioWorldInfo* WorldInfo, int Count );
	void GrantMediGel ( class ABioWorldInfo* WorldInfo, int Count );
	void GrantSalvage ( class ABioWorldInfo* WorldInfo, int Count );
	void GrantGrenades ( class ABioWorldInfo* WorldInfo, int Count );
	void GrantScaledXP ( class ABioWorldInfo* WorldInfo, int Curve );
};

// Class SFXGame.BioForm_SingleLine
// 0x0000 (0x0078 - 0x0078)
class UBioForm_SingleLine : public UBioFormations
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioForm_Square
// 0x0000 (0x0078 - 0x0078)
class UBioForm_Square : public UBioFormations
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioForm_Triangle
// 0x0000 (0x0078 - 0x0078)
class UBioForm_Triangle : public UBioFormations
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioForm_TriangleRest
// 0x0000 (0x0078 - 0x0078)
class UBioForm_TriangleRest : public UBioFormations
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioGameInfo
// 0x0018 (0x04C8 - 0x04B0)
class ABioGameInfo : public AGameInfo
{
public:
	TArray<class ATeamInfo*>                           Teams;                                            		// 0x04B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      TeamClass;                                        		// 0x04C0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void RestartPlayer ( class AController* NewPlayer );
	void eventPostLogin ( class APlayerController* NewPlayer );
	void BioBeginPlay ( );
};

// Class SFXGame.BioInterface_Appearance_Car
// 0x0000 (0x007C - 0x007C)
class UBioInterface_Appearance_Car : public UBioInterface_Appearance
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioItemOmniTool
// 0x0000 (0x0100 - 0x0100)
class UBioItemOmniTool : public UBioItemXModdable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioWeaponMelee
// 0x0000 (0x0420 - 0x0420)
class ABioWeaponMelee : public ABioWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioMorphFaceSaveObject
// 0x0088 (0x0100 - 0x0078)
class UBioMorphFaceSaveObject : public UBioBaseSaveObject
{
public:
	TArray<class USkeletalMesh*>                       m_oOtherMeshes;                                   		// 0x0078 (0x0010) [0x2000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FMorphFeature>                       m_aMorphFeatures;                                 		// 0x0088 (0x0010) [0x2000000000400000]              ( CPF_NeedCtorLink )
	TArray<struct FOffsetBonePos>                      m_aFinalSkeleton;                                 		// 0x0098 (0x0010) [0x2000000000400000]              ( CPF_NeedCtorLink )
	struct FVertexBuffer                               m_aVertexBuffersLOD0;                             		// 0x00A8 (0x0010) [0x2000000000400000]              ( CPF_NeedCtorLink )
	struct FVertexBuffer                               m_aVertexBuffersLOD1;                             		// 0x00B8 (0x0010) [0x2000000000400000]              ( CPF_NeedCtorLink )
	struct FVertexBuffer                               m_aVertexBuffersLOD2;                             		// 0x00C8 (0x0010) [0x2000000000400000]              ( CPF_NeedCtorLink )
	struct FVertexBuffer                               m_aVertexBuffersLOD3;                             		// 0x00D8 (0x0010) [0x2000000000400000]              ( CPF_NeedCtorLink )
	class USkeletalMesh*                               m_oBaseHead;                                      		// 0x00E8 (0x0008) [0x2000000000000000]              
	class USkeletalMesh*                               m_oHairMesh;                                      		// 0x00F0 (0x0008) [0x2000000000000000]              
	class UBioBaseSaveObject*                          m_oMaterialOverrides;                             		// 0x00F8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void LoadObject ( class UObject* O );
	void SaveObject ( class UObject* O );
};

// Class SFXGame.BioSeqEvt_WaypointSet_WaypointReached
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_WaypointSet_WaypointReached : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioPathPointFactory
// 0x0000 (0x008C - 0x008C)
class UBioPathPointFactory : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSeqAct_ToggleElevatorMode
// 0x0000 (0x00F8 - 0x00F8)
class USFXSeqAct_ToggleElevatorMode : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_SkipElevatorSequence
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_SkipElevatorSequence : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCameraMode_Photo
// 0x0038 (0x0160 - 0x0128)
class USFXCameraMode_Photo : public USFXCameraMode
{
public:
	struct FScriptDelegate                             ExternalModifyPPSettings;                         		// 0x0128 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ModifyPostProcess__Delegate;                    		// 0x0138 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              RotationInterpSpeed;                              		// 0x0148 (0x0004) [0x0000000000000000]              
	float                                              FOVInterpSpeed;                                   		// 0x014C (0x0004) [0x0000000000000000]              
	float                                              CurrentRoll;                                      		// 0x0150 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TargetRoll;                                       		// 0x0154 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurrentFOV;                                       		// 0x0158 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TargetFOV;                                        		// 0x015C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float DeltaTime );
	void UpdateRollAndFOV ( float DeltaTime );
	void UpdateOffset ( struct FVector const& Location );
	void ModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
	void ResetRoll ( );
	void InitFromMode ( float NewFOV );
	void ModifyPostProcess ( struct FPostProcessSettings* PPSettings );
};

// Class SFXGame.SFXCameraMode_PhotoOrbit
// 0x0000 (0x0160 - 0x0160)
class USFXCameraMode_PhotoOrbit : public USFXCameraMode_Photo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UpdateOffset ( struct FVector const& Location );
};

// Class SFXGame.SFXGameModeDefault
// 0x0013 (0x00E0 - 0x00CD)
class USFXGameModeDefault : public USFXGameModeBase
{
public:
	class USFXCameraSetup*                             CameraSetup;                                      		// 0x00D0 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              InputDelayStormExit;                              		// 0x00D8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              InputDelayTightAimExit;                           		// 0x00DC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void TrySkipElevator ( );
	void EnterCommandMenu ( );
	void EnterWeaponWheel ( );
	void EnterPowerWheel ( );
	void UseGrenade ( );
	void UseFirstAid ( );
	void TryHolster ( );
	void ChangeMagnification ( );
	void ToggleCrouch ( );
	void ToggleWalk ( );
	void DisableWalking ( );
	void EnableWalking ( );
	void TryUseMappedPower ( );
	void SwitchToWeapon ( unsigned char Slot );
	void TrySwapWeapon ( );
	void PrevWeapon ( );
	void NextWeapon ( );
	int GetPrimaryWeaponIndex ( );
	void UseAbility ( int Ability );
	void TryMelee ( );
	void TurnOffTightAim ( );
	void StopTightAim ( );
	void TightAim ( );
	void TurnStormOff ( );
	void StormOff ( );
	void StormOn ( );
	void TryExitCover ( );
	bool TryFallOrClimb ( );
	bool TryEnterVehicle ( );
	bool Used ( );
	void TapAction ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
	void Initialize ( );
};

// Class SFXGame.BioPhysMatGrenade
// 0x0000 (0x00F8 - 0x00F8)
class UBioPhysMatGrenade : public UPhysicalMaterial
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioPlayerReplicationInfo
// 0x0002 (0x0360 - 0x035E)
class ABioPlayerReplicationInfo : public APlayerReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_OnCombatBegin
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_OnCombatBegin : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqEvt_OnCombatEnd
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_OnCombatEnd : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioRandomActivity
// 0x0018 (0x00A4 - 0x008C)
class UBioRandomActivity : public UBioBaseActivity
{
public:
	TArray<float>                                      m_afTwitchProbabilitys;                           		// 0x008C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              m_fBaseTime;                                      		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fVarianceTime;                                  		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXPawn_Player
// 0x0011 (0x0A68 - 0x0A57)
class ASFXPawn_Player : public ABioPawn
{
public:
	struct SFXName                                     PrimaryWeapon;                                    		// 0x0A58 (0x0008) [0x0000000000000000]              
	struct SFXName                                     SecondaryWeapon;                                  		// 0x0A60 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SwitchToBackupWeapon ( );
	void DrawPrimaryWeapon ( );
	void Internal_UpdatePrimaryAndSecondaryWeapons ( struct SFXName NewWeaponName );
	void UpdatePrimaryAndSecondaryWeapons ( );
	void OnWeaponFired ( class ABioWeaponRanged* InWeapon );
	void PlayerAcquiredCover ( );
};

// Class SFXGame.BioSFHandler_PartySelection
// 0x002F (0x00C8 - 0x0099)
class UBioSFHandler_PartySelection : public UBioSFHandler
{
public:
	TArray<struct FPartySelectMemberInfo>              lstMemberInfo;                                    		// 0x009C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct SFXName                                     nmForcedHenchman;                                 		// 0x00AC (0x0008) [0x0000000000000000]              
	int                                                srPartyConfirm;                                   		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srPartyCancel;                                    		// 0x00B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srPartyQuestion;                                  		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nPartyMember1;                                  		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                m_nPartyMember2;                                  		// 0x00C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void GetHenchmenStats ( int nIndex, int* nStat1, int* nStat2, int* nStat3 );
	void GetStatsFromClass ( int nClassID, int* nStat1, int* nStat2, int* nStat3 );
	FString GetHenchmenName ( int nIndex );
	void FinalizeParty ( unsigned long bAPressed, int nContext, unsigned long bYPressed );
	void ConfirmParty ( );
	void DoInitialization ( );
	void HandleEvent ( unsigned char nCommand, TArray<FString>* lstArguments );
};

// Class SFXGame.BioSaveTriggerVolume
// 0x0010 (0x02D4 - 0x02C4)
class ABioSaveTriggerVolume : public ATriggerVolume
{
public:
	class AActor*                                      PlayerSpawnLocation;                              		// 0x02C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                DisableSaveReason;                                		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      DisableSave : 1;                                  		// 0x02D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector const& HitLocation, struct FVector const& HitNormal );
};

// Class SFXGame.BioSeqAct_AddSquadToPerception
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_AddSquadToPerception : public USequenceAction
{
public:
	class AActor*                                      oPawn;                                            		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oPerceivedSquad;                                  		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_AddToParty
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_AddToParty : public USequenceAction
{
public:
	unsigned long                                      m_bShouldFollowLeader : 1;                        		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bJoinDefaultCommoner : 1;                       		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_AdjustStability
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_AdjustStability : public USequenceAction
{
public:
	float                                              m_fAmount;                                        		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_AreaTransition
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_AreaTransition : public USequenceAction
{
public:
	struct SFXName                                     AreaName;                                         		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     StartPoint;                                       		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class SFXGame.BioSeqAct_AttachCrustEffect
// 0x0014 (0x010C - 0x00F8)
class UBioSeqAct_AttachCrustEffect : public USequenceAction
{
public:
	class UBioVFXTemplate*                             oEffect;                                          		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      Target;                                           		// 0x0100 (0x0008) [0x0000000000000000]              
	float                                              fLifeTime;                                        		// 0x0108 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_AttachVFX
// 0x0030 (0x0128 - 0x00F8)
class UBioSeqAct_AttachVFX : public USequenceAction
{
public:
	TArray<class AActor*>                              m_oAttachTo;                                      		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     m_vOffset;                                        		// 0x0108 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     m_nmSocket;                                       		// 0x0114 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             m_oParticles;                                     		// 0x011C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bActivateOnAttach : 1;                          		// 0x0124 (0x0004) [0x0000000000020001] [0x00000001] ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_AttachVisualEffect
// 0x002C (0x0124 - 0x00F8)
class UBioSeqAct_AttachVisualEffect : public USequenceAction
{
public:
	TArray<class AActor*>                              m_oAttachTo;                                      		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     m_vOffset;                                        		// 0x0108 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     m_nmSocketOrBone;                                 		// 0x0114 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UBioVFXTemplate*                             m_oEffect;                                        		// 0x011C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_AutoSave
// 0x0004 (0x0114 - 0x0110)
class UBioSeqAct_AutoSave : public UBioSequenceLatentAction
{
public:
	unsigned long                                      bShowSaveGui : 1;                                 		// 0x0110 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAbort : 1;                                       		// 0x0110 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool UpdateOp ( float fDeltaT );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_AwardAchievement
// 0x0001 (0x00F9 - 0x00F8)
class UBioSeqAct_AwardAchievement : public USequenceAction
{
public:
	unsigned char                                      AchievementId;                                    		// 0x00F8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};

// Class SFXGame.BioSeqAct_BioToggleCinematicMode
// 0x0014 (0x0110 - 0x00FC)
class UBioSeqAct_BioToggleCinematicMode : public USeqAct_ToggleCinematicMode
{
public:
	FString                                            sSkipEvent;                                       		// 0x00FC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bCinematicInputMode : 1;                          		// 0x010C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisableCinematicSkip : 1;                        		// 0x010C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_BlackScreen
// 0x0001 (0x0111 - 0x0110)
class UBioSeqAct_BlackScreen : public UBioSequenceLatentAction
{
public:
	unsigned char                                      m_eBlackScreenAction;                             		// 0x0110 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool UpdateOp ( float fDeltaT );
	void eventActivated ( );
};

// Class SFXGame.BioSeqAct_CancelTutorial
// 0x000C (0x0104 - 0x00F8)
class UBioSeqAct_CancelTutorial : public USequenceAction
{
public:
	struct SFXName                                     Tutorial;                                         		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFadeOut : 1;                                     		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_CauseDamage
// 0x001C (0x0114 - 0x00F8)
class UBioSeqAct_CauseDamage : public USequenceAction
{
public:
	class AActor*                                      m_pInstigator;                                    		// 0x00F8 (0x0008) [0x0000000000000000]              
	class UBioDamageType*                              m_pDamage;                                        		// 0x0100 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              m_fDamageAmountAsPercentOfMaxHealth;              		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMomentum;                                      		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bForceCinematicDamage : 1;                      		// 0x0110 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_ChangeAI
// 0x0014 (0x010C - 0x00F8)
class UBioSeqAct_ChangeAI : public USequenceAction
{
public:
	class UClass*                                      ControllerClass;                                  		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oPawn;                                            		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      SaveOldAIController : 1;                          		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class SFXGame.BioSeqAct_CheckIfInVolume
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_CheckIfInVolume : public USequenceAction
{
public:
	class AActor*                                      m_oTarget;                                        		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      m_oVolume;                                        		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_ClearAllActions
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_ClearAllActions : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class SFXGame.BioSeqAct_ClearNewCharacterEffects
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_ClearNewCharacterEffects : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class SFXGame.BioSeqAct_ClearSavedMap
// 0x0020 (0x0118 - 0x00F8)
class UBioSeqAct_ClearSavedMap : public USequenceAction
{
public:
	FString                                            m_sMapToClear;                                    		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	FString                                            m_sChunkToClear;                                  		// 0x0108 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_ClearSomeActions_Queue
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_ClearSomeActions_Queue : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class SFXGame.BioSeqAct_ClearSomeActions_State
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_ClearSomeActions_State : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class SFXGame.BioSeqAct_Cover_AddCoverFrom
// 0x0014 (0x010C - 0x00F8)
class UBioSeqAct_Cover_AddCoverFrom : public USequenceAction
{
public:
	class AActor*                                      m_oUseingCover;                                   		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      m_oAdd;                                           		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nRank;                                          		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_Cover_GetCoveringRank
// 0x0014 (0x010C - 0x00F8)
class UBioSeqAct_Cover_GetCoveringRank : public USequenceAction
{
public:
	class AActor*                                      m_oUseingCover;                                   		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      m_oRankOf;                                        		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nRank;                                          		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_Cover_RemoveCoverFrom
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_Cover_RemoveCoverFrom : public USequenceAction
{
public:
	class AActor*                                      m_oUseingCover;                                   		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      m_oRemove;                                        		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_Cover_SetCoveringRank
// 0x0014 (0x010C - 0x00F8)
class UBioSeqAct_Cover_SetCoveringRank : public USequenceAction
{
public:
	class AActor*                                      m_oUseingCover;                                   		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      m_oCoveringFrom;                                  		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nRank;                                          		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_Crouch
// 0x000C (0x0104 - 0x00F8)
class UBioSeqAct_Crouch : public USequenceAction
{
public:
	class AActor*                                      m_oActor;                                         		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bCrouch : 1;                                    		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_CustomizeStageCameras
// 0x001C (0x0114 - 0x00F8)
class UBioSeqAct_CustomizeStageCameras : public USequenceAction
{
public:
	float                                              m_fCameraHeightDelta;                             		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCameraPitchDelta;                              		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCameraYawDelta;                                		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCameraFOVDelta;                                		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCameraNearPlaneDelta;                          		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCameraFocusInnerRadiusDelta;                   		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fCameraFocusDistanceDelta;                      		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DoActionInRadius
// 0x0030 (0x0128 - 0x00F8)
class UBioSeqAct_DoActionInRadius : public USequenceAction
{
public:
	TArray<class AActor*>                              m_aActorList;                                     		// 0x00F8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UClass*                                      ClassFilter;                                      		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      SourceActor;                                      		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      CurrentObject;                                    		// 0x0118 (0x0008) [0x0000000000000000]              
	float                                              Radius;                                           		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nIndex;                                         		// 0x0124 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DoActionInVolume
// 0x002C (0x0124 - 0x00F8)
class UBioSeqAct_DoActionInVolume : public USequenceAction
{
public:
	TArray<class AActor*>                              m_aActorList;                                     		// 0x00F8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UClass*                                      ClassFilter;                                      		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      Volume;                                           		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      CurrentObject;                                    		// 0x0118 (0x0008) [0x0000000000000000]              
	int                                                m_nIndex;                                         		// 0x0120 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DUIClear
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_DUIClear : public USequenceAction
{
public:
	unsigned long                                      bModal : 1;                                       		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DUIIsActive
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_DUIIsActive : public USequenceAction
{
public:
	unsigned long                                      bModal : 1;                                       		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DUISetBarFillDirection
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_DUISetBarFillDirection : public USequenceAction
{
public:
	unsigned long                                      bModalBar : 1;                                    		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLeftToRight : 1;                                 		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DUISetBarFillPercent
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_DUISetBarFillPercent : public USequenceAction
{
public:
	int                                                nPercent;                                         		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bModalBar : 1;                                    		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DUISetBarMarkers
// 0x000C (0x0104 - 0x00F8)
class UBioSeqAct_DUISetBarMarkers : public USequenceAction
{
public:
	int                                                nMarker1;                                         		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nMarker2;                                         		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bModalBar : 1;                                    		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DUISetCounterValue
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_DUISetCounterValue : public USequenceAction
{
public:
	int                                                nValue;                                           		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bModalCounter : 1;                                		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqEvt_PlayerInput
// 0x0006 (0x012C - 0x0126)
class UBioSeqEvt_PlayerInput : public USequenceEvent
{
public:
	int                                                m_nFilterID;                                      		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_DUISetElementColor
// 0x0005 (0x00FD - 0x00F8)
class UBioSeqAct_DUISetElementColor : public USequenceAction
{
public:
	struct FColor                                      oColor;                                           		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Element;                                          		// 0x00FC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DUISetElementPulsing
// 0x000D (0x0105 - 0x00F8)
class UBioSeqAct_DUISetElementPulsing : public USequenceAction
{
public:
	float                                              fMinAlpha;                                        		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fCycleTime;                                       		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPulsing : 1;                                     		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      Element;                                          		// 0x0104 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DUISetElementVisible
// 0x0009 (0x0101 - 0x00F8)
class UBioSeqAct_DUISetElementVisible : public USequenceAction
{
public:
	float                                              fFadeTime;                                        		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bVisible : 1;                                     		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      Element;                                          		// 0x0100 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DUISetLaserCircle
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_DUISetLaserCircle : public USequenceAction
{
public:
	int                                                CircleState;                                      		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DUISetLaserLayout
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_DUISetLaserLayout : public USequenceAction
{
public:
	unsigned long                                      bShow : 1;                                        		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DUISetMiraHanoiLayout
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_DUISetMiraHanoiLayout : public USequenceAction
{
public:
	unsigned long                                      bShow : 1;                                        		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DUISetQuasarLayout
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_DUISetQuasarLayout : public USequenceAction
{
public:
	unsigned long                                      bShow : 1;                                        		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DUISetTextStringRef
// 0x0005 (0x00FD - 0x00F8)
class UBioSeqAct_DUISetTextStringRef : public USequenceAction
{
public:
	int                                                srText;                                           		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Element;                                          		// 0x00FC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_DUISetToxinCureLayout
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_DUISetToxinCureLayout : public USequenceAction
{
public:
	unsigned long                                      bShow : 1;                                        		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_EndGame
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_EndGame : public USequenceAction
{
public:
	int                                                srEndGameMessage;                                 		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_FactionRelationShip
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_FactionRelationShip : public USequenceAction
{
public:
	class UObject*                                     m_oSquadA;                                        		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     m_oSquadB;                                        		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
	class ABioBaseSquad* GetSquadFrom ( class UObject* oInObj );
};

// Class SFXGame.BioSeqAct_FindCover
// 0x003C (0x0134 - 0x00F8)
class UBioSeqAct_FindCover : public USequenceAction
{
public:
	TArray<class AActor*>                              m_aoCoverFrom;                                    		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AActor*                                      m_oSeeksCover;                                    		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      m_oNear;                                          		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      m_oNoCoverFrom;                                   		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      m_oCover;                                         		// 0x0120 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fMaxRange;                                      		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nSlot;                                          		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSquadCoverOnly : 1;                              		// 0x0130 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_ForceResourceLoad
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_ForceResourceLoad : public USequenceAction
{
public:
	TArray<class UObject*>                             ResourceArray;                                    		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_GetConnectedObjects
// 0x0028 (0x0120 - 0x00F8)
class UBioSeqAct_GetConnectedObjects : public USequenceAction
{
public:
	FString                                            sObjectA;                                         		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	FString                                            sObjectB;                                         		// 0x0108 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class ABioArtPlaceable*                            oArtPlaceable;                                    		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_GetEquippedWeapon
// 0x000C (0x0104 - 0x00F8)
class UBioSeqAct_GetEquippedWeapon : public USequenceAction
{
public:
	class AActor*                                      oPawn;                                            		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                nWeapon;                                          		// 0x0100 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_GetPropertyArtPlaceable
// 0x0000 (0x0158 - 0x0158)
class UBioSeqAct_GetPropertyArtPlaceable : public UBioSeqAct_GetProperty
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSeqAct_GetSquad
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_GetSquad : public USequenceAction
{
public:
	class AActor*                                      oPawn;                                            		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oSquad;                                           		// 0x0100 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_GetTalentRank
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_GetTalentRank : public USequenceAction
{
public:
	class ABioPawn*                                    m_targetPawn;                                     		// 0x00F8 (0x0008) [0x0000000000000000]              
	int                                                m_TalentID;                                       		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                m_resultRank;                                     		// 0x0104 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_GetTutorialViewed
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_GetTutorialViewed : public USequenceAction
{
public:
	struct SFXName                                     Tutorial;                                         		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_GrantBonusTalent
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_GrantBonusTalent : public USequenceAction
{
public:
	int                                                m_bonusID;                                        		// 0x00F8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_GrantGenericXP
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_GrantGenericXP : public USequenceAction
{
public:
	int                                                GrantQuantity;                                    		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class SFXGame.BioSeqAct_GrantScaledXP
// 0x0001 (0x00F9 - 0x00F8)
class UBioSeqAct_GrantScaledXP : public USequenceAction
{
public:
	unsigned char                                      EXPCurve;                                         		// 0x00F8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class SFXGame.BioSeqAct_HUDDisplayState
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_HUDDisplayState : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};

// Class SFXGame.BioSeqAct_IncreaseTalentMaxRank
// 0x000C (0x0104 - 0x00F8)
class UBioSeqAct_IncreaseTalentMaxRank : public USequenceAction
{
public:
	int                                                m_TalentID;                                       		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                m_maxRankIncrement;                               		// 0x00FC (0x0004) [0x0000000000000000]              
	int                                                m_rankIncrement;                                  		// 0x0100 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_InterruptAmbientConversation
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_InterruptAmbientConversation : public USequenceAction
{
public:
	class UBioConversation*                            IgnoreConversation;                               		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_IsActiveConversation
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_IsActiveConversation : public USequenceAction
{
public:
	class UBioConversation*                            Conversation;                                     		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_IsVehicle
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_IsVehicle : public USequenceAction
{
public:
	class APawn*                                       m_oPawn;                                          		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_LootHenchman
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_LootHenchman : public USequenceAction
{
public:
	struct SFXName                                     m_henchmanTag;                                    		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_MiniGame
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_MiniGame : public USequenceAction
{
public:
	int                                                m_nMiniGameID;                                    		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_MovieXMV
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_MovieXMV : public USequenceAction
{
public:
	FString                                            m_sMovieXMV;                                      		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_NearClipPlane
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_NearClipPlane : public USequenceAction
{
public:
	float                                              fValue;                                           		// 0x00F8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_RestoreAI
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_RestoreAI : public USequenceAction
{
public:
	class AActor*                                      oPawn;                                            		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class SFXGame.BioSeqAct_ResumeWalking
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_ResumeWalking : public USequenceAction
{
public:
	class ABioPawn*                                    m_oPawn;                                          		// 0x00F8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_ResurrectHenchman
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_ResurrectHenchman : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_SarenUsePower
// 0x0024 (0x011C - 0x00F8)
class UBioSeqAct_SarenUsePower : public USequenceAction
{
public:
	struct FVector                                     vTarget;                                          		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class ABioPawn*                                    oAttacker;                                        		// 0x0104 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oTarget;                                          		// 0x010C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     nmPower;                                          		// 0x0114 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_SaveCharacter
// 0x0000 (0x0114 - 0x0114)
class UBioSeqAct_SaveCharacter : public UBioSeqAct_AutoSave
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_SetActionState
// 0x0009 (0x0101 - 0x00F8)
class UBioSeqAct_SetActionState : public USequenceAction
{
public:
	class AActor*                                      m_oActor;                                         		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      m_eActionState;                                   		// 0x0100 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_SetActive
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_SetActive : public USequenceAction
{
public:
	unsigned long                                      bSetActive : 1;                                   		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_SetBase
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_SetBase : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_SetBusyState
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_SetBusyState : public USequenceAction
{
public:
	unsigned long                                      bBusy : 1;                                        		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_SetCanWalkOffLedges
// 0x000C (0x0104 - 0x00F8)
class UBioSeqAct_SetCanWalkOffLedges : public USequenceAction
{
public:
	class APawn*                                       m_oPawn;                                          		// 0x00F8 (0x0008) [0x0000000000000000]              
	unsigned long                                      m_bCanWalkOffLedges : 1;                          		// 0x0100 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_SetClassification
// 0x0001 (0x00F9 - 0x00F8)
class UBioSeqAct_SetClassification : public USequenceAction
{
public:
	unsigned char                                      Classification;                                   		// 0x00F8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_SetExploreCameraRotation
// 0x000C (0x0104 - 0x00F8)
class UBioSeqAct_SetExploreCameraRotation : public USequenceAction
{
public:
	class AActor*                                      oTarget;                                          		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceInstant : 1;                                		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
	bool eventIsCameraExploreMode ( class USFXCameraMode* pCameraMode );
};

// Class SFXGame.SFXCameraMode_Explore
// 0x0000 (0x0128 - 0x0128)
class USFXCameraMode_Explore : public USFXCameraMode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Initialize ( );
};

// Class SFXGame.BioSeqAct_SetInputTrap
// 0x0014 (0x010C - 0x00F8)
class UBioSeqAct_SetInputTrap : public USequenceAction
{
public:
	FString                                            m_Key;                                            		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      m_bSetTrap : 1;                                   		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_SetMaterialParameter
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_SetMaterialParameter : public USequenceAction
{
public:
	struct SFXName                                     m_nmMaterialParameter;                            		// 0x00F8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
	void Set ( class ABioPawn* pPawn, struct SFXName nmMaterialParameter );
};

// Class SFXGame.BioSeqAct_SetMaterialParameterColor
// 0x0004 (0x0104 - 0x0100)
class UBioSeqAct_SetMaterialParameterColor : public UBioSeqAct_SetMaterialParameter
{
public:
	struct FColor                                      m_clr;                                            		// 0x0100 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Set ( class ABioPawn* pPawn, struct SFXName nmMaterialParameter );
};

// Class SFXGame.BioSeqAct_SetMaterialParameterScalar
// 0x0004 (0x0104 - 0x0100)
class UBioSeqAct_SetMaterialParameterScalar : public UBioSeqAct_SetMaterialParameter
{
public:
	float                                              m_fScalar;                                        		// 0x0100 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Set ( class ABioPawn* pPawn, struct SFXName nmMaterialParameter );
};

// Class SFXGame.BioSeqAct_SetOverrideTipText
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_SetOverrideTipText : public USequenceAction
{
public:
	int                                                m_Override;                                       		// 0x00F8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_SetPlayerControlling
// 0x0018 (0x0110 - 0x00F8)
class UBioSeqAct_SetPlayerControlling : public USequenceAction
{
public:
	class ABioPlayerController*                        m_oPlayer;                                        		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct SFXName                                     m_nmNewPawnToControll;                            		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class APawn*                                       m_oOldPawn;                                       		// 0x0108 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_SetRadarDisplay
// 0x000C (0x0104 - 0x00F8)
class UBioSeqAct_SetRadarDisplay : public USequenceAction
{
public:
	class AActor*                                      m_oActor;                                         		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bDisabled : 1;                                  		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_SetSquadFaction
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_SetSquadFaction : public USequenceAction
{
public:
	class UClass*                                      NewSquadFaction;                                  		// 0x00F8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class AActor*                                      m_oActor;                                         		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_SetStability
// 0x000C (0x0104 - 0x00F8)
class UBioSeqAct_SetStability : public USequenceAction
{
public:
	class AActor*                                      m_oActor;                                         		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fStab;                                          		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_SetTutorialViewed
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_SetTutorialViewed : public USequenceAction
{
public:
	struct SFXName                                     Tutorial;                                         		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_ShieldGetAttributes
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_ShieldGetAttributes : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSFHandler_IntroText
// 0x0007 (0x00A0 - 0x0099)
class UBioSFHandler_IntroText : public UBioSFHandler
{
public:
	int                                                srText;                                           		// 0x009C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void HandleEvent ( unsigned char nCommand, TArray<FString>* lstArguments );
};

// Class SFXGame.BioSeqAct_ShowInventory
// 0x0008 (0x0118 - 0x0110)
class UBioSeqAct_ShowInventory : public UBioSequenceLatentAction
{
public:
	class ABioPawn*                                    oHenchman;                                        		// 0x0110 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool UpdateOp ( float fDeltaT );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_ShowLatentTutorial
// 0x000C (0x011C - 0x0110)
class UBioSeqAct_ShowLatentTutorial : public UBioSequenceLatentAction
{
public:
	struct SFXName                                     Tutorial;                                         		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSetViewed : 1;                                   		// 0x0118 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool UpdateOp ( float fDeltaT );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_ShowMessage
// 0x001D (0x012D - 0x0110)
class UBioSeqAct_ShowMessage : public UBioSequenceLatentAction
{
public:
	int                                                srText;                                           		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                srAButton;                                        		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                srBButton;                                        		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fDisplayTime;                                     		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nIconIndex;                                       		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fRemainingDisplayTime;                          		// 0x0124 (0x0004) [0x0000000000000000]              
	unsigned long                                      bNoFade : 1;                                      		// 0x0128 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bFinished : 1;                                  		// 0x0128 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bAPressed : 1;                                  		// 0x0128 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_bWasPaused : 1;                                 		// 0x0128 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned char                                      nIconSet;                                         		// 0x012C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void MessageBoxUpdate ( float fDeltaT, class UBioSFHandler_MessageBox* oMsgBox );
	void MessageInputPressed ( unsigned long bAPressed, int nContext, unsigned long bYPressed );
	bool UpdateOp ( float fDeltaT );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_ShowTutorial
// 0x0010 (0x0108 - 0x00F8)
class UBioSeqAct_ShowTutorial : public USequenceAction
{
public:
	struct SFXName                                     Tutorial;                                         		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                srOverrideTextId;                                 		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSetViewed : 1;                                   		// 0x0104 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bSuccess : 1;                                   		// 0x0104 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_bInitiated : 1;                                 		// 0x0104 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool UpdateOp ( float fDeltaT );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_SquadStopHoldingPosition
// 0x0000 (0x00F8 - 0x00F8)
class UBioSeqAct_SquadStopHoldingPosition : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.BioSeqAct_SwitchWeighted
// 0x0050 (0x0148 - 0x00F8)
class UBioSeqAct_SwitchWeighted : public USequenceAction
{
public:
	float                                              fWeight[ 0xA ];                                   		// 0x00F8 (0x0028) [0x0000000000000000]              
	float                                              fWeight0;                                         		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight1;                                         		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight2;                                         		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight3;                                         		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight4;                                         		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight5;                                         		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight6;                                         		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight7;                                         		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight8;                                         		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              fWeight9;                                         		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class SFXGame.BioSeqAct_TempLookAt
// 0x0028 (0x0120 - 0x00F8)
class UBioSeqAct_TempLookAt : public USequenceAction
{
public:
	struct FVector                                     vPoint;                                           		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     vRelitivePoint;                                   		// 0x0104 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class ABioPawn*                                    oWho;                                             		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oFocus;                                           		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_ToggleCombat
// 0x0004 (0x00FC - 0x00F8)
class UBioSeqAct_ToggleCombat : public USequenceAction
{
public:
	unsigned long                                      m_bEnable : 1;                                    		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_ToggleSave
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_ToggleSave : public USequenceAction
{
public:
	int                                                srReason;                                         		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnable : 1;                                      		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.BioSeqAct_UpdateTacticianAchievement
// 0x0008 (0x0100 - 0x00F8)
class UBioSeqAct_UpdateTacticianAchievement : public USequenceAction
{
public:
	float                                              m_fDamageRatioRequired;                           		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                m_nAchievementId;                                 		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class SFXGame.BioSeqEvt_ElevatorSequenceSkipped
// 0x0002 (0x0128 - 0x0126)
class UBioSeqEvt_ElevatorSequenceSkipped : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSFHandler_Achievement
// 0x001F (0x00B8 - 0x0099)
class UBioSFHandler_Achievement : public UBioSFHandler
{
public:
	TArray<struct FAchievementInfo>                    m_lstAchievements;                                		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nSelectedItemIndex;                             		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                m_nShiftItemIndex;                                		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                srEmpty;                                          		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void Update ( float fDeltaT );
	void SetPlatformLayout ( );
	void PopulateAchievementItemListEntry ( int nDisplayIndex );
	void PopulateAchievementItemList ( );
	void SetGlobalVars ( );
	void HandleEvent ( unsigned char nCommand, TArray<FString>* lstArguments );
};

// Class SFXGame.BioSFHandler_BlackScreen
// 0x0008 (0x00A1 - 0x0099)
class UBioSFHandler_BlackScreen : public UBioSFHandler
{
public:
	unsigned long                                      m_bFadeInProgress : 1;                            		// 0x009C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      m_eFadeMode;                                      		// 0x00A0 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnPanelAdded ( );
	void Hide ( unsigned long bWithFade );
	void Show ( unsigned long bWithFade );
	void HandleEvent ( unsigned char nCommand, TArray<FString>* lstArguments );
};

// Class SFXGame.BioSFHandler_Inventory
// 0x00BD (0x0156 - 0x0099)
class UBioSFHandler_Inventory : public UBioSFHandler
{
public:
	TArray<int>                                        lstXModGuiTitles;                                 		// 0x009C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<int>                                        m_lstSquadNicknames;                              		// 0x00AC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class ABioPawn*                                    m_oLastSpawnedPawn;                               		// 0x00BC (0x0008) [0x0000000000000000]              
	class ABioPawn*                                    oOverrideDisplayCharacter;                        		// 0x00C4 (0x0008) [0x0000000000000000]              
	class UBioInventoryGuiInterface*                   m_oInvInterface;                                  		// 0x00CC (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                m_nLastEquippedIndex;                             		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                m_nShiftItemIndex;                                		// 0x00D8 (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentSquadMember;                            		// 0x00DC (0x0004) [0x0000000000000000]              
	float                                              m_fWeightBeforeGarbageCollect;                    		// 0x00E0 (0x0004) [0x0000000000000000]              
	float                                              m_fNextEquipTime;                                 		// 0x00E4 (0x0004) [0x0000000000000000]              
	int                                                srEmpty;                                          		// 0x00E8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srInventoryTitle;                                 		// 0x00EC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srEquippedItemTitle;                              		// 0x00F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srSelectedItemTitle;                              		// 0x00F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srXferXModsMsg;                                   		// 0x00F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srXferXModsConfirm;                               		// 0x00FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srXferXModsCancel;                                		// 0x0100 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srXModToInventoryXferMsg;                         		// 0x0104 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srXModToInventorySalvageMsg;                      		// 0x0108 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srXModToInventoryConfirm;                         		// 0x010C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srSalvageItemMsg;                                 		// 0x0110 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srSalvageItemConfirm;                             		// 0x0114 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srSalvageItemCancel;                              		// 0x0118 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srSalvageAllConfirm;                              		// 0x011C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nEmptyAmmoSlotIcon;                             		// 0x0120 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nEmptyFieldEmitterSlotIcon;                     		// 0x0124 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nEmptyFeatureSlotIcon;                          		// 0x0128 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nEmptyCompanyIcon;                              		// 0x012C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nEmptySlotIcon;                                 		// 0x0130 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srItemLevel;                                      		// 0x0134 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                srNameSort;                                       		// 0x0138 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              fTimeBetweenEquipActions;                         		// 0x013C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fTimeOnASlotBeforeEquipping;                      		// 0x0140 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fRScrollValue;                                  		// 0x0144 (0x0004) [0x0000000000000000]              
	float                                              m_fLScrollValue;                                  		// 0x0148 (0x0004) [0x0000000000000000]              
	int                                                MaxSort;                                          		// 0x014C (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bInitialized : 1;                               		// 0x0150 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bWantToEquip : 1;                               		// 0x0150 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      m_eCurrentSlot;                                   		// 0x0154 (0x0001) [0x0000000000000000]              
	unsigned char                                      m_eLastDisplaySlot;                               		// 0x0155 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void GetSquadMemberNames ( int* srCurMember, int* srPrevMember, int* srNextMember );
	void OnPanelRemoved ( );
	void OnPanelAdded ( );
	void NextSort ( );
	void MarkItemAsJunk ( int Index, unsigned long val );
	void Update3DModel ( );
	void Update3DCharacter ( );
	void UpdateCharDetails ( );
	bool ChangeTargetCharacter ( int nTargetMember );
	void SalvageItemProcessDoubleCheck ( unsigned long bConfirmedSalvageAttempt, int nContext, unsigned long bYPressed );
	void EquipItemProcessDoubleCheck ( unsigned long bAcceptedXferOption, int nContext, unsigned long bYPressed );
	void EquipSelectedItem ( int nItemIndex, int nXferXMods );
	void ProcessModifierList ( struct FBioInventoryGuiInterfaceItemStats const& stStatList, FString const& sMethod, int* nModifierCount );
	void PopulateInvItems ( TArray<struct FASParams> const& lstParams );
	void PopulateItemListEntry ( int nListIndex );
	FString GetProperSortString ( int SortType );
	void PopulateItemList ( unsigned long needsRefresh );
	void PopulateEquippedItem ( );
	void PopulateForCharacter ( unsigned long NeedRefresh );
	void UpdateResources ( int nRackupTime );
	void UpdateInvSlotIcons ( unsigned long bDeferUpdateFilterIcons );
	void ChangeSlotState ( unsigned char eDisplaySlot, unsigned long bUpdate3DModel, unsigned long bDeferUpdateFilterIcons );
	unsigned char CheckSkipSlot ( unsigned char eSourceSlot, int nSkipDirection );
	void SetGlobalVars ( );
	void FloatingReinit ( );
	void Update ( float fDeltaT );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void HandleEvent ( unsigned char nCommand, TArray<FString>* lstArguments );
	void CheckForGarbageCollect ( float Weight );
};

// Class SFXGame.BioSFHandler_XMods
// 0x0104 (0x019D - 0x0099)
class UBioSFHandler_XMods : public UBioSFHandler
{
public:
	struct FItemInfo                                   m_stEquippedItemInfo;                             		// 0x009C (0x00A0) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray<int>                                        lstXModSlotTypeTitles;                            		// 0x013C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UBioSFHandler_Inventory*                     m_oInvGuiHandler;                                 		// 0x014C (0x0008) [0x0000000000000000]              
	class UBioInventoryGuiInterface*                   m_oInvInterface;                                  		// 0x0154 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                m_nLastEquippedIndex;                             		// 0x015C (0x0004) [0x0000000004000008]              ( CPF_ExportObject | CPF_EditInline )
	int                                                m_nCurrentXModSlot;                               		// 0x0160 (0x0004) [0x0000000004000008]              ( CPF_ExportObject | CPF_EditInline )
	int                                                m_nShiftXModIndex;                                		// 0x0164 (0x0004) [0x0000000004000008]              ( CPF_ExportObject | CPF_EditInline )
	int                                                m_nBaseItemMaxSlots;                              		// 0x0168 (0x0004) [0x0000000004000008]              ( CPF_ExportObject | CPF_EditInline )
	int                                                MaxSort;                                          		// 0x016C (0x0004) [0x0000000000000000]              
	int                                                srEmpty;                                          		// 0x0170 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srXModsTitle;                                     		// 0x0174 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srInherent;                                       		// 0x0178 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srSalvageXModMsg;                                 		// 0x017C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srSalvageXModConfirm;                             		// 0x0180 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                srSalvageXModCancel;                              		// 0x0184 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nEmptyAmmoSlotIcon;                             		// 0x0188 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nEmptyFieldEmitterSlotIcon;                     		// 0x018C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nEmptyFeatureSlotIcon;                          		// 0x0190 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nEmptyCompanyIcon;                              		// 0x0194 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nEmptySlotIcon;                                 		// 0x0198 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      m_eCurrentItemSlot;                               		// 0x019C (0x0001) [0x0000000004000008]              ( CPF_ExportObject | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UnistallXModForCurrentSlot ( );
	void eventOnPanelRemoved ( );
	void SortModList ( );
	void MarkModAsJunk ( int Index, unsigned long val );
	void ChangeTargetCharacter ( );
	void UpdateResources ( );
	void SalvageXModProcessDoubleCheck ( unsigned long bConfirmedSalvageAttempt, int nContext, unsigned long bYPressed );
	void FuseItem ( );
	void EquipSelectedItem ( int nItemIndex, int nSlotIndex );
	void PopulateItemListEntry ( int nListIndex );
	void PopulateInventoryXModItem ( TArray<struct FASParams> const& lstParams );
	void PopulateEquippedSlotAsItemListEntry ( int nXModIndex, int nListIndex );
	void PopulateItemList ( unsigned long needsRefresh );
	void PopulateEquippedItemXModSlotEntry ( int nSlotIndex );
	void PopulateEquippedItemInherentEntry ( );
	void PopulateEquippedItemXModSlots ( );
	void PopulateEquippedItem ( );
	void PopulateForCharacter ( unsigned long needsRefresh );
	void ChangeSlotState ( unsigned char eDisplaySlot );
	void SetGlobalVars ( );
	void UninstallXModForCurrentSlot ( );
	void SetXModFilterSlot ( int nNewXmodSlot );
	void HandleEvent ( unsigned char nCommand, TArray<FString>* lstArguments );
};

// Class SFXGame.BioSFHandler_CharacterRecord
// 0x0053 (0x00EC - 0x0099)
class UBioSFHandler_CharacterRecord : public UBioSFHandler
{
public:
	TArray<unsigned long>                              m_PawnIsSpawned;                                  		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray<int>                                        m_lstSquadNicknames;                              		// 0x00AC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class ABioWorldInfo*                               m_WorldInfo;                                      		// 0x00BC (0x0008) [0x0000000000000000]              
	class ABioPawn*                                    m_CurrentPawn;                                    		// 0x00C4 (0x0008) [0x0000000000000000]              
	class UBioTalentContainer*                         m_TalentContainer;                                		// 0x00CC (0x0008) [0x0000000000000000]              
	int                                                m_CurrentPawnIndex;                               		// 0x00D4 (0x0004) [0x0000000000000000]              
	int                                                nMaxRenegade;                                     		// 0x00D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                nMaxParagon;                                      		// 0x00DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srFaceCodeFormat;                               		// 0x00E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fScrollValue;                                   		// 0x00E4 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bWasWearingHelmet : 1;                          		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void GetSquadMemberNames ( int* srCurMember, int* srPrevMember, int* srNextMember );
	void RestoreHeadGear ( );
	void HideHeadGear ( );
	bool GetExperienceProgress ( int* currentXP, int* targetXP );
	void UpdateTalentPoints ( );
	void UpdateTalentRanks ( int talentIndex, struct FBioTalentDynamicData* Data );
	void UpdateTalentList ( );
	void CreateTalentList ( );
	void UpdateCharacterStats ( );
	int GetCharacterLevel ( );
	void UpdateCharacter ( );
	void CancelTalentChanges ( );
	void ClearTalentChanges ( );
	void CommitTalentChanges ( );
	void PurchaseTalentRank ( int talentIndex );
	void AutoLevelUp ( );
	bool ChangeToCharacter ( class ABioPawn* NextCharacter );
	bool NextCharacter ( unsigned long bNext );
	bool InitializeCharacterRecord ( );
	void ToggleHelmet ( );
	void OnPanelAdded ( );
	void OnPanelRemoved ( );
	void Update ( float fDeltaT );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void HandleEvent ( unsigned char nCommand, TArray<FString>* Parameters );
};

// Class SFXGame.BioSFHandler_Conversation
// 0x00AD (0x0146 - 0x0099)
class UBioSFHandler_Conversation : public UBioSFHandler
{
public:
	FString                                            m_szLastSubtitleText;                             		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_aReplyLocations[ 0x6 ];                         		// 0x00AC (0x0018) [0x0000000000000000]              
	int                                                m_aInvestigateLocations[ 0x6 ];                   		// 0x00C4 (0x0018) [0x0000000000000000]              
	struct FVector                                     vMouseInput;                                      		// 0x00DC (0x000C) [0x0000000000000000]              
	struct FVector                                     vInput;                                           		// 0x00E8 (0x000C) [0x0000000000000000]              
	class UBioSubtitles*                               m_oLastSubtitle;                                  		// 0x00F4 (0x0008) [0x0000000000000000]              
	int                                                m_srTextInvestigate;                              		// 0x00FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_srTextReturn;                                   		// 0x0100 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nReplyLocationMiddleLeft;                       		// 0x0104 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nReplyLocationTopLeft;                          		// 0x0108 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nReplyLocationBottomLeft;                       		// 0x010C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nReplyLocationTopRight;                         		// 0x0110 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nReplyLocationBottomRight;                      		// 0x0114 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nReplyLocationMiddleRight;                      		// 0x0118 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nInvestigateLocationMiddleLeft;                 		// 0x011C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nInvestigateLocationTopLeft;                    		// 0x0120 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nInvestigateLocationBottomLeft;                 		// 0x0124 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nInvestigateLocationTopRight;                   		// 0x0128 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nInvestigateLocationBottomRight;                		// 0x012C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nInvestigateLocationMiddleRight;                		// 0x0130 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              fLastRadius;                                      		// 0x0134 (0x0004) [0x0000000000000000]              
	float                                              AccumulationDivisor;                              		// 0x0138 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      m_bDisplayInvestigateSubMenu : 1;                 		// 0x013C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bDisplayingWheel : 1;                           		// 0x013C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      m_bSlotsUsed[ 0x6 ];                              		// 0x0140 (0x0006) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool ChangeConversationMenu ( class UBioConversation* oConversation, int nReplyIndex );
	int GetInvestigateReplyCount ( class UBioConversation* oConversation );
	unsigned char GetReplyLocation ( int nReplyCategory );
	unsigned char GetInvestigateReplyLocation ( int nInvestigateSlot );
	int GetInvestigateReplyFromWheelLocation ( class UBioConversation* oConversation, unsigned char nWheelLocation );
	bool SelectConversationEntry ( unsigned char nWheelLocation );
	int MapGuiStyleToOptionMode ( unsigned char eGUIStyle );
	void UpdateConversationOptions ( class UBioConversation* oConversation );
	void Update ( float fDeltaT );
	void CalculateArrowPosition ( struct FASParams* stParam, TArray<struct FASParams>* lstParams );
	void OnRemovePanel ( );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void HandleEvent ( unsigned char nCommand, TArray<FString>* lstArguments );
	void SkipConversation ( );
	void SelectConversationSegment ( );
	void OnPanelRemoved ( );
	void OnPanelAdded ( );
	int GetNumReplies ( class UBioConversation* oConversation );
};

// Class SFXGame.BioSFHandler_InventoryIGGOverride
// 0x0003 (0x009C - 0x0099)
class UBioSFHandler_InventoryIGGOverride : public UBioSFHandler
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void HandleEvent ( unsigned char nCommand, TArray<FString>* lstArguments );
};

// Class SFXGame.BioSFHandler_Specialization
// 0x002F (0x00C8 - 0x0099)
class UBioSFHandler_Specialization : public UBioSFHandler
{
public:
	TArray<struct FBioSpecializationData>              m_specializationArray;                            		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioTalentContainer*                         m_playerTalents;                                  		// 0x00AC (0x0008) [0x0000000000000000]              
	class UBioAttributesPawnPlayer*                    m_playerAttributes;                               		// 0x00B4 (0x0008) [0x0000000000000000]              
	int                                                m_specializationGuiDescription;                   		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              m_fRScrollValue;                                  		// 0x00C0 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_preInitializationSucceeded : 1;                 		// 0x00C4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void OnPanelAdded ( );
	void UpdateSpecializations ( );
	void ChooseSpecialization ( int SpecIndex );
	void Update ( float fDeltaT );
	void HandleInputEvent ( unsigned char Event, float fValue );
	void HandleEvent ( unsigned char nCommand, TArray<FString>* Parameters );
	bool PreInitialization ( class ABioPawn* PlayerPawn );
};

// Class SFXGame.BioTimerList
// 0x0020 (0x0080 - 0x0060)
class UBioTimerList : public UObject
{
public:
	TArray<struct FBioTimer>                           lstTimers;                                        		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __BioTimerDelegate__Delegate;                     		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float fDeltaT );
	bool KillTimer ( FString const& i_sTimerName );
	void AddTimer ( struct FScriptDelegate TimerDelegate, class UObject* Params, float fTime, FString const& i_sTimerName );
	void BioTimerDelegate ( class UObject* Params );
};

// Class SFXGame.BioSFHandler_PCCharacterRecord
// 0x0008 (0x00F4 - 0x00EC)
class UBioSFHandler_PCCharacterRecord : public UBioSFHandler_CharacterRecord
{
public:
	class UBioSFHandler*                               m_IGGHandler;                                     		// 0x00EC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void ClosePanel ( );
	void ApplyOrNotThenExit ( unsigned long bAPressed, int nContext );
	void ConfirmCommit ( );
	bool NeedsToConfirm ( );
	void RemoveTalentPoint ( int RankIndex );
	void HandleInputEvent ( unsigned char Event, float fValue );
	bool InitializeCharacterRecord ( );
	void SetCharacter ( int Index );
	void HandleEvent ( unsigned char nCommand, TArray<FString>* Parameters );
	void eventUpdate ( float fDeltaT );
	void SetIGGHandler ( class UBioSFHandler* pHandler );
};

// Class SFXGame.BioSFHandler_PCInventory
// 0x0006 (0x015C - 0x0156)
class UBioSFHandler_PCInventory : public UBioSFHandler_Inventory
{
public:
	int                                                maxSquadSize;                                     		// 0x0158 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void InitializeModsSection ( );
	void UpdateInvSlotIcons ( unsigned long bDeferUpdateFilterIcons );
	void UpdateTeamBox ( );
	void InitializeInventoryHelper ( TArray<FString>* lstArguments );
	void PopulateInvItems ( TArray<struct FASParams> const& lstParams );
	void SetItemFilterSlot ( int nFilter );
	void HandleEvent ( unsigned char nCommand, TArray<FString>* Parameters );
	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void OnPanelAdded ( );
	void eventUpdate ( float fDeltaT );
};

// Class SFXGame.SFXCameraMode_Interpolate
// 0x0061 (0x0189 - 0x0128)
class USFXCameraMode_Interpolate : public USFXCameraMode
{
public:
	struct FInterpCurveFloat                           Curve;                                            		// 0x0128 (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     AimPoint;                                         		// 0x013C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RotationOffset;                                   		// 0x0148 (0x000C) [0x0000000000000000]              
	struct FVector                                     LocationOffset;                                   		// 0x0154 (0x000C) [0x0000000000000000]              
	class USFXCameraMode*                              From;                                             		// 0x0160 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USFXCameraMode*                              To;                                               		// 0x0168 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              TotalTime;                                        		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentTime;                                      		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultTime;                                      		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AimPointDistance;                                 		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinAimPointPreservationDistance;                  		// 0x0180 (0x0004) [0x0000000000000000]              
	unsigned long                                      bComplete : 1;                                    		// 0x0184 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisableAimPointPreservation : 1;                 		// 0x0184 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned char                                      InterpMethod;                                     		// 0x0188 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DrawHUD ( class UBioCheatManager* M );
	struct FRotator GetCurrentShake ( );
	void Tick ( float TimeDelta );
	bool GetActorCameraHook ( struct FVector* OutLocation );
	void Trace ( class AActor** HitActor, struct FVector* HitLocation );
	void InitializeTransition ( class USFXCameraMode* FromMode, class USFXCameraMode* ToMode, float Time, unsigned long PreserveTarget );
	void ModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
	bool CheckLoop ( class USFXCameraMode* Mode, int RecurseLevel );
	float Interpolate ( float T );
};

// Class SFXGame.SFXGameModePhoto
// 0x01B7 (0x0284 - 0x00CD)
class USFXGameModePhoto : public USFXGameModeBase
{
public:
	struct FPostProcessSettings                        PostProcessSettings;                              		// 0x00D0 (0x00E0) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInterpCurveFloat                           ButtonCooldownCurve;                              		// 0x01B0 (0x0014) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<struct FCachedActorState>                   CachedPlayer;                                     		// 0x01C4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<struct FCachedActorState>                   CachedParty;                                      		// 0x01D4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<struct FCachedActorState>                   CachedEnemies;                                    		// 0x01E4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<struct FCachedActorState>                   CachedVehicles;                                   		// 0x01F4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<struct FCachedActorState>                   CachedNPCs;                                       		// 0x0204 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<FString>                                    FilterMaterialPaths;                              		// 0x0214 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray<class UMaterialEffect*>                     FilterEffects;                                    		// 0x0224 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray<float>                                      ButtonPressTimes;                                 		// 0x0234 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class USoundCue*                                   TakePhotoSound;                                   		// 0x0244 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USFXCameraMode_PhotoFree*                    PhotoCamFree;                                     		// 0x024C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_PhotoOrbit*                   PhotoCamOrbit;                                    		// 0x0254 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraTransition_GalaxyMap*              InstantTransition;                                		// 0x025C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UMaterialEffect*                             ME_ScreenEffect;                                  		// 0x0264 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              CamTransitionTime;                                		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultPP_DOF_Radius;                             		// 0x0270 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DefaultPP_DOF_FalloffExponent;                    		// 0x0274 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DefaultPP_DOF_BlurKernelSize;                     		// 0x0278 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              DefaultPP_DOF_BlurBloomKernelSize;                		// 0x027C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned long                                      bUseOrbitCam : 1;                                 		// 0x0280 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bOldAllowFilmGrain : 1;                           		// 0x0280 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bPlayerHidden : 1;                                		// 0x0280 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bPartyHidden : 1;                                 		// 0x0280 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bEnemiesHidden : 1;                               		// 0x0280 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bVehiclesHidden : 1;                              		// 0x0280 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bNPCsHidden : 1;                                  		// 0x0280 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bOldConvInputDisabled : 1;                        		// 0x0280 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bOldConvHandleInputThisFrame : 1;                 		// 0x0280 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void TakePhoto ( );
	void DisableCamera ( );
	void EnableCamera ( );
	void ToggleOptions ( );
	bool ShowMenuGui ( );
	void GuiKey ( unsigned char Event );
	void HideAttachedActors ( TArray<struct FCachedActorState>* InHiddenActors );
	void SetVehicleHidden ( unsigned long bValue );
	void SetNPCsHidden ( unsigned long bValue );
	void SetEnemiesHidden ( unsigned long bValue );
	void SetPartyHidden ( unsigned long bValue );
	void SetPlayerHidden ( unsigned long bValue );
	void SetVignetteEnabled ( unsigned long bValue );
	void SetFilmGrainStrength ( float Value );
	void SetFilmGrainEnabled ( unsigned long bValue );
	void SetBloomThreshold ( float Value );
	void SetBloomIntensity ( float Value );
	void SetEffectFilter ( int Value );
	void SetContrast ( float Value );
	void SetBrightness ( float Value );
	void SetSaturation ( float Value );
	void SetDOFIntensity ( float Value );
	void SetDOFFStop ( float Value );
	void SetDOFDistance ( float Value );
	void SetDOFEnabled ( unsigned long bValue );
	void SetCameraFOV ( float NewFOV );
	void SetCameraRoll ( float NewRoll );
	void SetOrbitCam ( unsigned long bValue );
	void ModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
	void ResetFilters ( );
	void InitializeFilters ( );
	void InitializePostProcessSettings ( );
	void Deactivated ( );
	void Activated ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
};

// Class SFXGame.SFXGameModeVehicle
// 0x002B (0x00F8 - 0x00CD)
class USFXGameModeVehicle : public USFXGameModeBase
{
public:
	class USFXCameraInput*                             MagnifiedInput;                                   		// 0x00D0 (0x0008) [0x0000000000000000]              
	class USFXCameraMode_Vehicle*                      VehicleCam;                                       		// 0x00D8 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_VehicleTightAim*              VehicleTightAimCam;                               		// 0x00E0 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_VehicleTightAimEx*            VehicleTightAimExCam;                             		// 0x00E8 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              InputDelayTightAimExit;                           		// 0x00F0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MagnificationTransitionDuration;                  		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool ShowMenuGui ( );
	void LeaveWorld ( );
	void RepairVehicle ( );
	void StopFiringCannon ( );
	void FireCannon ( );
	void ToggleVehicleAim ( );
	void ChangeMagnification ( );
	void TurnOffVehicleTightAim ( );
	void StopVehicleTightAim ( );
	void VehicleTightAim ( );
	void TryExitVehicle ( );
	bool TryUprightVehicle ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
};

// Class SFXGame.SFXGameModePowerWheel
// 0x0007 (0x00D4 - 0x00CD)
class USFXGameModePowerWheel : public USFXGameModeBase
{
public:
	float                                              DisableMoveTime;                                  		// 0x00D0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool ShowMenuGui ( );
	void ExitPowerWheel ( );
	void EnableMovement ( );
	void Deactivated ( );
	void Activated ( );
};

// Class SFXGame.SFXGameModeWeaponWheel
// 0x0007 (0x00D4 - 0x00CD)
class USFXGameModeWeaponWheel : public USFXGameModeBase
{
public:
	float                                              DisableMoveTime;                                  		// 0x00D0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool ShowMenuGui ( );
	void ExitWeaponWheel ( );
	void EnableMovement ( );
	void Deactivated ( );
	void Activated ( );
};

// Class SFXGame.SFXGameModeCommand
// 0x0007 (0x00D4 - 0x00CD)
class USFXGameModeCommand : public USFXGameModeBase
{
public:
	unsigned long                                      bCameraEnabled : 1;                               		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool ShowMenuGui ( );
	void ExitCommandMenu ( );
	void DisableCamera ( );
	void EnableCamera ( );
	void Deactivated ( );
	void Activated ( );
};

// Class SFXGame.SFXGameModeConversation
// 0x0013 (0x00E0 - 0x00CD)
class USFXGameModeConversation : public USFXGameModeBase
{
public:
	class UBioCameraBehaviorConversation*              ConversationCam;                                  		// 0x00D0 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraTransition_GalaxyMap*              InstantTransition;                                		// 0x00D8 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SkipConversation ( );
	void SelectResponse ( );
	class USFXCameraMode* HACK_GetCameraMode ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
	void Deactivated ( );
	void Activated ( );
};

// Class SFXGame.SFXGameModeCinematic
// 0x002B (0x00F8 - 0x00CD)
class USFXGameModeCinematic : public USFXGameModeBase
{
public:
	class USFXCameraMode_Cinematic*                    ExploreCam;                                       		// 0x00D0 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_Cinematic*                    CombatCam;                                        		// 0x00D8 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_Cinematic*                    VehicleCam;                                       		// 0x00E0 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraTransition_GalaxyMap*              InstantTransition;                                		// 0x00E8 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              CinematicSkipDelay;                               		// 0x00F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bCineFastForwardEnabled : 1;                      		// 0x00F4 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bEnableCinematicSkip : 1;                         		// 0x00F4 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SkipCinematic ( );
	void CinematicFF ( unsigned long bOn );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
};

// Class SFXGame.SFXGameModeGUI
// 0x0023 (0x00F0 - 0x00CD)
class USFXGameModeGUI : public USFXGameModeBase
{
public:
	TArray<struct SFXName>                             StackedGuis;                                      		// 0x00D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UBioCameraBehaviorFlourish*                  DeathCam;                                         		// 0x00E0 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraTransition_GalaxyMap*              InstantTransition;                                		// 0x00E8 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void TryEnterPhotoMode ( );
	void DeactivateSpecifier ( struct SFXName ModeSpecifier );
	void ActivateSpecifier ( struct SFXName ModeSpecifier );
	void Deactivated ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
};

// Class SFXGame.SFXGameModeMovie
// 0x0017 (0x00E4 - 0x00CD)
class USFXGameModeMovie : public USFXGameModeBase
{
public:
	class USFXCameraMode_Cinematic*                    ExploreCam;                                       		// 0x00D0 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraTransition_GalaxyMap*              InstantTransition;                                		// 0x00D8 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bLoadingMovie : 1;                                		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SkipMovie ( );
	void Deactivated ( );
	void ActivateSpecifier ( struct SFXName ModeSpecifier );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
};

// Class SFXGame.SFXGameModeGalaxy
// 0x0013 (0x00E0 - 0x00CD)
class USFXGameModeGalaxy : public USFXGameModeBase
{
public:
	class UBioCameraBehaviorGalaxy*                    GalaxyCam;                                        		// 0x00D0 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraTransition_GalaxyMap*              InstantTransition;                                		// 0x00D8 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class USFXCameraMode* HACK_GetCameraMode ( );
	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
	void Deactivated ( );
	void Activated ( );
};

// Class SFXGame.SFXGameModeMinigame
// 0x0003 (0x00D0 - 0x00CD)
class USFXGameModeMinigame : public USFXGameModeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void MinigameButton ( int Index );
	void ExitMinigame ( );
};

// Class SFXGame.SFXGameModeFlyCam
// 0x000B (0x00D8 - 0x00CD)
class USFXGameModeFlyCam : public USFXGameModeBase
{
public:
	class UBioCameraBehaviorFree*                      FreeCam;                                          		// 0x00D0 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class USFXCameraMode* GetCameraMode ( class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
};

// Class SFXGame.BioSFHandler_PCPartySelection
// 0x0000 (0x00C8 - 0x00C8)
class UBioSFHandler_PCPartySelection : public UBioSFHandler_PartySelection
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleButtonRefresh ( unsigned long usingGamepad );
	void Update ( float fDeltaT );
	void OnPanelAdded ( );
};

// Class SFXGame.BioSFHandler_SelectCharacter
// 0x0003 (0x009C - 0x0099)
class UBioSFHandler_SelectCharacter : public UBioSFHandler
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UpdateCharacterData ( );
	bool DoCharactersExist ( );
	void HandleEvent ( unsigned char nCommand, TArray<FString>* lstArguments );
};

// Class SFXGame.BioSkillMap
// 0x0014 (0x0074 - 0x0060)
class UBioSkillMap : public UObject
{
public:
	TArray<struct SFXName>                             SkillToStateMap;                                  		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      m_bClosedIsSkillState : 1;                        		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool IsSkillInMap ( struct SFXName Skill );
	struct SFXName GetSkill ( int Num );
};

// Class SFXGame.BioSkillMap_Door
// 0x0000 (0x0074 - 0x0074)
class UBioSkillMap_Door : public UBioSkillMap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioSkillMap_Test
// 0x0000 (0x0074 - 0x0074)
class UBioSkillMap_Test : public UBioSkillMap
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioStartLocation
// 0x0000 (0x0284 - 0x0284)
class ABioStartLocation : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioStartPoint
// 0x0000 (0x0384 - 0x0384)
class ABioStartPoint : public ANavigationPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioTempNavPoint
// 0x0000 (0x0384 - 0x0384)
class ABioTempNavPoint : public ANavigationPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioTimedActivity
// 0x0010 (0x009C - 0x008C)
class UBioTimedActivity : public UBioBaseActivity
{
public:
	TArray<struct FTwitchRec>                          m_aTwitchAnims;                                   		// 0x008C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioTriggerActorFactory
// 0x0000 (0x008C - 0x008C)
class UBioTriggerActorFactory : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioTriggerVolume
// 0x0004 (0x02C8 - 0x02C4)
class ABioTriggerVolume : public ATriggerVolume
{
public:
	unsigned long                                      Enabled : 1;                                      		// 0x02C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      OneShot : 1;                                      		// 0x02C4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventBioBeginPlay ( );
	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector const& HitLocation, struct FVector const& HitNormal );
};

// Class SFXGame.SFXCameraShakeBase
// 0x0078 (0x00D8 - 0x0060)
class USFXCameraShakeBase : public UObject
{
public:
	struct FScreenShakeStruct                          TheShake;                                         		// 0x0060 (0x0078) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCameraShake_MakoJumpJets
// 0x0000 (0x00D8 - 0x00D8)
class USFXCameraShake_MakoJumpJets : public USFXCameraShakeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCameraShake_MakoBoost
// 0x0000 (0x00D8 - 0x00D8)
class USFXCameraShake_MakoBoost : public USFXCameraShakeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioVehicleWheeledType
// 0x0000 (0x00EC - 0x00EC)
class UBioVehicleWheeledType : public UBioVehicleBaseType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioWaypointSetFactory
// 0x0000 (0x008C - 0x008C)
class UBioWaypointSetFactory : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioWorldInfoTick
// 0x0000 (0x0284 - 0x0284)
class ABioWorldInfoTick : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float fDeltaT );
};

// Class SFXGame.BioWorldInteraction
// 0x0030 (0x02B4 - 0x0284)
class ABioWorldInteraction : public AActor
{
public:
	TArray<class UAnimSet*>                            m_oBaseAnimSets;                                  		// 0x0284 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<class UAnimSet*>                            m_oConversationAnimSets;                          		// 0x0294 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<class UBioBaseActivity*>                    m_aoActivities;                                   		// 0x02A4 (0x0010) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioWP_AirAssault
// 0x0000 (0x0388 - 0x0388)
class ABioWP_AirAssault : public ABioWP_AirPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioWp_AirDefense
// 0x0000 (0x0388 - 0x0388)
class ABioWp_AirDefense : public ABioWP_AirPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioWp_AssaultPoint
// 0x0000 (0x0388 - 0x0388)
class ABioWp_AssaultPoint : public ABioPathPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioWp_ChangeRoute
// 0x0015 (0x039D - 0x0388)
class ABioWp_ChangeRoute : public ABioPathPoint
{
public:
	struct SFXName                                     PathToWalk;                                       		// 0x0388 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MoveTolerance;                                    		// 0x0390 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                StartAtWaypoint;                                  		// 0x0394 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      Walking : 1;                                      		// 0x0398 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      WalkType;                                         		// 0x039C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool OnCreatureReachedWayPoint ( class APawn* PathFindingCreature );
};

// Class SFXGame.BioWp_Cover
// 0x0008 (0x0390 - 0x0388)
class ABioWp_Cover : public ABioPathPoint
{
public:
	class ABioArtPlaceable*                            oCoveringobject;                                  		// 0x0388 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioWp_DefensePoint
// 0x0000 (0x0388 - 0x0388)
class ABioWp_DefensePoint : public ABioPathPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioWp_Delay
// 0x0004 (0x038C - 0x0388)
class ABioWp_Delay : public ABioPathPoint
{
public:
	float                                              DelayInSeconds;                                   		// 0x0388 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool OnCreatureReachedWayPoint ( class APawn* PathFindingCreature );
};

// Class SFXGame.BioWp_GuardPost
// 0x0000 (0x0388 - 0x0388)
class ABioWp_GuardPost : public ABioPathPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.BioWp_PlayAnim
// 0x0024 (0x03AC - 0x0388)
class ABioWp_PlayAnim : public ABioPathPoint
{
public:
	TArray<struct SFXName>                             Animations;                                       		// 0x0388 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray<class UAnimSet*>                            AnimationSets;                                    		// 0x0398 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      Looping : 1;                                      		// 0x03A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RandomAnimation : 1;                              		// 0x03A8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool OnCreatureReachedWayPoint ( class APawn* PathFindingCreature );
};

// Class SFXGame.BioWp_SniperPoint
// 0x0000 (0x0388 - 0x0388)
class ABioWp_SniperPoint : public ABioPathPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXAnimNotify_DisableProcEyeBlink
// 0x0000 (0x0060 - 0x0060)
class USFXAnimNotify_DisableProcEyeBlink : public UAnimNotify_Scripted
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Notify ( class AActor* Owner, class UAnimNodeSequence* Sequence );
};

// Class SFXGame.SFXAnimNotify_EnableProcEyeBlink
// 0x0000 (0x0060 - 0x0060)
class USFXAnimNotify_EnableProcEyeBlink : public UAnimNotify_Scripted
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXAnimNotify_ScreenShake
// 0x0078 (0x00D8 - 0x0060)
class USFXAnimNotify_ScreenShake : public UAnimNotify_Scripted
{
public:
	struct FScreenShakeStruct                          CameraShake;                                      		// 0x0060 (0x0078) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Notify ( class AActor* Owner, class UAnimNodeSequence* Sequence );
};

// Class SFXGame.SFXCameraMode_Cinematic
// 0x0000 (0x0128 - 0x0128)
class USFXCameraMode_Cinematic : public USFXCameraMode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCameraMode_Combat
// 0x0008 (0x0130 - 0x0128)
class USFXCameraMode_Combat : public USFXCameraMode
{
public:
	class UMotionBlurEffect*                           Blur;                                             		// 0x0128 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void MakeInactive ( );
	void MakeActive ( );
};

// Class SFXGame.SFXCameraMode_CombatStorm
// 0x0008 (0x0138 - 0x0130)
class USFXCameraMode_CombatStorm : public USFXCameraMode_Combat
{
public:
	float                                              StickFactor;                                      		// 0x0130 (0x0004) [0x0000000000000000]              
	float                                              FullTurnRecenter;                                 		// 0x0134 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ProcessViewRotation ( float DeltaTime, struct FRotator* OutViewRotation, struct FRotator* OutDeltaRot );
	void Tick ( float DeltaTime );
	void SetTarget ( );
	void Initialize ( );
};

// Class SFXGame.SFXCameraMode_EnterCover
// 0x0000 (0x0130 - 0x0130)
class USFXCameraMode_EnterCover : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCameraMode_ExploreStorm
// 0x0008 (0x0130 - 0x0128)
class USFXCameraMode_ExploreStorm : public USFXCameraMode_Explore
{
public:
	float                                              StickFactor;                                      		// 0x0128 (0x0004) [0x0000000000000000]              
	float                                              FullTurnRecenter;                                 		// 0x012C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ProcessViewRotation ( float DeltaTime, struct FRotator* OutViewRotation, struct FRotator* OutDeltaRot );
	void Tick ( float DeltaTime );
	void SetTarget ( );
	void Initialize ( );
};

// Class SFXGame.SFXCameraMode_HipAimCover
// 0x0000 (0x0130 - 0x0130)
class USFXCameraMode_HipAimCover : public USFXCameraMode_Combat
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCameraMode_PhotoFree
// 0x0000 (0x0160 - 0x0160)
class USFXCameraMode_PhotoFree : public USFXCameraMode_Photo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float DeltaTime );
	void Initialize ( );
};

// Class SFXGame.SFXCameraMode_TightAim
// 0x0008 (0x0138 - 0x0130)
class USFXCameraMode_TightAim : public USFXCameraMode_Combat
{
public:
	float                                              CurrentFOV;                                       		// 0x0130 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FOVInterpFactor;                                  		// 0x0134 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float TimeDelta );
	void ModifyPostProcessSettings ( struct FPostProcessSettings* PPSettings );
};

// Class SFXGame.SFXCameraMode_SniperAim
// 0x0000 (0x0138 - 0x0138)
class USFXCameraMode_SniperAim : public USFXCameraMode_TightAim
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCameraMode_Vehicle
// 0x0010 (0x0138 - 0x0128)
class USFXCameraMode_Vehicle : public USFXCameraMode
{
public:
	class UMotionBlurEffect*                           Blur;                                             		// 0x0128 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              Sharpness;                                        		// 0x0130 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bFirstUpdate : 1;                                 		// 0x0134 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void MakeInactive ( );
	void MakeActive ( );
	void Tick ( float DeltaTime );
	void Initialize ( );
};

// Class SFXGame.SFXCameraMode_VehicleTightAim
// 0x0000 (0x0128 - 0x0128)
class USFXCameraMode_VehicleTightAim : public USFXCameraMode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCameraMode_VehicleTightAimEx
// 0x0000 (0x0128 - 0x0128)
class USFXCameraMode_VehicleTightAimEx : public USFXCameraMode_VehicleTightAim
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXCameraTransition_ZoomSnap
// 0x0027 (0x01B0 - 0x0189)
class USFXCameraTransition_ZoomSnap : public USFXCameraMode_Interpolate
{
public:
	struct FVector                                     ZoomSnapTargetLocation;                           		// 0x018C (0x000C) [0x0000000000000000]              
	struct FRotator                                    StartRotation;                                    		// 0x0198 (0x000C) [0x0000000000000000]              
	struct FVector                                     StartLocation;                                    		// 0x01A4 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float TimeDelta );
	void MakeInactive ( );
	void InitializeTransition ( class USFXCameraMode* FromMode, class USFXCameraMode* ToMode, float Time, unsigned long PreserveTarget );
};

// Class SFXGame.SFXCameraSetup
// 0x0150 (0x01B0 - 0x0060)
class USFXCameraSetup : public UObject
{
public:
	struct FInterpCurveFloat                           ZoomSnapCurve;                                    		// 0x0060 (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USFXCameraTransition_ZoomSnap*               ZoomSnapTransition;                               		// 0x0074 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_Explore*                      ExploreCam;                                       		// 0x007C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_Explore*                      ExploreCamElevator;                               		// 0x0084 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_Combat*                       CombatCam;                                        		// 0x008C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_Combat*                       CombatCrouchCam;                                  		// 0x0094 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              CombatTightAim;                                   		// 0x009C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              CombatCrouchTightAim;                             		// 0x00A4 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_ExploreStorm*                 ExploreStormCam;                                  		// 0x00AC (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode_CombatStorm*                  CombatStormCam;                                   		// 0x00B4 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              DefaultCrouch;                                    		// 0x00BC (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              DefaultStand;                                     		// 0x00C4 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              PeekUp;                                           		// 0x00CC (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              PeekLeftCrouch;                                   		// 0x00D4 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              PeekLeftStand;                                    		// 0x00DC (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              PeekRightCrouch;                                  		// 0x00E4 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              PeekRightStand;                                   		// 0x00EC (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              PopUp;                                            		// 0x00F4 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              LeanLeftCrouch;                                   		// 0x00FC (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              LeanLeftStand;                                    		// 0x0104 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              LeanRightCrouch;                                  		// 0x010C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              LeanRightStand;                                   		// 0x0114 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              BlindUp;                                          		// 0x011C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              BlindLeftCrouch;                                  		// 0x0124 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              BlindLeftStand;                                   		// 0x012C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              BlindRightCrouch;                                 		// 0x0134 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              BlindRightStand;                                  		// 0x013C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              PowerCoverPopup;                                  		// 0x0144 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              PowerCoverMidLeanLeft;                            		// 0x014C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              PowerCoverMidLeanRight;                           		// 0x0154 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              PowerCoverStdLeanLeft;                            		// 0x015C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USFXCameraMode*                              PowerCoverStdLeanRight;                           		// 0x0164 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              EnterCoverTransitionTime;                         		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CrouchTransitionTime;                             		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PowerCoverTransitionTime;                         		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeanCoverTransitionTime;                          		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PeekCoverTransitionTime;                          		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VehicleTransitionTime;                            		// 0x0180 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnterStormTransitionTime;                         		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExitStormTransitionTime;                          		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StormModeChangeTransitionTime;                    		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SniperZoomTransitionTime;                         		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnterAimTransitionTime;                           		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CrouchCameraTransitionTime;                       		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultTransitionTime;                            		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultCombatTransitionTime;                      		// 0x01A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ElevatorCameraTransitionTime;                     		// 0x01A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ZoomSnapTransitionTime;                           		// 0x01A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWasUsingPower : 1;                               		// 0x01AC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bPowerTriggeredLean : 1;                          		// 0x01AC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class USFXCameraMode* GetCoverCameraMode ( class ABioPlayerController* PC, class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
	bool PowerTriggeredLean ( class ABioPawn* ChkPawn );
	void GetCombatCamera ( class ABioPlayerController* PC, class USFXCameraMode* OldCameraMode, class USFXCameraMode** NewCameraMode, float* TransitionTime );
	void GetExploreCameraMode ( class ABioPlayerController* PC, class USFXCameraMode* OldCameraMode, class USFXCameraMode** NewCameraMode, float* TransitionTime );
	class USFXCameraMode* GetCameraMode ( class ABioPlayerController* PC, class USFXCameraMode* OldCameraMode, int* PreserveTarget, float* TransitionTime, class USFXCameraMode_Interpolate** Transition );
};

// Class SFXGame.SFXCameraTransition_FaceTarget
// 0x0027 (0x01B0 - 0x0189)
class USFXCameraTransition_FaceTarget : public USFXCameraMode_Interpolate
{
public:
	struct FVector                                     TargetLocation;                                   		// 0x018C (0x000C) [0x0000000000000000]              
	struct FRotator                                    StartRotation;                                    		// 0x0198 (0x000C) [0x0000000000000000]              
	struct FVector                                     StartLocation;                                    		// 0x01A4 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float TimeDelta );
	void InitializeTransition ( class USFXCameraMode* FromMode, class USFXCameraMode* ToMode, float Time, unsigned long PreserveTarget );
};

// Class SFXGame.SFXCameraTransition_GalaxyMap
// 0x0003 (0x018C - 0x0189)
class USFXCameraTransition_GalaxyMap : public USFXCameraMode_Interpolate
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float TimeDelta );
	void InitializeTransition ( class USFXCameraMode* FromMode, class USFXCameraMode* ToMode, float Time, unsigned long PreserveTarget );
};

// Class SFXGame.SFXGameViewportClient
// 0x0000 (0x01D4 - 0x01D4)
class USFXGameViewportClient : public UGFxGameViewportClient
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class SFXGame.SFXSeqAct_FindTerrainHeight
// 0x0040 (0x0138 - 0x00F8)
class USFXSeqAct_FindTerrainHeight : public USequenceAction
{
public:
	struct FVector                                     QueryLocation;                                    		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TraceExtent;                                      		// 0x0104 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     HitLocation;                                      		// 0x0110 (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FVector                                     HitNormal;                                        		// 0x011C (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class UObject*                                     HitObject;                                        		// 0x0128 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	float                                              VecticalRange;                                    		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Distance;                                         		// 0x0134 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void Activated ( );
};

// Class SFXGame.SFXSeqAct_IsSquadInactive
// 0x0008 (0x0100 - 0x00F8)
class USFXSeqAct_IsSquadInactive : public USequenceAction
{
public:
	class ABioBaseSquad*                               m_oSquad;                                         		// 0x00F8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class SFXGame.SFXSeqAct_TextureBlockConfig
// 0x0004 (0x00FC - 0x00F8)
class USFXSeqAct_TextureBlockConfig : public USequenceAction
{
public:
	int                                                TextureBlockBehavior;                             		// 0x00F8 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};



#undef LESDK_IN_GENERATED

#ifdef _MSC_VER
	#pragma pack ( pop )
#endif
